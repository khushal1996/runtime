// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Adapted from:
// Generated by Fuzzlyn v1.5 on 2022-11-14 02:52:08
// Run on Arm64 Windows
// Seed: 11038715273855459808
// Reduced from 96.6 KiB to 0.9 KiB in 00:08:38
// Debug: Outputs 0
// Release: Outputs 1
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics.X86;
using System.Runtime.Intrinsics;

namespace System.Runtime.Intrinsics.X86
{
    public class Program
    {
        double min_double_val = 0;
        double max_double_val = ulong.MaxValue;

        public double GetRandomDoubleValue()
        {
            Random random = new Random();
            double x = random.NextDouble() * (max_double_val - min_double_val) + min_double_val;
            //System.Console.WriteLine("x: " + x);
            return x;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<Int64> AVX512ConvertToVector128Int64(Vector128<double> vec_test)
        {
            return Vector128.ConvertToInt64(vec_test);
            //System.Console.WriteLine(vec_test_o);
            //System.Console.WriteLine((long)vec_test[1]);
        }        
        
        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static double Func_0_4_2_2(double b_8, UInt32 b_7)
        {
            double x = (double)b_7;
            System.Console.WriteLine(x);
            return x * b_8;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static ulong ConvDoubleToUlong(double val)
        {
            return (ulong)val;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<ulong> ConvDoubleToUlong128(Vector128<double> val)
        {
            return Vector128.ConvertToUInt64(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector512<ulong> ConvDoubleToUlong512(Vector512<double> val)
        {
            return Vector512.ConvertToUInt64(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static long ConvDoubleToLong(double val)
        {
            return (long)val;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector256<long> ConvDoubleToLong256(Vector256<double> val)
        {
            return Vector256.ConvertToInt64(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<long> ConvDoubleToLong128(Vector128<double> val)
        {
            return Vector128.ConvertToInt64(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static int ConvFloatToInt(float val)
        {
            return (int)val;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<int> ConvFloatToInt128(Vector128<float> val)
        {
            return Vector128.ConvertToInt32(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<uint> ConvFloatToUInt128(Vector128<float> val)
        {
            return Vector128.ConvertToUInt32(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static uint ConvFloatToUInt(float val)
        {
            return (uint)val;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<double> ConvUlongToDouble128(Vector128<ulong> val)
        {
            return Vector128.ConvertToDouble(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static double ConvUlongToDouble(ulong val)
        {
            return (double)val;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<double> ConvLongToDouble128(Vector128<long> val)
        {
            return Vector128.ConvertToDouble(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static double ConvLongToDouble(long val)
        {
            return (double)val;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<float> ConvIntToFloat128(Vector128<int> val)
        {
            return Vector128.ConvertToSingle(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static float ConvIntToFloat(int val)
        {
            return (float)val;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<float> ConvUIntToFloat128(Vector128<uint> val)
        {
            return Vector128.ConvertToSingle(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector256<float> AVX512ConvertToVector256Single(Vector256<int> val)
        {
            return Vector256.ConvertToSingle(val);
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static float ConvUIntToFloat(uint val)
        {
            return (float)val;
        }

        public static short Func_0_4_2_2_min()
        {
            long a8_0_4_2_2 = -294591463235249385L;
            float a7_0_4_2_2 = 1.23775268F;
            long[,,] arr3d_0_4_2_2 = new long[5, 21, 4];
            double a2_0_4_2_2 = -7.9375;
            ushort a4_0_4_2_2 = 1294;
            double a6_0_4_2_2 = 8.0;

            arr3d_0_4_2_2[4, 0, 3] = -1L;
            arr3d_0_4_2_2[4, 3, 3] = -294591463235248091L;
            long asgop0 = arr3d_0_4_2_2[4, 3, 3];
            asgop0 -= (((arr3d_0_4_2_2[4, 3, 3] + arr3d_0_4_2_2[4, 0, 3])));

            //System.Console.WriteLine("type:" + ().GetType());

            UInt16 b_9 = Convert.ToUInt16(a7_0_4_2_2 + 1292.76221F);
            System.Console.WriteLine("b_9: " + b_9);

            double b_8 = b_9 * 8.839235554569534E-14;
            System.Console.WriteLine("b_8: " + b_8);

            UInt32 b_7 = Convert.ToUInt32((26678 + 1741038446) * Convert.ToSingle(a7_0_4_2_2));
            System.Console.WriteLine("b_7: " + b_7);

            double b_6 = b_7 * b_8;
            System.Console.WriteLine("b_6: " + b_6);

            double b_5 = (((a6_0_4_2_2)) + a2_0_4_2_2);
            System.Console.WriteLine("b_5: " + b_5);
            
            double b_4 = b_5 + b_6;
            System.Console.WriteLine("b_4: " + b_4);
            
            long b_3 = Convert.ToInt64(Convert.ToInt64(Convert.ToDouble(Convert.ToInt64(Convert.ToDouble(arr3d_0_4_2_2[4, 3, 3]) / (Convert.ToDouble(arr3d_0_4_2_2[4, 3, 3] * 2.2737367544323206E-13)))) / 1.4929307396772003E-05)) + Convert.ToInt64((Convert.ToInt64(Convert.ToInt64(Convert.ToUInt16(((a4_0_4_2_2))) + Convert.ToInt64(a8_0_4_2_2))) * Convert.ToInt64(asgop0)));
            System.Console.WriteLine("b_3: " + b_3);
            
            double b_2 = Convert.ToInt16(b_3) / (b_4);
            System.Console.WriteLine("b_2: " + b_2);
            
            short b_1 = Convert.ToInt16(b_2);
            System.Console.WriteLine("b_1: " + b_1);
            
            short b_0 = Convert.ToInt16(b_1);
            System.Console.WriteLine("b_0: " + b_0);
            return b_0;
            //return Convert.ToInt16(-45147.82425429426);
        }

        public static int VectorConvertSingleUInt(Vector256<Single> A)
        {
            Vector256<UInt32> B = Vector256.ConvertToUInt32(A);
            Vector256<Single> C = Vector256.ConvertToSingle(B);

            int returnVal = 1;
            for (int i = 0; i < Vector256<Single>.Count; i++)
            {
                UInt32 uint32Val = (UInt32)A[i];
                Single cvtSglVal = (Single)uint32Val;
                if ((B[i] != uint32Val) || (C[i] != cvtSglVal))
                {
                    Console.WriteLine("A[{0}] = {1}, B[{0}] = {2}, C[{0}] = {3}, uint32Val = {4}, cvtSglVal = {5}",
                                      i, A[i], B[i], C[i], uint32Val, cvtSglVal);
                    returnVal = -1;
                }
                else 
                {
                    Console.WriteLine("A[{0}] = {1}, B[{0}] = {2}, C[{0}] = {3}, uint32Val = {4}, cvtSglVal = {5}",
                                      i, A[i], B[i], C[i], uint32Val, cvtSglVal);
                }
            }
            return returnVal;
        }

        public static double Truncate(double d)
        {
            ulong uintVal = (ulong)BitConverter.DoubleToInt64Bits(d);
            int exponent = (int)((uintVal >> 52) & 0x7FF);
            if (exponent < 1023)
            {
                uintVal &= 0x8000_0000_0000_0000ul;
            }
            else if (exponent < 1075)
            {
                uintVal &= (ulong)(~(0xF_FFFF_FFFF_FFFF >> (exponent - 1023)));
            }
            //System.Console.WriteLine("Truncated: " + BitConverter.Int64BitsToDouble((long)uintVal));
            return BitConverter.Int64BitsToDouble((long)uintVal);
        }

        public static ulong managedconvert(double x)
        {
            x = Truncate(x);
            ulong uintVal = (ulong)BitConverter.DoubleToInt64Bits(x);
            int sign = (int)(uintVal >> 63);
            System.Console.WriteLine("Sign: " + sign);
            if ( sign > 0 ) 
            {
                return ulong.MaxValue;
            }
            int exponent = (int)((uintVal >> 52) & 0x7FF) - 1023;
            System.Console.WriteLine("exponent: " + exponent);
            if (exponent > 63)
            {
                return ulong.MaxValue;
            }
            
            return (ulong)x;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static float[] ConvUlongToFloat256(int[] vec)
        {
            float[] vecf = new float[4];
            for ( int i = 0; i < vec.Length; i++ ) {
                vecf[i] = (float)vec[i];
            }
            return vecf;
        }

        [MethodImplAttribute(MethodImplOptions.NoInlining)]
        public static Vector128<float> ConvULongToFloat256(Vector256<ulong> val)
        {
            return Vector256.ConvertToSingle(val);
        }

        public static void Main(string[] args)
        {
            //Program p = new Program();
            //AVX512ConvertToVector128UInt32();
            //p.VerifyAVX512ConvertToVector128UInt32();
            //System.Console.WriteLine(Func_0_4_2_2(1.1437970807612977E-10, 2155008000));
            //System.Console.WriteLine(Func_0_4_2_2_min());
            // System.Console.WriteLine(AVX512ConvertToVector128Int64(Vector128.Create((double)0.3048722435346467, (double)0.51)));
            System.Console.WriteLine(ConvULongToFloat256(Vector256.Create((ulong)1234)));
            int[] vec = {123, 234, 432, 432};
            ConvUlongToFloat256(vec);
        }
    }
}