****** START compiling System.Text.Program:Main(System.String[]) (MethodHash=4a0bc0e1)
Generating code for Windows x64
OPTIONS: compCodeOpt = BLENDED_CODE
OPTIONS: compDbgCode = true
OPTIONS: compDbgInfo = true
OPTIONS: compDbgEnC  = false
OPTIONS: compProcedureSplitting   = false
OPTIONS: compProcedureSplittingEH = false
OPTIONS: optimizer should use profile data
IL to import:
IL_0000  00                nop         
IL_0001  7f 02 00 00 04    ldsflda      0x4000002
IL_0006  20 00 0f 00 00    ldc.i4       0xF00
IL_000b  73 0c 00 00 0a    newobj       0xA00000C
IL_0010  0a                stloc.0     
IL_0011  7f 02 00 00 04    ldsflda      0x4000002
IL_0016  20 00 0f 00 00    ldc.i4       0xF00
IL_001b  73 0c 00 00 0a    newobj       0xA00000C
IL_0020  0b                stloc.1     
IL_0021  72 01 00 00 70    ldstr        0x70000001
IL_0026  28 0d 00 00 0a    call         0xA00000D
IL_002b  00                nop         
IL_002c  06                ldloc.0     
IL_002d  07                ldloc.1     
IL_002e  28 0e 00 00 0a    call         0xA00000E
IL_0033  28 0f 00 00 0a    call         0xA00000F
IL_0038  00                nop         
IL_0039  72 19 00 00 70    ldstr        0x70000019
IL_003e  28 0d 00 00 0a    call         0xA00000D
IL_0043  00                nop         
IL_0044  72 33 00 00 70    ldstr        0x70000033
IL_0049  0c                stloc.2     
IL_004a  19                ldc.i4.3    
IL_004b  8d 14 00 00 01    newarr       0x1000014
IL_0050  25                dup         
IL_0051  d0 03 00 00 04    ldtoken      0x4000003
IL_0056  28 10 00 00 0a    call         0xA000010
IL_005b  0d                stloc.3     
IL_005c  08                ldloc.2     
IL_005d  09                ldloc.3     
IL_005e  17                ldc.i4.1    
IL_005f  28 01 00 00 06    call         0x6000001
IL_0064  26                pop         
IL_0065  08                ldloc.2     
IL_0066  16                ldc.i4.0    
IL_0067  6f 11 00 00 0a    callvirt     0xA000011
IL_006c  28 12 00 00 0a    call         0xA000012
IL_0071  00                nop         
IL_0072  1b                ldc.i4.5    
IL_0073  8d 18 00 00 01    newarr       0x1000018
IL_0078  25                dup         
IL_0079  d0 01 00 00 04    ldtoken      0x4000001
IL_007e  28 10 00 00 0a    call         0xA000010
IL_0083  13 04             stloc.s      0x4
IL_0085  00                nop         
IL_0086  11 04             ldloc.s      0x4
IL_0088  16                ldc.i4.0    
IL_0089  8f 18 00 00 01    ldelema      0x1000018
IL_008e  13 06             stloc.s      0x6
IL_0090  11 06             ldloc.s      0x6
IL_0092  e0                conv.u      
IL_0093  13 05             stloc.s      0x5
IL_0095  00                nop         
IL_0096  11 05             ldloc.s      0x5
IL_0098  73 13 00 00 0a    newobj       0xA000013
IL_009d  13 07             stloc.s      0x7
IL_009f  00                nop         
IL_00a0  16                ldc.i4.0    
IL_00a1  e0                conv.u      
IL_00a2  13 06             stloc.s      0x6
IL_00a4  00                nop         
IL_00a5  72 9e 01 00 70    ldstr        0x7000019E
IL_00aa  28 14 00 00 0a    call         0xA000014
IL_00af  13 08             stloc.s      0x8
IL_00b1  12 08             ldloca.s     0x8
IL_00b3  28 15 00 00 0a    call         0xA000015
IL_00b8  28 16 00 00 0a    call         0xA000016
IL_00bd  28 0d 00 00 0a    call         0xA00000D
IL_00c2  00                nop         
IL_00c3  2a                ret         

lvaSetClass: setting class for V00 to (00007FFD085134B8) System.String[] 
Arg #0    passed in register(s) rcx

lvaSetClass: setting class for V03 to (00007FFD08392470) System.String 

lvaSetClass: setting class for V04 to (00007FFD086D1A48) ushort[] 

lvaSetClass: setting class for V05 to (00007FFD086D1E30) byte[] 
Setting lvPinned for V07

lvaSetClass: setting class for V08 to (00007FFD08392470) System.String 

lvaGrabTemp returning 10 (V10 tmp0) (a long lifetime temp) called for OutgoingArgSpace.

Local V10 should not be enregistered because: it is address exposed
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd <System.String[]>
;  V01 loc0           struct <System.ReadOnlySpan`1, 16> <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1           struct <System.ReadOnlySpan`1, 16> <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2              ref  class-hnd <System.String>
;  V04 loc3              ref  class-hnd <ushort[]>
;  V05 loc4              ref  class-hnd <byte[]>
;  V06 loc5             long 
;  V07 loc6            byref  pinned
;  V08 loc7              ref  class-hnd <System.String>
;  V09 loc8             bool 
;  V10 OutArgs        struct <0> do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
*************** In compInitDebuggingInfo() for System.Text.Program:Main(System.String[])
getVars() returned cVars = 0, extendOthers = true
info.compVarScopesCount = 10
    	VarNum 	LVNum 	      Name 	Beg 	End
 0: 	00h 	00h 	  V00 arg0 	000h   	0C4h
 1: 	01h 	01h 	  V01 loc0 	000h   	0C4h
 2: 	02h 	02h 	  V02 loc1 	000h   	0C4h
 3: 	03h 	03h 	  V03 loc2 	000h   	0C4h
 4: 	04h 	04h 	  V04 loc3 	000h   	0C4h
 5: 	05h 	05h 	  V05 loc4 	000h   	0C4h
 6: 	06h 	06h 	  V06 loc5 	000h   	0C4h
 7: 	07h 	07h 	  V07 loc6 	000h   	0C4h
 8: 	08h 	08h 	  V08 loc7 	000h   	0C4h
 9: 	09h 	09h 	  V09 loc8 	000h   	0C4h
New Basic Block BB01 [0000] created.
New scratch BB01
Debuggable code - Add new BB01 [0000] to perform initialization of variables
info.compStmtOffsetsCount    = 0
info.compStmtOffsetsImplicit = 0007h ( STACK_EMPTY NOP CALL_SITE )
*************** In fgFindBasicBlocks() for System.Text.Program:Main(System.String[])
Marked V01 as a single def local
Marked V02 as a single def local
Marked V03 as a single def local
Marked V04 as a single def local
Marked V05 as a single def local
Marked V06 as a single def local
Marked V08 as a single def local
Jump targets:
  none
New Basic Block BB02 [0001] created.
BB02 [000..0C4)
Setting edge weights for BB01 -> BB02 to [0 .. 3.402823e+38]
CLFLG_MINOPT set for method System.Text.Program:Main(System.String[])
IL Code Size,Instr  196,  70, Basic Block count   2, Local Variable Num,Ref count  11, 19 for method System.Text.Program:Main(System.String[])
IL Code Size,Instr  196,  70, Basic Block count   2, Local Variable Num,Ref count  11, 19 for method System.Text.Program:Main(System.String[])
OPTIONS: opts.MinOpts() == true
Basic block list for 'System.Text.Program:Main(System.String[])'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..0C4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Pre-import

*************** Finishing PHASE Pre-import
Trees after Pre-import

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..0C4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

------------ BB02 [000..0C4) (return), preds={BB01} succs={}

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Profile incorporation
BBOPT set, but no profile data available (hr=80004001)

*************** Finishing PHASE Profile incorporation [no changes]

*************** Starting PHASE Importation
Marking leading BBF_INTERNAL block BB01 as BBF_IMPORTED

impImportBlockPending for BB02

Importing BB02 (PC=000) of 'System.Text.Program:Main(System.String[])'
    [ 0]   0 (0x000) nop

STMT00001 ( 0x000[E-] ... ??? )
               [000001] -----------                         *  NO_OP     void  

    [ 0]   1 (0x001) ldsflda 04000002
    [ 1]   6 (0x006) ldc.i4 3840
    [ 2]  11 (0x00b) newobj
lvaGrabTemp returning 11 (V11 tmp1) called for NewObj constructor temp.

Suppressing zero-init for V11 -- expect to zero in prolog
 0A00000C
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00002 ( 0x001[E-] ... ??? )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

    [ 1]  16 (0x010) stloc.0

STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V11 tmp1         

    [ 0]  17 (0x011) ldsflda 04000002
    [ 1]  22 (0x016) ldc.i4 3840
    [ 2]  27 (0x01b) newobj
lvaGrabTemp returning 12 (V12 tmp2) called for NewObj constructor temp.

Suppressing zero-init for V12 -- expect to zero in prolog
 0A00000C
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00004 ( 0x011[E-] ... ??? )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

    [ 1]  32 (0x020) stloc.1

STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V12 tmp2         

    [ 0]  33 (0x021) ldstr 70000001
    [ 1]  38 (0x026) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00006 ( 0x021[E-] ... ??? )
               [000015] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000014] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

    [ 0]  43 (0x02b) nop

STMT00007 ( 0x02B[E-] ... ??? )
               [000016] -----------                         *  NO_OP     void  

    [ 0]  44 (0x02c) ldloc.0
    [ 1]  45 (0x02d) ldloc.1
    [ 2]  46 (0x02e) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is bool, structSize is 0
Calling impNormStructVal on:
               [000018] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
resulting tree:
               [000018] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
Calling impNormStructVal on:
               [000017] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
resulting tree:
               [000017] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         

lvaGrabTemp returning 13 (V13 tmp3) called for impSpillStackEnsure.


STMT00008 ( 0x02C[E-] ... ??? )
               [000020] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000017] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000018] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
Marked V13 as a single def temp

    [ 1]  51 (0x033) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00009 ( 0x033[--] ... ??? )
               [000022] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000021] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

    [ 0]  56 (0x038) nop

STMT00010 ( 0x038[E-] ... ??? )
               [000023] -----------                         *  NO_OP     void  

    [ 0]  57 (0x039) ldstr 70000019
    [ 1]  62 (0x03e) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00011 ( 0x039[E-] ... ??? )
               [000025] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000024] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

    [ 0]  67 (0x043) nop

STMT00012 ( 0x043[E-] ... ??? )
               [000026] -----------                         *  NO_OP     void  

    [ 0]  68 (0x044) ldstr 70000033
    [ 1]  73 (0x049) stloc.2
lvaUpdateClass: Updating class for V03 from (00007FFD08392470) System.String to (00007FFD08392470) System.String [exact]


STMT00013 ( 0x044[E-] ... ??? )
               [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000027] -----------                         \--*  CNS_STR   ref   <string constant>

    [ 0]  74 (0x04a) ldc.i4.3 3
    [ 1]  75 (0x04b) newarr 01000014
lvaGrabTemp returning 14 (V14 tmp4) called for impSpillStackEnsure.


STMT00014 ( 0x04A[E-] ... ??? )
               [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000030] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1a48 class
               [000029] ----------- arg1                       \--*  CNS_INT   long   3
Marked V14 as a single def temp

lvaSetClass: setting class for V14 to (00007FFD086D1A48) ushort[]  [exact]

    [ 1]  80 (0x050) dup
    [ 2]  81 (0x051) ldtoken
    [ 3]  86 (0x056) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
Named Intrinsic System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray: Recognized
Calling impNormStructVal on:
               [000036] --CXG------                         *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H---------- arg0                    \--*  CNS_INT(h) long   0x7ffd086d21c8 field

lvaGrabTemp returning 15 (V15 tmp5) called for spilled call-like call argument.


STMT00015 ( 0x050[--] ... ??? )
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d21c8 field
resulting tree:
               [000039] -----------                         *  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         


STMT00016 ( ??? ... ??? )
               [000037] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000039] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

    [ 1]  91 (0x05b) stloc.3
lvaUpdateClass: Updating class for V04 from (00007FFD086D1A48) ushort[] to (00007FFD086D1A48) ushort[] [exact]


STMT00017 ( 0x05B[--] ... ??? )
               [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

    [ 0]  92 (0x05c) ldloc.2
    [ 1]  93 (0x05d) ldloc.3
    [ 2]  94 (0x05e) ldc.i4.1 1
    [ 3]  95 (0x05f) call 06000001
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 16 (V16 tmp6) called for impSpillStackEnsure.


STMT00018 ( 0x05C[E-] ... ??? )
               [000045] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000044] --C-G------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
               [000041] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000042] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000043] ----------- arg2                       \--*  CNS_INT   int    1
Marked V16 as a single def temp

lvaSetClass: setting class for V16 to (00007FFD085134B8) System.String[]  [exact]

    [ 1] 100 (0x064) pop

STMT00019 ( 0x064[--] ... ??? )
               [000047] -----------                         *  NOP       void  

    [ 0] 101 (0x065) ldloc.2
    [ 1] 102 (0x066) ldc.i4.0 0
    [ 2] 103 (0x067) callvirt 0A000011
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is ushort, structSize is 0
Named Intrinsic System.String.get_Chars: Recognized

lvaGrabTemp returning 17 (V17 tmp7) called for impSpillStackEnsure.


STMT00020 ( 0x065[E-] ... ??? )
               [000051] DAC-G------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000050] --C-G------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
               [000048] ----------- this                       +--*  LCL_VAR   ref    V03 loc2         
               [000049] ----------- arg1                       \--*  CNS_INT   int    0
Marked V17 as a single def temp

    [ 1] 108 (0x06c) call 0A000012
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00021 ( 0x06C[--] ... ??? )
               [000053] --C-G------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000052] ----------- arg0                    \--*  LCL_VAR   int    V17 tmp7         

    [ 0] 113 (0x071) nop

STMT00022 ( 0x071[E-] ... ??? )
               [000054] -----------                         *  NO_OP     void  

    [ 0] 114 (0x072) ldc.i4.5 5
    [ 1] 115 (0x073) newarr 01000018
lvaGrabTemp returning 18 (V18 tmp8) called for impSpillStackEnsure.


STMT00023 ( 0x072[E-] ... ??? )
               [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000056] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1e30 class
               [000055] ----------- arg1                       \--*  CNS_INT   long   5
Marked V18 as a single def temp

lvaSetClass: setting class for V18 to (00007FFD086D1E30) byte[]  [exact]

    [ 1] 120 (0x078) dup
    [ 2] 121 (0x079) ldtoken
    [ 3] 126 (0x07e) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
Named Intrinsic System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray: Recognized
Calling impNormStructVal on:
               [000062] --CXG------                         *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H---------- arg0                    \--*  CNS_INT(h) long   0x7ffd086d2198 field

lvaGrabTemp returning 19 (V19 tmp9) called for spilled call-like call argument.


STMT00024 ( 0x078[--] ... ??? )
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d2198 field
resulting tree:
               [000065] -----------                         *  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V19 tmp9         


STMT00025 ( ??? ... ??? )
               [000063] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] ----------- arg0                    +--*  LCL_VAR   ref    V18 tmp8         
               [000065] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V19 tmp9         

    [ 1] 131 (0x083) stloc.s 4
lvaUpdateClass: Updating class for V05 from (00007FFD086D1E30) byte[] to (00007FFD086D1E30) byte[] [exact]


STMT00026 ( 0x083[--] ... ??? )
               [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

    [ 0] 133 (0x085) nop

STMT00027 ( 0x085[E-] ... ??? )
               [000067] -----------                         *  NO_OP     void  

    [ 0] 134 (0x086) ldloc.s 4
    [ 1] 136 (0x088) ldc.i4.0 0
    [ 2] 137 (0x089) ldelema 01000018
    [ 1] 142 (0x08e) stloc.s 6

STMT00028 ( 0x086[E-] ... ??? )
               [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
               [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
               [000069] -----------                            \--*  CNS_INT   int    0

    [ 0] 144 (0x090) ldloc.s 6
    [ 1] 146 (0x092) conv.u
    [ 1] 147 (0x093) stloc.s 5

STMT00029 ( 0x090[E-] ... ??? )
               [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000073] ---------U-                         \--*  CAST      long <- ulong <- byref
               [000072] -----------                            \--*  LCL_VAR   byref  V07 loc6         

    [ 0] 149 (0x095) nop

STMT00030 ( 0x095[E-] ... ??? )
               [000075] -----------                         *  NO_OP     void  

    [ 0] 150 (0x096) ldloc.s 5
    [ 1] 152 (0x098) newobj 0A000013
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

lvaGrabTemp returning 20 (V20 tmp10) called for impSpillStackEnsure.


STMT00031 ( 0x096[E-] ... ??? )
               [000078] DAC-G------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000077] --C-G------                         \--*  CALL      ref    System.String:.ctor(ulong):this
               [000076] ----------- arg0                       \--*  LCL_VAR   long   V06 loc5         
Marked V20 as a single def temp

lvaSetClass: setting class for V20 to (00007FFD08392470) System.String  [exact]

    [ 1] 157 (0x09d) stloc.s 7
lvaUpdateClass: Updating class for V08 from (00007FFD08392470) System.String to (00007FFD08392470) System.String [exact]


STMT00032 ( 0x09D[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

    [ 0] 159 (0x09f) nop

STMT00033 ( 0x09F[E-] ... ??? )
               [000081] -----------                         *  NO_OP     void  

    [ 0] 160 (0x0a0) ldc.i4.0 0
    [ 1] 161 (0x0a1) conv.u
    [ 1] 162 (0x0a2) stloc.s 6

STMT00034 ( 0x0A0[E-] ... ??? )
               [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
               [000082] -----------                            \--*  CNS_INT   int    0

    [ 0] 164 (0x0a4) nop

STMT00035 ( 0x0A4[E-] ... ??? )
               [000085] -----------                         *  NO_OP     void  

    [ 0] 165 (0x0a5) ldstr 7000019E
    [ 1] 170 (0x0aa) call 0A000014
In Compiler::impImportCall: opcode is call, kind=0, callRetType is bool, structSize is 0
Named Intrinsic System.Runtime.Intrinsics.Vector512.get_IsHardwareAccelerated: Notify VM instruction set (Vector512) must be supported.
Recognized

lvaGrabTemp returning 21 (V21 tmp11) called for impSpillStackEnsure.


STMT00036 ( 0x0A5[E-] ... ??? )
               [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000086] -----------                         \--*  CNS_STR   ref   <string constant>
Marked V21 as a single def temp

lvaSetClass: setting class for V21 to (00007FFD08392470) System.String  [exact]

lvaGrabTemp returning 22 (V22 tmp12) called for impSpillStackEnsure.


STMT00037 ( ??? ... ??? )
               [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000087] -----------                         \--*  CNS_INT   int    1
Marked V22 as a single def temp

    [ 2] 175 (0x0af) stloc.s 8

STMT00038 ( 0x0AF[--] ... ??? )
               [000092] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

    [ 1] 177 (0x0b1) ldloca.s 8
    [ 2] 179 (0x0b3) call 0A000015
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 23 (V23 tmp13) called for impSpillStackEnsure.


STMT00039 ( ??? ... ??? )
               [000095] DAC-G------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --C-G------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] ----------- this                       \--*  LCL_ADDR  byref  V09 loc8         [+0]
Marked V23 as a single def temp

lvaSetClass: setting class for V23 to (00007FFD08392470) System.String  [exact]

    [ 2] 184 (0x0b8) call 0A000016
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 24 (V24 tmp14) called for impSpillStackEnsure.


STMT00040 ( 0x0B8[--] ... ??? )
               [000098] DAC-G------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000097] --C-G------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
               [000089] ----------- arg0                       +--*  LCL_VAR   ref    V21 tmp11        
               [000096] ----------- arg1                       \--*  LCL_VAR   ref    V23 tmp13        
Marked V24 as a single def temp

lvaSetClass: setting class for V24 to (00007FFD08392470) System.String  [exact]

    [ 1] 189 (0x0bd) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00041 ( 0x0BD[--] ... ??? )
               [000100] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000099] ----------- arg0                    \--*  LCL_VAR   ref    V24 tmp14        

    [ 0] 194 (0x0c2) nop

STMT00042 ( 0x0C2[E-] ... ??? )
               [000101] -----------                         *  NO_OP     void  

    [ 0] 195 (0x0c3) ret

STMT00043 ( 0x0C3[E-] ... ??? )
               [000102] -----------                         *  RETURN    void  

*************** Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..0C4)        (return)                     i idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

------------ BB02 [000..0C4) (return), preds={BB01} succs={}

***** BB02
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

***** BB02
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V11 tmp1         

***** BB02
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V12 tmp2         

***** BB02
STMT00006 ( 0x021[E-] ... 0x02B )
               [000015] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000014] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00007 ( 0x02B[E-] ... ??? )
               [000016] -----------                         *  NO_OP     void  

***** BB02
STMT00008 ( 0x02C[E-] ... 0x038 )
               [000020] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000017] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000018] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

***** BB02
STMT00009 ( 0x033[--] ... ??? )
               [000022] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000021] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

***** BB02
STMT00010 ( 0x038[E-] ... ??? )
               [000023] -----------                         *  NO_OP     void  

***** BB02
STMT00011 ( 0x039[E-] ... 0x043 )
               [000025] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000024] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00012 ( 0x043[E-] ... ??? )
               [000026] -----------                         *  NO_OP     void  

***** BB02
STMT00013 ( 0x044[E-] ... 0x049 )
               [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000027] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00014 ( 0x04A[E-] ... 0x05B )
               [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000030] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1a48 class
               [000029] ----------- arg1                       \--*  CNS_INT   long   3

***** BB02
STMT00015 ( 0x050[--] ... ??? )
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d21c8 field

***** BB02
STMT00016 ( ??? ... ??? )
               [000037] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000039] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

***** BB02
STMT00017 ( 0x05B[--] ... ??? )
               [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB02
STMT00018 ( 0x05C[E-] ... 0x064 )
               [000045] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000044] --C-G------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
               [000041] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000042] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000043] ----------- arg2                       \--*  CNS_INT   int    1

***** BB02
STMT00019 ( 0x064[--] ... ??? )
               [000047] -----------                         *  NOP       void  

***** BB02
STMT00020 ( 0x065[E-] ... 0x071 )
               [000051] DAC-G------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000050] --C-G------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
               [000048] ----------- this                       +--*  LCL_VAR   ref    V03 loc2         
               [000049] ----------- arg1                       \--*  CNS_INT   int    0

***** BB02
STMT00021 ( 0x06C[--] ... ??? )
               [000053] --C-G------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000052] ----------- arg0                    \--*  LCL_VAR   int    V17 tmp7         

***** BB02
STMT00022 ( 0x071[E-] ... ??? )
               [000054] -----------                         *  NO_OP     void  

***** BB02
STMT00023 ( 0x072[E-] ... 0x083 )
               [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000056] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1e30 class
               [000055] ----------- arg1                       \--*  CNS_INT   long   5

***** BB02
STMT00024 ( 0x078[--] ... ??? )
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d2198 field

***** BB02
STMT00025 ( ??? ... ??? )
               [000063] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] ----------- arg0                    +--*  LCL_VAR   ref    V18 tmp8         
               [000065] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V19 tmp9         

***** BB02
STMT00026 ( 0x083[--] ... ??? )
               [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

***** BB02
STMT00027 ( 0x085[E-] ... 0x085 )
               [000067] -----------                         *  NO_OP     void  

***** BB02
STMT00028 ( 0x086[E-] ... 0x08E )
               [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
               [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
               [000069] -----------                            \--*  CNS_INT   int    0

***** BB02
STMT00029 ( 0x090[E-] ... 0x093 )
               [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000073] ---------U-                         \--*  CAST      long <- ulong <- byref
               [000072] -----------                            \--*  LCL_VAR   byref  V07 loc6         

***** BB02
STMT00030 ( 0x095[E-] ... 0x095 )
               [000075] -----------                         *  NO_OP     void  

***** BB02
STMT00031 ( 0x096[E-] ... 0x09D )
               [000078] DAC-G------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000077] --C-G------                         \--*  CALL      ref    System.String:.ctor(ulong):this
               [000076] ----------- arg0                       \--*  LCL_VAR   long   V06 loc5         

***** BB02
STMT00032 ( 0x09D[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

***** BB02
STMT00033 ( 0x09F[E-] ... 0x09F )
               [000081] -----------                         *  NO_OP     void  

***** BB02
STMT00034 ( 0x0A0[E-] ... 0x0A2 )
               [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
               [000082] -----------                            \--*  CNS_INT   int    0

***** BB02
STMT00035 ( 0x0A4[E-] ... 0x0A4 )
               [000085] -----------                         *  NO_OP     void  

***** BB02
STMT00036 ( 0x0A5[E-] ... 0x0AF )
               [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000086] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00037 ( ??? ... ??? )
               [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000087] -----------                         \--*  CNS_INT   int    1

***** BB02
STMT00038 ( 0x0AF[--] ... ??? )
               [000092] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

***** BB02
STMT00039 ( ??? ... 0x0C2 )
               [000095] DAC-G------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --C-G------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] ----------- this                       \--*  LCL_ADDR  byref  V09 loc8         [+0]

***** BB02
STMT00040 ( 0x0B8[--] ... ??? )
               [000098] DAC-G------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000097] --C-G------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
               [000089] ----------- arg0                       +--*  LCL_VAR   ref    V21 tmp11        
               [000096] ----------- arg1                       \--*  LCL_VAR   ref    V23 tmp13        

***** BB02
STMT00041 ( 0x0BD[--] ... ??? )
               [000100] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000099] ----------- arg0                    \--*  LCL_VAR   ref    V24 tmp14        

***** BB02
STMT00042 ( 0x0C2[E-] ... ??? )
               [000101] -----------                         *  NO_OP     void  

***** BB02
STMT00043 ( 0x0C3[E-] ... 0x0C3 )
               [000102] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Finishing PHASE Expand patchpoints [no changes]

*************** Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Finishing PHASE Indirect call transform [no changes]

*************** Starting PHASE Post-import

*************** Finishing PHASE Post-import [no changes]

*************** Starting PHASE Morph - Init

New BlockSet epoch 1, # of blocks (including unused BB00): 3, bitset array size: 1 (short)

*************** Finishing PHASE Morph - Init [no changes]

*************** Starting PHASE Morph - Inlining

*************** Finishing PHASE Morph - Inlining [no changes]

*************** Starting PHASE Allocate Objects
disabled, punting

*************** Finishing PHASE Allocate Objects [no changes]

*************** Starting PHASE Morph - Add internal blocks

*************** After fgAddInternal()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..0C4)        (return)                     i idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

*************** Finishing PHASE Morph - Add internal blocks
Trees after Morph - Add internal blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..0C4)        (return)                     i idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

***** BB01
STMT00044 ( ??? ... ??? )
               [000110] --C-G------                         *  QMARK     void  
               [000106] ----G------    if                   +--*  EQ        int   
               [000104] n---G------                         |  +--*  IND       int   
               [000103] H----------                         |  |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----------                         |  \--*  CNS_INT   int    0
               [000109] --C-G------    if                   \--*  COLON     void  
               [000107] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000108] ----------- then                       \--*  NOP       void  

------------ BB02 [000..0C4) (return), preds={BB01} succs={}

***** BB02
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

***** BB02
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V11 tmp1         

***** BB02
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V12 tmp2         

***** BB02
STMT00006 ( 0x021[E-] ... 0x02B )
               [000015] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000014] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00007 ( 0x02B[E-] ... ??? )
               [000016] -----------                         *  NO_OP     void  

***** BB02
STMT00008 ( 0x02C[E-] ... 0x038 )
               [000020] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000017] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000018] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

***** BB02
STMT00009 ( 0x033[--] ... ??? )
               [000022] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000021] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

***** BB02
STMT00010 ( 0x038[E-] ... ??? )
               [000023] -----------                         *  NO_OP     void  

***** BB02
STMT00011 ( 0x039[E-] ... 0x043 )
               [000025] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000024] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00012 ( 0x043[E-] ... ??? )
               [000026] -----------                         *  NO_OP     void  

***** BB02
STMT00013 ( 0x044[E-] ... 0x049 )
               [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000027] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00014 ( 0x04A[E-] ... 0x05B )
               [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000030] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1a48 class
               [000029] ----------- arg1                       \--*  CNS_INT   long   3

***** BB02
STMT00015 ( 0x050[--] ... ??? )
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d21c8 field

***** BB02
STMT00016 ( ??? ... ??? )
               [000037] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000039] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

***** BB02
STMT00017 ( 0x05B[--] ... ??? )
               [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB02
STMT00018 ( 0x05C[E-] ... 0x064 )
               [000045] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000044] --C-G------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
               [000041] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000042] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000043] ----------- arg2                       \--*  CNS_INT   int    1

***** BB02
STMT00019 ( 0x064[--] ... ??? )
               [000047] -----------                         *  NOP       void  

***** BB02
STMT00020 ( 0x065[E-] ... 0x071 )
               [000051] DAC-G------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000050] --C-G------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
               [000048] ----------- this                       +--*  LCL_VAR   ref    V03 loc2         
               [000049] ----------- arg1                       \--*  CNS_INT   int    0

***** BB02
STMT00021 ( 0x06C[--] ... ??? )
               [000053] --C-G------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000052] ----------- arg0                    \--*  LCL_VAR   int    V17 tmp7         

***** BB02
STMT00022 ( 0x071[E-] ... ??? )
               [000054] -----------                         *  NO_OP     void  

***** BB02
STMT00023 ( 0x072[E-] ... 0x083 )
               [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000056] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1e30 class
               [000055] ----------- arg1                       \--*  CNS_INT   long   5

***** BB02
STMT00024 ( 0x078[--] ... ??? )
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d2198 field

***** BB02
STMT00025 ( ??? ... ??? )
               [000063] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] ----------- arg0                    +--*  LCL_VAR   ref    V18 tmp8         
               [000065] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V19 tmp9         

***** BB02
STMT00026 ( 0x083[--] ... ??? )
               [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

***** BB02
STMT00027 ( 0x085[E-] ... 0x085 )
               [000067] -----------                         *  NO_OP     void  

***** BB02
STMT00028 ( 0x086[E-] ... 0x08E )
               [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
               [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
               [000069] -----------                            \--*  CNS_INT   int    0

***** BB02
STMT00029 ( 0x090[E-] ... 0x093 )
               [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000073] ---------U-                         \--*  CAST      long <- ulong <- byref
               [000072] -----------                            \--*  LCL_VAR   byref  V07 loc6         

***** BB02
STMT00030 ( 0x095[E-] ... 0x095 )
               [000075] -----------                         *  NO_OP     void  

***** BB02
STMT00031 ( 0x096[E-] ... 0x09D )
               [000078] DAC-G------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000077] --C-G------                         \--*  CALL      ref    System.String:.ctor(ulong):this
               [000076] ----------- arg0                       \--*  LCL_VAR   long   V06 loc5         

***** BB02
STMT00032 ( 0x09D[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

***** BB02
STMT00033 ( 0x09F[E-] ... 0x09F )
               [000081] -----------                         *  NO_OP     void  

***** BB02
STMT00034 ( 0x0A0[E-] ... 0x0A2 )
               [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
               [000082] -----------                            \--*  CNS_INT   int    0

***** BB02
STMT00035 ( 0x0A4[E-] ... 0x0A4 )
               [000085] -----------                         *  NO_OP     void  

***** BB02
STMT00036 ( 0x0A5[E-] ... 0x0AF )
               [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000086] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00037 ( ??? ... ??? )
               [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000087] -----------                         \--*  CNS_INT   int    1

***** BB02
STMT00038 ( 0x0AF[--] ... ??? )
               [000092] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

***** BB02
STMT00039 ( ??? ... 0x0C2 )
               [000095] DAC-G------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --C-G------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] ----------- this                       \--*  LCL_ADDR  byref  V09 loc8         [+0]

***** BB02
STMT00040 ( 0x0B8[--] ... ??? )
               [000098] DAC-G------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000097] --C-G------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
               [000089] ----------- arg0                       +--*  LCL_VAR   ref    V21 tmp11        
               [000096] ----------- arg1                       \--*  LCL_VAR   ref    V23 tmp13        

***** BB02
STMT00041 ( 0x0BD[--] ... ??? )
               [000100] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000099] ----------- arg0                    \--*  LCL_VAR   ref    V24 tmp14        

***** BB02
STMT00042 ( 0x0C2[E-] ... ??? )
               [000101] -----------                         *  NO_OP     void  

***** BB02
STMT00043 ( 0x0C3[E-] ... 0x0C3 )
               [000102] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Remove empty try

*************** In fgRemoveEmptyTry()
No EH in this method, nothing to remove.

*************** Finishing PHASE Remove empty try [no changes]

*************** Starting PHASE Remove empty finally
No EH in this method, nothing to remove.

*************** Finishing PHASE Remove empty finally [no changes]

*************** Starting PHASE Merge callfinally chains
No EH in this method, nothing to merge.

*************** Finishing PHASE Merge callfinally chains [no changes]

*************** Starting PHASE Clone finally
No EH in this method, no cloning.

*************** Finishing PHASE Clone finally [no changes]

*************** Starting PHASE Morph - Promote Structs
  promotion opt flag not enabled

*************** Finishing PHASE Morph - Promote Structs [no changes]

*************** Starting PHASE Morph - Structs/AddrExp
LocalAddressVisitor visiting statement:
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00044 ( ??? ... ??? )
               [000110] --C-G------                         *  QMARK     void  
               [000106] ----G------    if                   +--*  EQ        int   
               [000104] n---G------                         |  +--*  IND       int   
               [000103] H----------                         |  |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----------                         |  \--*  CNS_INT   int    0
               [000109] --C-G------    if                   \--*  COLON     void  
               [000107] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000108] ----------- then                       \--*  NOP       void  

LocalAddressVisitor visiting statement:
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

Local V11 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

LocalAddressVisitor visiting statement:
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

LocalAddressVisitor visiting statement:
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

Local V12 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

LocalAddressVisitor visiting statement:
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

LocalAddressVisitor visiting statement:
STMT00006 ( 0x021[E-] ... 0x02B )
               [000015] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000014] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00007 ( 0x02B[E-] ... ??? )
               [000016] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00008 ( 0x02C[E-] ... 0x038 )
               [000020] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000017] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000018] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

LocalAddressVisitor visiting statement:
STMT00009 ( 0x033[--] ... ??? )
               [000022] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000021] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

LocalAddressVisitor visiting statement:
STMT00010 ( 0x038[E-] ... ??? )
               [000023] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00011 ( 0x039[E-] ... 0x043 )
               [000025] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000024] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00012 ( 0x043[E-] ... ??? )
               [000026] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00013 ( 0x044[E-] ... 0x049 )
               [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000027] -----------                         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00014 ( 0x04A[E-] ... 0x05B )
               [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000030] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1a48 class
               [000029] ----------- arg1                       \--*  CNS_INT   long   3

LocalAddressVisitor visiting statement:
STMT00015 ( 0x050[--] ... ??? )
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d21c8 field

LocalAddressVisitor visiting statement:
STMT00016 ( ??? ... ??? )
               [000037] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000039] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

LocalAddressVisitor visiting statement:
STMT00017 ( 0x05B[--] ... ??? )
               [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

LocalAddressVisitor visiting statement:
STMT00018 ( 0x05C[E-] ... 0x064 )
               [000045] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000044] --C-G------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
               [000041] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000042] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000043] ----------- arg2                       \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00019 ( 0x064[--] ... ??? )
               [000047] -----------                         *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00020 ( 0x065[E-] ... 0x071 )
               [000051] DAC-G------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000050] --C-G------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
               [000048] ----------- this                       +--*  LCL_VAR   ref    V03 loc2         
               [000049] ----------- arg1                       \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00021 ( 0x06C[--] ... ??? )
               [000053] --C-G------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000052] ----------- arg0                    \--*  LCL_VAR   int    V17 tmp7         

LocalAddressVisitor visiting statement:
STMT00022 ( 0x071[E-] ... ??? )
               [000054] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00023 ( 0x072[E-] ... 0x083 )
               [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000056] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1e30 class
               [000055] ----------- arg1                       \--*  CNS_INT   long   5

LocalAddressVisitor visiting statement:
STMT00024 ( 0x078[--] ... ??? )
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d2198 field

LocalAddressVisitor visiting statement:
STMT00025 ( ??? ... ??? )
               [000063] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] ----------- arg0                    +--*  LCL_VAR   ref    V18 tmp8         
               [000065] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V19 tmp9         

LocalAddressVisitor visiting statement:
STMT00026 ( 0x083[--] ... ??? )
               [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

LocalAddressVisitor visiting statement:
STMT00027 ( 0x085[E-] ... 0x085 )
               [000067] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00028 ( 0x086[E-] ... 0x08E )
               [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
               [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
               [000069] -----------                            \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00029 ( 0x090[E-] ... 0x093 )
               [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000073] ---------U-                         \--*  CAST      long <- ulong <- byref
               [000072] -----------                            \--*  LCL_VAR   byref  V07 loc6         

LocalAddressVisitor visiting statement:
STMT00030 ( 0x095[E-] ... 0x095 )
               [000075] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00031 ( 0x096[E-] ... 0x09D )
               [000078] DAC-G------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000077] --C-G------                         \--*  CALL      ref    System.String:.ctor(ulong):this
               [000076] ----------- arg0                       \--*  LCL_VAR   long   V06 loc5         

LocalAddressVisitor visiting statement:
STMT00032 ( 0x09D[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

LocalAddressVisitor visiting statement:
STMT00033 ( 0x09F[E-] ... 0x09F )
               [000081] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00034 ( 0x0A0[E-] ... 0x0A2 )
               [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
               [000082] -----------                            \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00035 ( 0x0A4[E-] ... 0x0A4 )
               [000085] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00036 ( 0x0A5[E-] ... 0x0AF )
               [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000086] -----------                         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00037 ( ??? ... ??? )
               [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000087] -----------                         \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00038 ( 0x0AF[--] ... ??? )
               [000092] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

LocalAddressVisitor visiting statement:
STMT00039 ( ??? ... 0x0C2 )
               [000095] DAC-G------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --C-G------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] ----------- this                       \--*  LCL_ADDR  byref  V09 loc8         [+0]

Local V09 should not be enregistered because: it is address exposed
Adding a quirk for the storage size of V09 of type bool
LocalAddressVisitor modified statement:
STMT00039 ( ??? ... 0x0C2 )
               [000095] DAC-G------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --C-G------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] ----------- this                       \--*  LCL_ADDR  byref  V09 loc8         [+0]

LocalAddressVisitor visiting statement:
STMT00040 ( 0x0B8[--] ... ??? )
               [000098] DAC-G------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000097] --C-G------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
               [000089] ----------- arg0                       +--*  LCL_VAR   ref    V21 tmp11        
               [000096] ----------- arg1                       \--*  LCL_VAR   ref    V23 tmp13        

LocalAddressVisitor visiting statement:
STMT00041 ( 0x0BD[--] ... ??? )
               [000100] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000099] ----------- arg0                    \--*  LCL_VAR   ref    V24 tmp14        

LocalAddressVisitor visiting statement:
STMT00042 ( 0x0C2[E-] ... ??? )
               [000101] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00043 ( 0x0C3[E-] ... 0x0C3 )
               [000102] -----------                         *  RETURN    void  


*************** Finishing PHASE Morph - Structs/AddrExp
Trees after Morph - Structs/AddrExp

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..0C4)        (return)                     i idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

***** BB01
STMT00044 ( ??? ... ??? )
               [000110] --C-G------                         *  QMARK     void  
               [000106] ----G------    if                   +--*  EQ        int   
               [000104] n---G------                         |  +--*  IND       int   
               [000103] H----------                         |  |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----------                         |  \--*  CNS_INT   int    0
               [000109] --C-G------    if                   \--*  COLON     void  
               [000107] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000108] ----------- then                       \--*  NOP       void  

------------ BB02 [000..0C4) (return), preds={BB01} succs={}

***** BB02
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

***** BB02
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB02
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB02
STMT00006 ( 0x021[E-] ... 0x02B )
               [000015] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000014] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00007 ( 0x02B[E-] ... ??? )
               [000016] -----------                         *  NO_OP     void  

***** BB02
STMT00008 ( 0x02C[E-] ... 0x038 )
               [000020] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000017] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000018] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

***** BB02
STMT00009 ( 0x033[--] ... ??? )
               [000022] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000021] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

***** BB02
STMT00010 ( 0x038[E-] ... ??? )
               [000023] -----------                         *  NO_OP     void  

***** BB02
STMT00011 ( 0x039[E-] ... 0x043 )
               [000025] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000024] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00012 ( 0x043[E-] ... ??? )
               [000026] -----------                         *  NO_OP     void  

***** BB02
STMT00013 ( 0x044[E-] ... 0x049 )
               [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000027] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00014 ( 0x04A[E-] ... 0x05B )
               [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000030] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1a48 class
               [000029] ----------- arg1                       \--*  CNS_INT   long   3

***** BB02
STMT00015 ( 0x050[--] ... ??? )
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d21c8 field

***** BB02
STMT00016 ( ??? ... ??? )
               [000037] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000039] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

***** BB02
STMT00017 ( 0x05B[--] ... ??? )
               [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB02
STMT00018 ( 0x05C[E-] ... 0x064 )
               [000045] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000044] --C-G------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
               [000041] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000042] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000043] ----------- arg2                       \--*  CNS_INT   int    1

***** BB02
STMT00019 ( 0x064[--] ... ??? )
               [000047] -----------                         *  NOP       void  

***** BB02
STMT00020 ( 0x065[E-] ... 0x071 )
               [000051] DAC-G------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000050] --C-G------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
               [000048] ----------- this                       +--*  LCL_VAR   ref    V03 loc2         
               [000049] ----------- arg1                       \--*  CNS_INT   int    0

***** BB02
STMT00021 ( 0x06C[--] ... ??? )
               [000053] --C-G------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000052] ----------- arg0                    \--*  LCL_VAR   int    V17 tmp7         

***** BB02
STMT00022 ( 0x071[E-] ... ??? )
               [000054] -----------                         *  NO_OP     void  

***** BB02
STMT00023 ( 0x072[E-] ... 0x083 )
               [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000056] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1e30 class
               [000055] ----------- arg1                       \--*  CNS_INT   long   5

***** BB02
STMT00024 ( 0x078[--] ... ??? )
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d2198 field

***** BB02
STMT00025 ( ??? ... ??? )
               [000063] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] ----------- arg0                    +--*  LCL_VAR   ref    V18 tmp8         
               [000065] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V19 tmp9         

***** BB02
STMT00026 ( 0x083[--] ... ??? )
               [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

***** BB02
STMT00027 ( 0x085[E-] ... 0x085 )
               [000067] -----------                         *  NO_OP     void  

***** BB02
STMT00028 ( 0x086[E-] ... 0x08E )
               [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
               [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
               [000069] -----------                            \--*  CNS_INT   int    0

***** BB02
STMT00029 ( 0x090[E-] ... 0x093 )
               [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000073] ---------U-                         \--*  CAST      long <- ulong <- byref
               [000072] -----------                            \--*  LCL_VAR   byref  V07 loc6         

***** BB02
STMT00030 ( 0x095[E-] ... 0x095 )
               [000075] -----------                         *  NO_OP     void  

***** BB02
STMT00031 ( 0x096[E-] ... 0x09D )
               [000078] DAC-G------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000077] --C-G------                         \--*  CALL      ref    System.String:.ctor(ulong):this
               [000076] ----------- arg0                       \--*  LCL_VAR   long   V06 loc5         

***** BB02
STMT00032 ( 0x09D[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

***** BB02
STMT00033 ( 0x09F[E-] ... 0x09F )
               [000081] -----------                         *  NO_OP     void  

***** BB02
STMT00034 ( 0x0A0[E-] ... 0x0A2 )
               [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
               [000082] -----------                            \--*  CNS_INT   int    0

***** BB02
STMT00035 ( 0x0A4[E-] ... 0x0A4 )
               [000085] -----------                         *  NO_OP     void  

***** BB02
STMT00036 ( 0x0A5[E-] ... 0x0AF )
               [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000086] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00037 ( ??? ... ??? )
               [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000087] -----------                         \--*  CNS_INT   int    1

***** BB02
STMT00038 ( 0x0AF[--] ... ??? )
               [000092] DA---------                         *  STORE_LCL_VAR int   (AX) V09 loc8         
               [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

***** BB02
STMT00039 ( ??? ... 0x0C2 )
               [000095] DAC-G------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --C-G------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] ----------- this                       \--*  LCL_ADDR  byref  V09 loc8         [+0]

***** BB02
STMT00040 ( 0x0B8[--] ... ??? )
               [000098] DAC-G------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000097] --C-G------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
               [000089] ----------- arg0                       +--*  LCL_VAR   ref    V21 tmp11        
               [000096] ----------- arg1                       \--*  LCL_VAR   ref    V23 tmp13        

***** BB02
STMT00041 ( 0x0BD[--] ... ??? )
               [000100] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000099] ----------- arg0                    \--*  LCL_VAR   ref    V24 tmp14        

***** BB02
STMT00042 ( 0x0C2[E-] ... ??? )
               [000101] -----------                         *  NO_OP     void  

***** BB02
STMT00043 ( 0x0C3[E-] ... 0x0C3 )
               [000102] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Early liveness

*************** Finishing PHASE Early liveness [no changes]

*************** Starting PHASE Forward Substitution

*************** Finishing PHASE Forward Substitution [no changes]

*************** Starting PHASE Physical promotion

*************** Finishing PHASE Physical promotion [no changes]

*************** Starting PHASE Identify candidates for implicit byref copy omission

*************** Finishing PHASE Identify candidates for implicit byref copy omission [no changes]

*************** Starting PHASE Morph - ByRefs

*************** Finishing PHASE Morph - ByRefs [no changes]

*************** Starting PHASE Morph - Global

*************** In fgMorphBlocks()
compEnregLocals() is false, setting doNotEnreg flag for all locals.
Local V00 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V01 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V02 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V03 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V04 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V05 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V06 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V07 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V08 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V09 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V10 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V11 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V12 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V13 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V14 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V15 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V16 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V17 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V18 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V19 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V20 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V21 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V22 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V23 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V24 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Morphing BB01 of 'System.Text.Program:Main(System.String[])'

fgMorphTree BB01, STMT00000 (before)
               [000000] -----------                         *  NOP       void  

fgMorphTree BB01, STMT00044 (before)
               [000110] --C-G------                         *  QMARK     void  
               [000106] ----G------    if                   +--*  EQ        int   
               [000104] n---G------                         |  +--*  IND       int   
               [000103] H----------                         |  |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----------                         |  \--*  CNS_INT   int    0
               [000109] --C-G------    if                   \--*  COLON     void  
               [000107] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000108] ----------- then                       \--*  NOP       void  
Initializing arg info for 107.CALL:
Args for call [000107] CALL after AddFinalArgsAndDetermineABIInfo:

Morphing args for 107.CALL:
Args for [000107].CALL after fgMorphArgs:
OutgoingArgsStackSize is 32


Morphing BB02 of 'System.Text.Program:Main(System.String[])'

fgMorphTree BB02, STMT00001 (before)
               [000001] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00002 (before)
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00
Initializing arg info for 5.CALL:
Args for call [000005] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000004].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, wellKnown[ThisPointer]]
CallArg[[000002].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8]
CallArg[[000003].CNS_INT int (By value), 1 reg: r8, byteAlignment=8]

Morphing args for 5.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000004] -----+-----                         *  LCL_ADDR  long   V11 tmp1         [+0]
Moved to late list
Deferred argument ('rdx'):
               [000002] H----+-----                         *  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
Moved to late list
Deferred argument ('r8'):
               [000003] -----+-----                         *  CNS_INT   int    0xF00
Moved to late list

Register placement order:    rcx rdx r8 
Args for [000005].CALL after fgMorphArgs:
CallArg[[000004].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed, wellKnown[ThisPointer]]
CallArg[[000002].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
CallArg[[000003].CNS_INT int (By value), 1 reg: r8, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00003 (before)
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
MorphCopyBlock:
PrepareDst for [000007] have found a local var V01.
block assignment to morph:
               [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

fgMorphTree BB02, STMT00004 (before)
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00
Initializing arg info for 11.CALL:
Args for call [000011] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000010].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, wellKnown[ThisPointer]]
CallArg[[000008].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8]
CallArg[[000009].CNS_INT int (By value), 1 reg: r8, byteAlignment=8]

Morphing args for 11.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000010] -----+-----                         *  LCL_ADDR  long   V12 tmp2         [+0]
Moved to late list
Deferred argument ('rdx'):
               [000008] H----+-----                         *  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
Moved to late list
Deferred argument ('r8'):
               [000009] -----+-----                         *  CNS_INT   int    0xF00
Moved to late list

Register placement order:    rcx rdx r8 
Args for [000011].CALL after fgMorphArgs:
CallArg[[000010].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed, wellKnown[ThisPointer]]
CallArg[[000008].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
CallArg[[000009].CNS_INT int (By value), 1 reg: r8, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00005 (before)
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
MorphCopyBlock:
PrepareDst for [000013] have found a local var V02.
block assignment to morph:
               [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

fgMorphTree BB02, STMT00006 (before)
               [000015] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000014] ----------- arg0                    \--*  CNS_STR   ref   <string constant>
Initializing arg info for 15.CALL:
Args for call [000015] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000014].CNS_STR ref (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 15.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000111] H----+-----                         *  CNS_INT(h) ref     'Ascii------'

Moved to late list

Register placement order:    rcx 
Args for [000015].CALL after fgMorphArgs:
CallArg[[000111].CNS_INT ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00006 (after)
               [000015] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000111] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii------'


fgMorphTree BB02, STMT00007 (before)
               [000016] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00008 (before)
               [000020] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000017] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000018] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
Initializing arg info for 19.CALL:
Args for call [000019] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000017].LCL_VAR struct (By ref), 1 reg: rcx, byteAlignment=8, isStruct]
CallArg[[000018].LCL_VAR struct (By ref), 1 reg: rdx, byteAlignment=8, isStruct]

Morphing args for 19.CALL:
making an outgoing copy for struct arg

lvaGrabTemp returning 25 (V25 tmp15) called for by-value struct argument.
MorphCopyBlock:
PrepareDst for [000112] have found a local var V25.
block assignment to morph:
               [000112] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V25 tmp15        
               [000017] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000112] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V25 tmp15        
               [000017] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
making an outgoing copy for struct arg

lvaGrabTemp returning 26 (V26 tmp16) called for by-value struct argument.
MorphCopyBlock:
PrepareDst for [000113] have found a local var V26.
block assignment to morph:
               [000113] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V26 tmp16        
               [000018] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000113] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V26 tmp16        
               [000018] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

Sorting the arguments:

Local V25 should not be enregistered because: it is address exposed

Local V26 should not be enregistered because: it is address exposed

Register placement order:    rcx rdx 
Args for [000019].CALL after fgMorphArgs:
CallArg[[000114].LCL_ADDR struct (By ref), 1 reg: rcx, byteAlignment=8, isLate, tmpNum=V25, isTmp, processed, isStruct]
CallArg[[000115].LCL_ADDR struct (By ref), 1 reg: rdx, byteAlignment=8, isLate, tmpNum=V26, isTmp, processed, isStruct]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00008 (after)
               [000020] DACXG+-----                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] -ACXG+-----                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000112] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V25 tmp15        
               [000017] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000113] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V26 tmp16        
               [000018] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000114] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V25 tmp15        [+0]
               [000115] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V26 tmp16        [+0]

fgMorphTree BB02, STMT00009 (before)
               [000022] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000021] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         
Initializing arg info for 22.CALL:
Args for call [000022] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000021].LCL_VAR bool (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 22.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000021] -----+-----                         *  LCL_VAR   int    V13 tmp3         
Moved to late list

Register placement order:    rcx 
Args for [000022].CALL after fgMorphArgs:
CallArg[[000021].LCL_VAR bool (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00010 (before)
               [000023] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00011 (before)
               [000025] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000024] ----------- arg0                    \--*  CNS_STR   ref   <string constant>
Initializing arg info for 25.CALL:
Args for call [000025] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000024].CNS_STR ref (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 25.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000116] H----+-----                         *  CNS_INT(h) ref     'String------'

Moved to late list

Register placement order:    rcx 
Args for [000025].CALL after fgMorphArgs:
CallArg[[000116].CNS_INT ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00011 (after)
               [000025] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000116] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'String------'


fgMorphTree BB02, STMT00012 (before)
               [000026] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00013 (before)
               [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000027] -----------                         \--*  CNS_STR   ref   <string constant>

fgMorphTree BB02, STMT00013 (after)
               [000028] DA---+-----                         *  STORE_LCL_VAR ref    V03 loc2         
               [000117] H----+-----                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


fgMorphTree BB02, STMT00014 (before)
               [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000030] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1a48 class
               [000029] ----------- arg1                       \--*  CNS_INT   long   3
Initializing arg info for 31.CALL:
Args for call [000031] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000030].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000029].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8]

Morphing args for 31.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000030] H----+-----                         *  CNS_INT(h) long   0x7ffd086d1a48 class
Moved to late list
Deferred argument ('rdx'):
               [000029] -----+-----                         *  CNS_INT   long   3
Moved to late list

Register placement order:    rcx rdx 
Args for [000031].CALL after fgMorphArgs:
CallArg[[000030].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000029].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00015 (before)
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d21c8 field
Initializing arg info for 36.CALL:
Args for call [000036] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000035].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 36.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000035] H----+-----                         *  CNS_INT(h) long   0x7ffd086d21c8 field
Moved to late list

Register placement order:    rcx 
Args for [000036].CALL after fgMorphArgs:
CallArg[[000035].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32

MorphCopyBlock:
PrepareDst for [000038] have found a local var V15.
block assignment to morph:
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d21c8 field
 src is not an L-value this requires a CopyBlock.
MorphCopyBlock (after):
               [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d21c8 field

fgMorphTree BB02, STMT00016 (before)
               [000037] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000039] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         
Initializing arg info for 37.CALL:
Args for call [000037] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000034].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000039].LCL_VAR struct (By value), 1 reg: rdx, byteAlignment=8, isStruct]

Morphing args for 37.CALL:

Local V15 should not be enregistered because: SwizzleArg

Sorting the arguments:
Deferred argument ('rcx'):
               [000034] -----+-----                         *  LCL_VAR   ref    V14 tmp4         
Moved to late list
Deferred argument ('rdx'):
               [000039] -----+-----                         *  LCL_FLD   ref    V15 tmp5         [+0]
Moved to late list

Register placement order:    rcx rdx 
Args for [000037].CALL after fgMorphArgs:
CallArg[[000034].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000039].LCL_FLD struct (By value), 1 reg: rdx, byteAlignment=8, isLate, processed, isStruct]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00016 (after)
               [000037] --CXG+-----                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] -----+----- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
               [000039] -----+----- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

fgMorphTree BB02, STMT00017 (before)
               [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

fgMorphTree BB02, STMT00018 (before)
               [000045] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000044] --C-G------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
               [000041] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000042] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000043] ----------- arg2                       \--*  CNS_INT   int    1
Initializing arg info for 44.CALL:
Args for call [000044] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000041].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000042].LCL_VAR ref (By value), 1 reg: rdx, byteAlignment=8]
CallArg[[000043].CNS_INT int (By value), 1 reg: r8, byteAlignment=8]

Morphing args for 44.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000041] -----+-----                         *  LCL_VAR   ref    V03 loc2         
Moved to late list
Deferred argument ('rdx'):
               [000042] -----+-----                         *  LCL_VAR   ref    V04 loc3         
Moved to late list
Deferred argument ('r8'):
               [000043] -----+-----                         *  CNS_INT   int    1
Moved to late list

Register placement order:    rcx rdx r8 
Args for [000044].CALL after fgMorphArgs:
CallArg[[000041].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000042].LCL_VAR ref (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
CallArg[[000043].CNS_INT int (By value), 1 reg: r8, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00019 (before)
               [000047] -----------                         *  NOP       void  

fgMorphTree BB02, STMT00020 (before)
               [000051] DAC-G------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000050] --C-G------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
               [000048] ----------- this                       +--*  LCL_VAR   ref    V03 loc2         
               [000049] ----------- arg1                       \--*  CNS_INT   int    0
Initializing arg info for 50.CALL:
Args for call [000050] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000048].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, wellKnown[ThisPointer]]
CallArg[[000049].CNS_INT int (By value), 1 reg: rdx, byteAlignment=8]

Morphing args for 50.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000048] -----+-----                         *  LCL_VAR   ref    V03 loc2         
Moved to late list
Deferred argument ('rdx'):
               [000049] -----+-----                         *  CNS_INT   int    0
Moved to late list

Register placement order:    rcx rdx 
Args for [000050].CALL after fgMorphArgs:
CallArg[[000048].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed, wellKnown[ThisPointer]]
CallArg[[000049].CNS_INT int (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00021 (before)
               [000053] --C-G------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000052] ----------- arg0                    \--*  LCL_VAR   int    V17 tmp7         
Initializing arg info for 53.CALL:
Args for call [000053] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000052].LCL_VAR ushort (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 53.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000052] -----+-----                         *  LCL_VAR   int    V17 tmp7         
Moved to late list

Register placement order:    rcx 
Args for [000053].CALL after fgMorphArgs:
CallArg[[000052].LCL_VAR ushort (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00022 (before)
               [000054] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00023 (before)
               [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000056] H---------- arg0                       +--*  CNS_INT(h) long   0x7ffd086d1e30 class
               [000055] ----------- arg1                       \--*  CNS_INT   long   5
Initializing arg info for 57.CALL:
Args for call [000057] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000056].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000055].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8]

Morphing args for 57.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000056] H----+-----                         *  CNS_INT(h) long   0x7ffd086d1e30 class
Moved to late list
Deferred argument ('rdx'):
               [000055] -----+-----                         *  CNS_INT   long   5
Moved to late list

Register placement order:    rcx rdx 
Args for [000057].CALL after fgMorphArgs:
CallArg[[000056].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000055].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00024 (before)
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H---------- arg0                       \--*  CNS_INT(h) long   0x7ffd086d2198 field
Initializing arg info for 62.CALL:
Args for call [000062] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000061].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 62.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000061] H----+-----                         *  CNS_INT(h) long   0x7ffd086d2198 field
Moved to late list

Register placement order:    rcx 
Args for [000062].CALL after fgMorphArgs:
CallArg[[000061].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32

MorphCopyBlock:
PrepareDst for [000064] have found a local var V19.
block assignment to morph:
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d2198 field
 src is not an L-value this requires a CopyBlock.
MorphCopyBlock (after):
               [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d2198 field

fgMorphTree BB02, STMT00025 (before)
               [000063] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] ----------- arg0                    +--*  LCL_VAR   ref    V18 tmp8         
               [000065] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V19 tmp9         
Initializing arg info for 63.CALL:
Args for call [000063] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000060].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000065].LCL_VAR struct (By value), 1 reg: rdx, byteAlignment=8, isStruct]

Morphing args for 63.CALL:

Local V19 should not be enregistered because: SwizzleArg

Sorting the arguments:
Deferred argument ('rcx'):
               [000060] -----+-----                         *  LCL_VAR   ref    V18 tmp8         
Moved to late list
Deferred argument ('rdx'):
               [000065] -----+-----                         *  LCL_FLD   ref    V19 tmp9         [+0]
Moved to late list

Register placement order:    rcx rdx 
Args for [000063].CALL after fgMorphArgs:
CallArg[[000060].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000065].LCL_FLD struct (By value), 1 reg: rdx, byteAlignment=8, isLate, processed, isStruct]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00025 (after)
               [000063] --CXG+-----                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] -----+----- arg0 in rcx             +--*  LCL_VAR   ref    V18 tmp8         
               [000065] -----+----- arg1 in rdx             \--*  LCL_FLD   ref    V19 tmp9         [+0]

fgMorphTree BB02, STMT00026 (before)
               [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

fgMorphTree BB02, STMT00027 (before)
               [000067] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00028 (before)
               [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
               [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
               [000069] -----------                            \--*  CNS_INT   int    0

fgMorphTree BB02, STMT00029 (before)
               [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000073] ---------U-                         \--*  CAST      long <- ulong <- byref
               [000072] -----------                            \--*  LCL_VAR   byref  V07 loc6         

lvaGrabTemp returning 27 (V27 tmp17) called for Cast away GC.

fgMorphTree BB02, STMT00029 (after)
               [000074] DA---+-----                         *  STORE_LCL_VAR long   V06 loc5         
               [000121] -A---+-----                         \--*  COMMA     long  
               [000118] DA---+-----                            +--*  STORE_LCL_VAR long   V27 tmp17        
               [000072] -----+-----                            |  \--*  LCL_VAR   byref  V07 loc6         
               [000119] -----+-----                            \--*  LCL_VAR   long   V27 tmp17        

fgMorphTree BB02, STMT00030 (before)
               [000075] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00031 (before)
               [000078] DAC-G------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000077] --C-G------                         \--*  CALL      ref    System.String:.ctor(ulong):this
               [000076] ----------- arg0                       \--*  LCL_VAR   long   V06 loc5         
Initializing arg info for 77.CALL:
Args for call [000077] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000076].LCL_VAR long (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 77.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000076] -----+-----                         *  LCL_VAR   long   V06 loc5         
Moved to late list

Register placement order:    rcx 
Args for [000077].CALL after fgMorphArgs:
CallArg[[000076].LCL_VAR long (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00032 (before)
               [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

fgMorphTree BB02, STMT00033 (before)
               [000081] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00034 (before)
               [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
               [000082] -----------                            \--*  CNS_INT   int    0

fgMorphTree BB02, STMT00035 (before)
               [000085] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00036 (before)
               [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000086] -----------                         \--*  CNS_STR   ref   <string constant>

fgMorphTree BB02, STMT00036 (after)
               [000088] DA---+-----                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000122] H----+-----                         \--*  CNS_INT(h) ref     'Main Vector512: '


fgMorphTree BB02, STMT00037 (before)
               [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000087] -----------                         \--*  CNS_INT   int    1

fgMorphTree BB02, STMT00038 (before)
               [000092] DA---------                         *  STORE_LCL_VAR int   (AX) V09 loc8         
               [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

fgMorphTree BB02, STMT00039 (before)
               [000095] DAC-G------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --C-G------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] ----------- this                       \--*  LCL_ADDR  byref  V09 loc8         [+0]
Initializing arg info for 94.CALL:
Args for call [000094] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000093].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, wellKnown[ThisPointer]]

Morphing args for 94.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000093] -----+-----                         *  LCL_ADDR  long   V09 loc8         [+0]
Moved to late list

Register placement order:    rcx 
Args for [000094].CALL after fgMorphArgs:
CallArg[[000093].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed, wellKnown[ThisPointer]]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00040 (before)
               [000098] DAC-G------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000097] --C-G------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
               [000089] ----------- arg0                       +--*  LCL_VAR   ref    V21 tmp11        
               [000096] ----------- arg1                       \--*  LCL_VAR   ref    V23 tmp13        
Initializing arg info for 97.CALL:
Args for call [000097] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000089].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000096].LCL_VAR ref (By value), 1 reg: rdx, byteAlignment=8]

Morphing args for 97.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000089] -----+-----                         *  LCL_VAR   ref    V21 tmp11        
Moved to late list
Deferred argument ('rdx'):
               [000096] -----+-----                         *  LCL_VAR   ref    V23 tmp13        
Moved to late list

Register placement order:    rcx rdx 
Args for [000097].CALL after fgMorphArgs:
CallArg[[000089].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000096].LCL_VAR ref (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00041 (before)
               [000100] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000099] ----------- arg0                    \--*  LCL_VAR   ref    V24 tmp14        
Initializing arg info for 100.CALL:
Args for call [000100] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000099].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 100.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000099] -----+-----                         *  LCL_VAR   ref    V24 tmp14        
Moved to late list

Register placement order:    rcx 
Args for [000100].CALL after fgMorphArgs:
CallArg[[000099].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00042 (before)
               [000101] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00043 (before)
               [000102] -----------                         *  RETURN    void  

*************** In fgMarkDemotedImplicitByRefArgs()

Expanding top-level qmark in BB01 (before)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----+-----                         *  NOP       void  

***** BB01
STMT00044 ( ??? ... ??? )
               [000110] --C-G+-----                         *  QMARK     void  
               [000106] J---G+-N---    if                   +--*  EQ        int   
               [000104] n---G+-----                         |  +--*  IND       int   
               [000103] H----+-----                         |  |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----+-----                         |  \--*  CNS_INT   int    0
               [000109] --C-G+?----    if                   \--*  COLON     void  
               [000107] --C-G+?---- else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000108] -----+?---- then                       \--*  NOP       void  

-------------------------------------------------------------------------------------------------------------------
New Basic Block BB03 [0002] created.
BB02 previous predecessor was BB01, now is BB03
Setting edge weights for BB01 -> BB03 to [0 .. 3.402823e+38]
New Basic Block BB04 [0003] created.
New Basic Block BB05 [0004] created.
Setting edge weights for BB01 -> BB04 to [0 .. 3.402823e+38]
Setting edge weights for BB04 -> BB05 to [0 .. 3.402823e+38]
Setting edge weights for BB05 -> BB03 to [0 .. 3.402823e+38]
Setting edge weights for BB04 -> BB03 to [0 .. 3.402823e+38]

removing useless STMT00044 ( ??? ... ??? )
               [000110] --C-G+-----                         *  QMARK     void  
               [000106] J---G+-N---    if                   +--*  EQ        int   
               [000104] n---G+-----                         |  +--*  IND       int   
               [000103] H----+-----                         |  |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----+-----                         |  \--*  CNS_INT   int    0
               [000109] --C-G+?----    if                   \--*  COLON     void  
               [000107] --C-G+?---- else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000108] -----+?---- then                       \--*  NOP       void  
 from BB01

Expanding top-level qmark in BB01 (after)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB04 [0003]  1       BB01                  1       [???..???)-> BB03 ( cond )                     internal 
BB05 [0004]  1       BB04                  0.50    [???..???)                                     internal 
BB03 [0002]  2       BB04,BB05             1       [???..???)                                     i internal hascall 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB04}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----+-----                         *  NOP       void  

------------ BB04 [???..???) -> BB03 (cond), preds={BB01} succs={BB05,BB03}

***** BB04
STMT00045 ( ??? ... ??? )
               [000123] ----G------                         *  JTRUE     void  
               [000106] J---G+-N---                         \--*  EQ        int   
               [000104] n---G+-----                            +--*  IND       int   
               [000103] H----+-----                            |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----+-----                            \--*  CNS_INT   int    0

------------ BB05 [???..???), preds={BB04} succs={BB03}

***** BB05
STMT00046 ( ??? ... ??? )
               [000107] --C-G+?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB03 [???..???), preds={BB04,BB05} succs={BB02}

-------------------------------------------------------------------------------------------------------------------

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB04 [0003]  1       BB01                  1       [???..???)-> BB03 ( cond )                     internal 
BB05 [0004]  1       BB04                  0.50    [???..???)                                     internal 
BB03 [0002]  2       BB04,BB05             1       [???..???)                                     i internal hascall 
BB02 [0001]  1       BB03                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
Renumber BB04 to BB02
Renumber BB05 to BB03
Renumber BB03 to BB04
Renumber BB02 to BB05

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

New BlockSet epoch 2, # of blocks (including unused BB00): 6, bitset array size: 1 (short)

*************** Finishing PHASE Morph - Global
Trees after Morph - Global

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----+-----                         *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00045 ( ??? ... ??? )
               [000123] ----G------                         *  JTRUE     void  
               [000106] J---G+-N---                         \--*  EQ        int   
               [000104] n---G+-----                            +--*  IND       int   
               [000103] H----+-----                            |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
               [000105] -----+-----                            \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00046 ( ??? ... ??? )
               [000107] --C-G+?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}

***** BB05
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----+-----                         *  NO_OP     void  

***** BB05
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --CXG+-----                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] -----+----- this in rcx             +--*  LCL_ADDR  long   V11 tmp1         [+0]
               [000002] H----+----- arg1 in rdx             +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] -----+----- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA--G+-----                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB05
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --CXG+-----                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] -----+----- this in rcx             +--*  LCL_ADDR  long   V12 tmp2         [+0]
               [000008] H----+----- arg1 in rdx             +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] -----+----- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA--G+-----                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB05
STMT00006 ( 0x021[E-] ... 0x02B )
               [000015] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000111] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii------'


***** BB05
STMT00007 ( 0x02B[E-] ... ??? )
               [000016] -----+-----                         *  NO_OP     void  

***** BB05
STMT00008 ( 0x02C[E-] ... 0x038 )
               [000020] DACXG+-----                         *  STORE_LCL_VAR int    V13 tmp3         
               [000019] -ACXG+-----                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000112] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V25 tmp15        
               [000017] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000113] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V26 tmp16        
               [000018] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000114] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V25 tmp15        [+0]
               [000115] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V26 tmp16        [+0]

***** BB05
STMT00009 ( 0x033[--] ... ??? )
               [000022] --CXG+-----                         *  CALL      void   System.Console:WriteLine(bool)
               [000021] -----+----- arg0 in rcx             \--*  LCL_VAR   int    V13 tmp3         

***** BB05
STMT00010 ( 0x038[E-] ... ??? )
               [000023] -----+-----                         *  NO_OP     void  

***** BB05
STMT00011 ( 0x039[E-] ... 0x043 )
               [000025] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000116] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'String------'


***** BB05
STMT00012 ( 0x043[E-] ... ??? )
               [000026] -----+-----                         *  NO_OP     void  

***** BB05
STMT00013 ( 0x044[E-] ... 0x049 )
               [000028] DA---+-----                         *  STORE_LCL_VAR ref    V03 loc2         
               [000117] H----+-----                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


***** BB05
STMT00014 ( 0x04A[E-] ... 0x05B )
               [000032] DACXG+-----                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000031] --CXG+-----                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000030] H----+----- arg0 in rcx                +--*  CNS_INT(h) long   0x7ffd086d1a48 class
               [000029] -----+----- arg1 in rdx                \--*  CNS_INT   long   3

***** BB05
STMT00015 ( 0x050[--] ... ??? )
               [000038] DACXG+-----                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000036] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000035] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d21c8 field

***** BB05
STMT00016 ( ??? ... ??? )
               [000037] --CXG+-----                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000034] -----+----- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
               [000039] -----+----- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

***** BB05
STMT00017 ( 0x05B[--] ... ??? )
               [000040] DA---+-----                         *  STORE_LCL_VAR ref    V04 loc3         
               [000033] -----+-----                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB05
STMT00018 ( 0x05C[E-] ... 0x064 )
               [000045] DACXG+-----                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000044] --CXG+-----                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
               [000041] -----+----- arg0 in rcx                +--*  LCL_VAR   ref    V03 loc2         
               [000042] -----+----- arg1 in rdx                +--*  LCL_VAR   ref    V04 loc3         
               [000043] -----+----- arg2 in r8                 \--*  CNS_INT   int    1

***** BB05
STMT00019 ( 0x064[--] ... ??? )
               [000047] -----+-----                         *  NOP       void  

***** BB05
STMT00020 ( 0x065[E-] ... 0x071 )
               [000051] DACXG+-----                         *  STORE_LCL_VAR int    V17 tmp7         
               [000050] --CXG+-----                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
               [000048] -----+----- this in rcx                +--*  LCL_VAR   ref    V03 loc2         
               [000049] -----+----- arg1 in rdx                \--*  CNS_INT   int    0

***** BB05
STMT00021 ( 0x06C[--] ... ??? )
               [000053] --CXG+-----                         *  CALL      void   System.Console:WriteLine(ushort)
               [000052] -----+----- arg0 in rcx             \--*  LCL_VAR   int    V17 tmp7         

***** BB05
STMT00022 ( 0x071[E-] ... ??? )
               [000054] -----+-----                         *  NO_OP     void  

***** BB05
STMT00023 ( 0x072[E-] ... 0x083 )
               [000058] DACXG+-----                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000057] --CXG+-----                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000056] H----+----- arg0 in rcx                +--*  CNS_INT(h) long   0x7ffd086d1e30 class
               [000055] -----+----- arg1 in rdx                \--*  CNS_INT   long   5

***** BB05
STMT00024 ( 0x078[--] ... ??? )
               [000064] DACXG+-----                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
               [000062] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000061] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d2198 field

***** BB05
STMT00025 ( ??? ... ??? )
               [000063] --CXG+-----                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000060] -----+----- arg0 in rcx             +--*  LCL_VAR   ref    V18 tmp8         
               [000065] -----+----- arg1 in rdx             \--*  LCL_FLD   ref    V19 tmp9         [+0]

***** BB05
STMT00026 ( 0x083[--] ... ??? )
               [000066] DA---+-----                         *  STORE_LCL_VAR ref    V05 loc4         
               [000059] -----+-----                         \--*  LCL_VAR   ref    V18 tmp8         

***** BB05
STMT00027 ( 0x085[E-] ... 0x085 )
               [000067] -----+-----                         *  NO_OP     void  

***** BB05
STMT00028 ( 0x086[E-] ... 0x08E )
               [000071] DA-XG+-----                         *  STORE_LCL_VAR byref  V07 loc6         
               [000070] ---XG+-----                         \--*  INDEX_ADDR byref byte[]
               [000068] -----+-----                            +--*  LCL_VAR   ref    V05 loc4         
               [000069] -----+-----                            \--*  CNS_INT   int    0

***** BB05
STMT00029 ( 0x090[E-] ... 0x093 )
               [000074] DA---+-----                         *  STORE_LCL_VAR long   V06 loc5         
               [000121] -A---+-----                         \--*  COMMA     long  
               [000118] DA---+-----                            +--*  STORE_LCL_VAR long   V27 tmp17        
               [000072] -----+-----                            |  \--*  LCL_VAR   byref  V07 loc6         
               [000119] -----+-----                            \--*  LCL_VAR   long   V27 tmp17        

***** BB05
STMT00030 ( 0x095[E-] ... 0x095 )
               [000075] -----+-----                         *  NO_OP     void  

***** BB05
STMT00031 ( 0x096[E-] ... 0x09D )
               [000078] DACXG+-----                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000077] --CXG+-----                         \--*  CALL      ref    System.String:.ctor(ulong):this
               [000076] -----+----- arg0 in rcx                \--*  LCL_VAR   long   V06 loc5         

***** BB05
STMT00032 ( 0x09D[--] ... ??? )
               [000080] DA---+-----                         *  STORE_LCL_VAR ref    V08 loc7         
               [000079] -----+-----                         \--*  LCL_VAR   ref    V20 tmp10        

***** BB05
STMT00033 ( 0x09F[E-] ... 0x09F )
               [000081] -----+-----                         *  NO_OP     void  

***** BB05
STMT00034 ( 0x0A0[E-] ... 0x0A2 )
               [000084] DA---+-----                         *  STORE_LCL_VAR byref  V07 loc6         
               [000083] -----+---U-                         \--*  CAST      long <- ulong <- uint
               [000082] -----+-----                            \--*  CNS_INT   int    0

***** BB05
STMT00035 ( 0x0A4[E-] ... 0x0A4 )
               [000085] -----+-----                         *  NO_OP     void  

***** BB05
STMT00036 ( 0x0A5[E-] ... 0x0AF )
               [000088] DA---+-----                         *  STORE_LCL_VAR ref    V21 tmp11        
               [000122] H----+-----                         \--*  CNS_INT(h) ref     'Main Vector512: '


***** BB05
STMT00037 ( ??? ... ??? )
               [000090] DA---+-----                         *  STORE_LCL_VAR int    V22 tmp12        
               [000087] -----+-----                         \--*  CNS_INT   int    1

***** BB05
STMT00038 ( 0x0AF[--] ... ??? )
               [000092] DA--G+-----                         *  STORE_LCL_VAR int   (AX) V09 loc8         
               [000091] -----+-----                         \--*  LCL_VAR   int    V22 tmp12        

***** BB05
STMT00039 ( ??? ... 0x0C2 )
               [000095] DACXG+-----                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000094] --CXG+-----                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
               [000093] -----+----- this in rcx                \--*  LCL_ADDR  long   V09 loc8         [+0]

***** BB05
STMT00040 ( 0x0B8[--] ... ??? )
               [000098] DACXG+-----                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000097] --CXG+-----                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
               [000089] -----+----- arg0 in rcx                +--*  LCL_VAR   ref    V21 tmp11        
               [000096] -----+----- arg1 in rdx                \--*  LCL_VAR   ref    V23 tmp13        

***** BB05
STMT00041 ( 0x0BD[--] ... ??? )
               [000100] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000099] -----+----- arg0 in rcx             \--*  LCL_VAR   ref    V24 tmp14        

***** BB05
STMT00042 ( 0x0C2[E-] ... ??? )
               [000101] -----+-----                         *  NO_OP     void  

***** BB05
STMT00043 ( 0x0C3[E-] ... 0x0C3 )
               [000102] -----+-----                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE GS Cookie
No GS security needed

*************** Finishing PHASE GS Cookie [no changes]

*************** Starting PHASE Compute edge weights (1, false)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

 -- no profile data, so using default called count
 -- not optimizing or no profile data, so not computing edge weights

*************** Finishing PHASE Compute edge weights (1, false) [no changes]

*************** Starting PHASE Create EH funclets

*************** Finishing PHASE Create EH funclets [no changes]

*************** Starting PHASE Morph array ops
No multi-dimensional array references in the function

*************** Finishing PHASE Morph array ops [no changes]

*************** Starting PHASE Mark local vars

*************** In lvaMarkLocalVars()
*** lvaComputeRefCounts ***

*************** Finishing PHASE Mark local vars [no changes]

*************** Starting PHASE Find oper order
*************** In fgFindOperOrder()

*************** Finishing PHASE Find oper order
Trees after Find oper order

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
     (  0,  0) [000000] -----------                         *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00045 ( ??? ... ??? )
     (  9, 16) [000123] ----G------                         *  JTRUE     void  
     (  7, 14) [000106] J---G--N---                         \--*  EQ        int   
     (  5, 12) [000104] n---G------                            +--*  IND       int   
     (  3, 10) [000103] H----------                            |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
     (  1,  1) [000105] -----------                            \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00046 ( ??? ... ??? )
     ( 14,  5) [000107] --C-G-?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}

***** BB05
STMT00001 ( 0x000[E-] ... 0x000 )
     (  1,  1) [000001] -----------                         *  NO_OP     void  

***** BB05
STMT00002 ( 0x001[E-] ... 0x010 )
     ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
     (  3,  3) [000004] ----------- this in rcx             +--*  LCL_ADDR  long   V11 tmp1         [+0]
     (  3, 10) [000002] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
     (  1,  4) [000003] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00003 ( 0x010[--] ... ??? )
     ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
     (  9,  6) [000006] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB05
STMT00004 ( 0x011[E-] ... 0x020 )
     ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
     (  3,  3) [000010] ----------- this in rcx             +--*  LCL_ADDR  long   V12 tmp2         [+0]
     (  3, 10) [000008] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
     (  1,  4) [000009] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00005 ( 0x020[--] ... ??? )
     ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
     (  9,  6) [000012] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB05
STMT00006 ( 0x021[E-] ... 0x02B )
     ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
     (  3, 10) [000111] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii------'


***** BB05
STMT00007 ( 0x02B[E-] ... ??? )
     (  1,  1) [000016] -----------                         *  NO_OP     void  

***** BB05
STMT00008 ( 0x02C[E-] ... 0x038 )
     ( 68, 42) [000020] DACXG------                         *  STORE_LCL_VAR int    V13 tmp3         
     ( 64, 39) [000019] -ACXG------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
     ( 19, 13) [000112] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V25 tmp15        
     (  9,  6) [000017] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
     ( 19, 13) [000113] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V26 tmp16        
     (  9,  6) [000018] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
     (  3,  3) [000114] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V25 tmp15        [+0]
     (  3,  3) [000115] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V26 tmp16        [+0]

***** BB05
STMT00009 ( 0x033[--] ... ??? )
     ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
     (  3,  2) [000021] ----------- arg0 in rcx             \--*  LCL_VAR   int    V13 tmp3         

***** BB05
STMT00010 ( 0x038[E-] ... ??? )
     (  1,  1) [000023] -----------                         *  NO_OP     void  

***** BB05
STMT00011 ( 0x039[E-] ... 0x043 )
     ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
     (  3, 10) [000116] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'String------'


***** BB05
STMT00012 ( 0x043[E-] ... ??? )
     (  1,  1) [000026] -----------                         *  NO_OP     void  

***** BB05
STMT00013 ( 0x044[E-] ... 0x049 )
     (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
     (  3, 10) [000117] H----------                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


***** BB05
STMT00014 ( 0x04A[E-] ... 0x05B )
     ( 22, 21) [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
     ( 18, 18) [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
     (  3, 10) [000030] H---------- arg0 in rcx                +--*  CNS_INT(h) long   0x7ffd086d1a48 class
     (  1,  1) [000029] ----------- arg1 in rdx                \--*  CNS_INT   long   3

***** BB05
STMT00015 ( 0x050[--] ... ??? )
     ( 27, 23) [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
     ( 17, 16) [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
     (  3, 10) [000035] H---------- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d21c8 field

***** BB05
STMT00016 ( ??? ... ??? )
     ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
     (  3,  2) [000034] ----------- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
     (  3,  4) [000039] ----------- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

***** BB05
STMT00017 ( 0x05B[--] ... ??? )
     (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
     (  3,  2) [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB05
STMT00018 ( 0x05C[E-] ... 0x064 )
     ( 25, 16) [000045] DACXG------                         *  STORE_LCL_VAR ref    V16 tmp6         
     ( 21, 13) [000044] --CXG------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
     (  3,  2) [000041] ----------- arg0 in rcx                +--*  LCL_VAR   ref    V03 loc2         
     (  3,  2) [000042] ----------- arg1 in rdx                +--*  LCL_VAR   ref    V04 loc3         
     (  1,  1) [000043] ----------- arg2 in r8                 \--*  CNS_INT   int    1

***** BB05
STMT00019 ( 0x064[--] ... ??? )
     (  0,  0) [000047] -----------                         *  NOP       void  

***** BB05
STMT00020 ( 0x065[E-] ... 0x071 )
     ( 22, 13) [000051] DACXG------                         *  STORE_LCL_VAR int    V17 tmp7         
     ( 18, 10) [000050] --CXG------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
     (  3,  2) [000048] ----------- this in rcx                +--*  LCL_VAR   ref    V03 loc2         
     (  1,  1) [000049] ----------- arg1 in rdx                \--*  CNS_INT   int    0

***** BB05
STMT00021 ( 0x06C[--] ... ??? )
     ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort)
     (  3,  2) [000052] ----------- arg0 in rcx             \--*  LCL_VAR   int    V17 tmp7         

***** BB05
STMT00022 ( 0x071[E-] ... ??? )
     (  1,  1) [000054] -----------                         *  NO_OP     void  

***** BB05
STMT00023 ( 0x072[E-] ... 0x083 )
     ( 22, 21) [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
     ( 18, 18) [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
     (  3, 10) [000056] H---------- arg0 in rcx                +--*  CNS_INT(h) long   0x7ffd086d1e30 class
     (  1,  1) [000055] ----------- arg1 in rdx                \--*  CNS_INT   long   5

***** BB05
STMT00024 ( 0x078[--] ... ??? )
     ( 27, 23) [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
     ( 17, 16) [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
     (  3, 10) [000061] H---------- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d2198 field

***** BB05
STMT00025 ( ??? ... ??? )
     ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
     (  3,  2) [000060] ----------- arg0 in rcx             +--*  LCL_VAR   ref    V18 tmp8         
     (  3,  4) [000065] ----------- arg1 in rdx             \--*  LCL_FLD   ref    V19 tmp9         [+0]

***** BB05
STMT00026 ( 0x083[--] ... ??? )
     (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
     (  3,  2) [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

***** BB05
STMT00027 ( 0x085[E-] ... 0x085 )
     (  1,  1) [000067] -----------                         *  NO_OP     void  

***** BB05
STMT00028 ( 0x086[E-] ... 0x08E )
     ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
     ( 10, 12) [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
     (  3,  2) [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
     (  1,  1) [000069] -----------                            \--*  CNS_INT   int    0

***** BB05
STMT00029 ( 0x090[E-] ... 0x093 )
     ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
     ( 10,  7) [000121] -A---------                         \--*  COMMA     long  
     (  7,  5) [000118] DA---------                            +--*  STORE_LCL_VAR long   V27 tmp17        
     (  3,  2) [000072] -----------                            |  \--*  LCL_VAR   byref  V07 loc6         
     (  3,  2) [000119] -----------                            \--*  LCL_VAR   long   V27 tmp17        

***** BB05
STMT00030 ( 0x095[E-] ... 0x095 )
     (  1,  1) [000075] -----------                         *  NO_OP     void  

***** BB05
STMT00031 ( 0x096[E-] ... 0x09D )
     ( 21, 11) [000078] DACXG------                         *  STORE_LCL_VAR ref    V20 tmp10        
     ( 17,  8) [000077] --CXG------                         \--*  CALL      ref    System.String:.ctor(ulong):this
     (  3,  2) [000076] ----------- arg0 in rcx                \--*  LCL_VAR   long   V06 loc5         

***** BB05
STMT00032 ( 0x09D[--] ... ??? )
     (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
     (  3,  2) [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

***** BB05
STMT00033 ( 0x09F[E-] ... 0x09F )
     (  1,  1) [000081] -----------                         *  NO_OP     void  

***** BB05
STMT00034 ( 0x0A0[E-] ... 0x0A2 )
     (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
     (  2,  3) [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
     (  1,  1) [000082] -----------                            \--*  CNS_INT   int    0

***** BB05
STMT00035 ( 0x0A4[E-] ... 0x0A4 )
     (  1,  1) [000085] -----------                         *  NO_OP     void  

***** BB05
STMT00036 ( 0x0A5[E-] ... 0x0AF )
     (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
     (  3, 10) [000122] H----------                         \--*  CNS_INT(h) ref     'Main Vector512: '


***** BB05
STMT00037 ( ??? ... ??? )
     (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
     (  1,  1) [000087] -----------                         \--*  CNS_INT   int    1

***** BB05
STMT00038 ( 0x0AF[--] ... ??? )
     (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8         
     (  3,  2) [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

***** BB05
STMT00039 ( ??? ... 0x0C2 )
     ( 21, 12) [000095] DACXG------                         *  STORE_LCL_VAR ref    V23 tmp13        
     ( 17,  9) [000094] --CXG------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
     (  3,  3) [000093] ----------- this in rcx                \--*  LCL_ADDR  long   V09 loc8         [+0]

***** BB05
STMT00040 ( 0x0B8[--] ... ??? )
     ( 24, 14) [000098] DACXG------                         *  STORE_LCL_VAR ref    V24 tmp14        
     ( 20, 11) [000097] --CXG------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
     (  3,  2) [000089] ----------- arg0 in rcx                +--*  LCL_VAR   ref    V21 tmp11        
     (  3,  2) [000096] ----------- arg1 in rdx                \--*  LCL_VAR   ref    V23 tmp13        

***** BB05
STMT00041 ( 0x0BD[--] ... ??? )
     ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
     (  3,  2) [000099] ----------- arg0 in rcx             \--*  LCL_VAR   ref    V24 tmp14        

***** BB05
STMT00042 ( 0x0C2[E-] ... ??? )
     (  1,  1) [000101] -----------                         *  NO_OP     void  

***** BB05
STMT00043 ( 0x0C3[E-] ... 0x0C3 )
     (  0,  0) [000102] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Set block order
*************** In fgSetBlockOrder()
The biggest BB has    8 tree nodes

*************** Finishing PHASE Set block order
Trees after Set block order

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
N001 (  0,  0) [000000] -----------                         *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00045 ( ??? ... ??? )
N005 (  9, 16) [000123] ----G------                         *  JTRUE     void  
N004 (  7, 14) [000106] J---G--N---                         \--*  EQ        int   
N002 (  5, 12) [000104] n---G------                            +--*  IND       int   
N001 (  3, 10) [000103] H----------                            |  \--*  CNS_INT(h) long   0x7ffd08511d48 global ptr
N003 (  1,  1) [000105] -----------                            \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00046 ( ??? ... ??? )
N001 ( 14,  5) [000107] --C-G-?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}

***** BB05
STMT00001 ( 0x000[E-] ... 0x000 )
N001 (  1,  1) [000001] -----------                         *  NO_OP     void  

***** BB05
STMT00002 ( 0x001[E-] ... 0x010 )
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
N001 (  3,  3) [000004] ----------- this in rcx             +--*  LCL_ADDR  long   V11 tmp1         [+0]
N002 (  3, 10) [000002] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000003] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00003 ( 0x010[--] ... ??? )
N002 ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
N001 (  9,  6) [000006] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB05
STMT00004 ( 0x011[E-] ... 0x020 )
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
N001 (  3,  3) [000010] ----------- this in rcx             +--*  LCL_ADDR  long   V12 tmp2         [+0]
N002 (  3, 10) [000008] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000009] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00005 ( 0x020[--] ... ??? )
N002 ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
N001 (  9,  6) [000012] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB05
STMT00006 ( 0x021[E-] ... 0x02B )
N002 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
N001 (  3, 10) [000111] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii------'


***** BB05
STMT00007 ( 0x02B[E-] ... ??? )
N001 (  1,  1) [000016] -----------                         *  NO_OP     void  

***** BB05
STMT00008 ( 0x02C[E-] ... 0x038 )
N008 ( 68, 42) [000020] DACXG------                         *  STORE_LCL_VAR int    V13 tmp3         
N007 ( 64, 39) [000019] -ACXG------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
N002 ( 19, 13) [000112] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V25 tmp15        
N001 (  9,  6) [000017] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
N004 ( 19, 13) [000113] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V26 tmp16        
N003 (  9,  6) [000018] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
N005 (  3,  3) [000114] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V25 tmp15        [+0]
N006 (  3,  3) [000115] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V26 tmp16        [+0]

***** BB05
STMT00009 ( 0x033[--] ... ??? )
N002 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
N001 (  3,  2) [000021] ----------- arg0 in rcx             \--*  LCL_VAR   int    V13 tmp3         

***** BB05
STMT00010 ( 0x038[E-] ... ??? )
N001 (  1,  1) [000023] -----------                         *  NO_OP     void  

***** BB05
STMT00011 ( 0x039[E-] ... 0x043 )
N002 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
N001 (  3, 10) [000116] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'String------'


***** BB05
STMT00012 ( 0x043[E-] ... ??? )
N001 (  1,  1) [000026] -----------                         *  NO_OP     void  

***** BB05
STMT00013 ( 0x044[E-] ... 0x049 )
N002 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
N001 (  3, 10) [000117] H----------                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


***** BB05
STMT00014 ( 0x04A[E-] ... 0x05B )
N004 ( 22, 21) [000032] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
N003 ( 18, 18) [000031] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
N001 (  3, 10) [000030] H---------- arg0 in rcx                +--*  CNS_INT(h) long   0x7ffd086d1a48 class
N002 (  1,  1) [000029] ----------- arg1 in rdx                \--*  CNS_INT   long   3

***** BB05
STMT00015 ( 0x050[--] ... ??? )
N003 ( 27, 23) [000038] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N002 ( 17, 16) [000036] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
N001 (  3, 10) [000035] H---------- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d21c8 field

***** BB05
STMT00016 ( ??? ... ??? )
N003 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
N001 (  3,  2) [000034] ----------- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
N002 (  3,  4) [000039] ----------- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

***** BB05
STMT00017 ( 0x05B[--] ... ??? )
N002 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
N001 (  3,  2) [000033] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB05
STMT00018 ( 0x05C[E-] ... 0x064 )
N005 ( 25, 16) [000045] DACXG------                         *  STORE_LCL_VAR ref    V16 tmp6         
N004 ( 21, 13) [000044] --CXG------                         \--*  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
N001 (  3,  2) [000041] ----------- arg0 in rcx                +--*  LCL_VAR   ref    V03 loc2         
N002 (  3,  2) [000042] ----------- arg1 in rdx                +--*  LCL_VAR   ref    V04 loc3         
N003 (  1,  1) [000043] ----------- arg2 in r8                 \--*  CNS_INT   int    1

***** BB05
STMT00019 ( 0x064[--] ... ??? )
N001 (  0,  0) [000047] -----------                         *  NOP       void  

***** BB05
STMT00020 ( 0x065[E-] ... 0x071 )
N004 ( 22, 13) [000051] DACXG------                         *  STORE_LCL_VAR int    V17 tmp7         
N003 ( 18, 10) [000050] --CXG------                         \--*  CALL nullcheck int    System.String:get_Chars(int):ushort:this
N001 (  3,  2) [000048] ----------- this in rcx                +--*  LCL_VAR   ref    V03 loc2         
N002 (  1,  1) [000049] ----------- arg1 in rdx                \--*  CNS_INT   int    0

***** BB05
STMT00021 ( 0x06C[--] ... ??? )
N002 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort)
N001 (  3,  2) [000052] ----------- arg0 in rcx             \--*  LCL_VAR   int    V17 tmp7         

***** BB05
STMT00022 ( 0x071[E-] ... ??? )
N001 (  1,  1) [000054] -----------                         *  NO_OP     void  

***** BB05
STMT00023 ( 0x072[E-] ... 0x083 )
N004 ( 22, 21) [000058] DACXG------                         *  STORE_LCL_VAR ref    V18 tmp8         
N003 ( 18, 18) [000057] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
N001 (  3, 10) [000056] H---------- arg0 in rcx                +--*  CNS_INT(h) long   0x7ffd086d1e30 class
N002 (  1,  1) [000055] ----------- arg1 in rdx                \--*  CNS_INT   long   5

***** BB05
STMT00024 ( 0x078[--] ... ??? )
N003 ( 27, 23) [000064] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
N002 ( 17, 16) [000062] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
N001 (  3, 10) [000061] H---------- arg0 in rcx                \--*  CNS_INT(h) long   0x7ffd086d2198 field

***** BB05
STMT00025 ( ??? ... ??? )
N003 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
N001 (  3,  2) [000060] ----------- arg0 in rcx             +--*  LCL_VAR   ref    V18 tmp8         
N002 (  3,  4) [000065] ----------- arg1 in rdx             \--*  LCL_FLD   ref    V19 tmp9         [+0]

***** BB05
STMT00026 ( 0x083[--] ... ??? )
N002 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
N001 (  3,  2) [000059] -----------                         \--*  LCL_VAR   ref    V18 tmp8         

***** BB05
STMT00027 ( 0x085[E-] ... 0x085 )
N001 (  1,  1) [000067] -----------                         *  NO_OP     void  

***** BB05
STMT00028 ( 0x086[E-] ... 0x08E )
N004 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
N003 ( 10, 12) [000070] ---XG------                         \--*  INDEX_ADDR byref byte[]
N001 (  3,  2) [000068] -----------                            +--*  LCL_VAR   ref    V05 loc4         
N002 (  1,  1) [000069] -----------                            \--*  CNS_INT   int    0

***** BB05
STMT00029 ( 0x090[E-] ... 0x093 )
N005 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
N004 ( 10,  7) [000121] -A---------                         \--*  COMMA     long  
N002 (  7,  5) [000118] DA---------                            +--*  STORE_LCL_VAR long   V27 tmp17        
N001 (  3,  2) [000072] -----------                            |  \--*  LCL_VAR   byref  V07 loc6         
N003 (  3,  2) [000119] -----------                            \--*  LCL_VAR   long   V27 tmp17        

***** BB05
STMT00030 ( 0x095[E-] ... 0x095 )
N001 (  1,  1) [000075] -----------                         *  NO_OP     void  

***** BB05
STMT00031 ( 0x096[E-] ... 0x09D )
N003 ( 21, 11) [000078] DACXG------                         *  STORE_LCL_VAR ref    V20 tmp10        
N002 ( 17,  8) [000077] --CXG------                         \--*  CALL      ref    System.String:.ctor(ulong):this
N001 (  3,  2) [000076] ----------- arg0 in rcx                \--*  LCL_VAR   long   V06 loc5         

***** BB05
STMT00032 ( 0x09D[--] ... ??? )
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
N001 (  3,  2) [000079] -----------                         \--*  LCL_VAR   ref    V20 tmp10        

***** BB05
STMT00033 ( 0x09F[E-] ... 0x09F )
N001 (  1,  1) [000081] -----------                         *  NO_OP     void  

***** BB05
STMT00034 ( 0x0A0[E-] ... 0x0A2 )
N003 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
N002 (  2,  3) [000083] ---------U-                         \--*  CAST      long <- ulong <- uint
N001 (  1,  1) [000082] -----------                            \--*  CNS_INT   int    0

***** BB05
STMT00035 ( 0x0A4[E-] ... 0x0A4 )
N001 (  1,  1) [000085] -----------                         *  NO_OP     void  

***** BB05
STMT00036 ( 0x0A5[E-] ... 0x0AF )
N002 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
N001 (  3, 10) [000122] H----------                         \--*  CNS_INT(h) ref     'Main Vector512: '


***** BB05
STMT00037 ( ??? ... ??? )
N002 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
N001 (  1,  1) [000087] -----------                         \--*  CNS_INT   int    1

***** BB05
STMT00038 ( 0x0AF[--] ... ??? )
N002 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8         
N001 (  3,  2) [000091] -----------                         \--*  LCL_VAR   int    V22 tmp12        

***** BB05
STMT00039 ( ??? ... 0x0C2 )
N003 ( 21, 12) [000095] DACXG------                         *  STORE_LCL_VAR ref    V23 tmp13        
N002 ( 17,  9) [000094] --CXG------                         \--*  CALL      ref    System.Boolean:ToString():System.String:this
N001 (  3,  3) [000093] ----------- this in rcx                \--*  LCL_ADDR  long   V09 loc8         [+0]

***** BB05
STMT00040 ( 0x0B8[--] ... ??? )
N004 ( 24, 14) [000098] DACXG------                         *  STORE_LCL_VAR ref    V24 tmp14        
N003 ( 20, 11) [000097] --CXG------                         \--*  CALL      ref    System.String:Concat(System.String,System.String):System.String
N001 (  3,  2) [000089] ----------- arg0 in rcx                +--*  LCL_VAR   ref    V21 tmp11        
N002 (  3,  2) [000096] ----------- arg1 in rdx                \--*  LCL_VAR   ref    V23 tmp13        

***** BB05
STMT00041 ( 0x0BD[--] ... ??? )
N002 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
N001 (  3,  2) [000099] ----------- arg0 in rcx             \--*  LCL_VAR   ref    V24 tmp14        

***** BB05
STMT00042 ( 0x0C2[E-] ... ??? )
N001 (  1,  1) [000101] -----------                         *  NO_OP     void  

***** BB05
STMT00043 ( 0x0C3[E-] ... 0x0C3 )
N001 (  0,  0) [000102] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Stress gtSplitTree

*************** Finishing PHASE Stress gtSplitTree [no changes]

*************** Starting PHASE Expand runtime lookups

*************** Finishing PHASE Expand runtime lookups [no changes]

*************** Starting PHASE Expand static init
Nothing to expand.

*************** Finishing PHASE Expand static init [no changes]

*************** Starting PHASE Expand TLS access
Nothing to expand.

*************** Finishing PHASE Expand TLS access [no changes]

*************** Starting PHASE Insert GC Polls

*************** Finishing PHASE Insert GC Polls [no changes]

*************** Starting PHASE Determine first cold block
No procedure splitting will be done for this method

*************** Finishing PHASE Determine first cold block [no changes]

*************** Starting PHASE Rationalize IR

*************** Finishing PHASE Rationalize IR
Trees after Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] -----------                            NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr
                                                            /--*  t103   long   
N002 (  5, 12) [000104] n---G------                  t104 = *  IND       int   
N003 (  1,  1) [000105] -----------                  t105 =    CNS_INT   int    0
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N004 (  7, 14) [000106] J---G--N---                  t106 = *  EQ        int   
                                                            /--*  t106   int    
N005 (  9, 16) [000123] ----G------                         *  JTRUE     void  

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}
               [000124] -----------                            IL_OFFSET void   INLRT @ 0x000[E-]
N001 (  1,  1) [000001] -----------                            NO_OP     void  
               [000125] -----------                            IL_OFFSET void   INLRT @ 0x001[E-]
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t4     long   this in rcx
                                                            +--*  t2     long   arg1 in rdx
                                                            +--*  t3     int    arg2 in r8
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000126] -----------                            IL_OFFSET void   INLRT @ 0x010[--]
N001 (  9,  6) [000006] -----------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
                                                            /--*  t6     struct 
N002 ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000127] -----------                            IL_OFFSET void   INLRT @ 0x011[E-]
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t10    long   this in rcx
                                                            +--*  t8     long   arg1 in rdx
                                                            +--*  t9     int    arg2 in r8
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000128] -----------                            IL_OFFSET void   INLRT @ 0x020[--]
N001 (  9,  6) [000012] -----------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
                                                            /--*  t12    struct 
N002 ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000129] -----------                            IL_OFFSET void   INLRT @ 0x021[E-]
N001 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'

                                                            /--*  t111   ref    arg0 in rcx
N002 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000130] -----------                            IL_OFFSET void   INLRT @ 0x02B[E-]
N001 (  1,  1) [000016] -----------                            NO_OP     void  
               [000131] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-]
N001 (  9,  6) [000017] -----------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
                                                            /--*  t17    struct 
N002 ( 19, 13) [000112] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V25 tmp15        
N003 (  9,  6) [000018] -----------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
                                                            /--*  t18    struct 
N004 ( 19, 13) [000113] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V26 tmp16        
N005 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0]
N006 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0]
                                                            /--*  t114   long   arg0 in rcx
                                                            +--*  t115   long   arg1 in rdx
N007 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t19    int    
N008 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000132] -----------                            IL_OFFSET void   INLRT @ 0x033[--]
N001 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t21    int    arg0 in rcx
N002 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
               [000133] -----------                            IL_OFFSET void   INLRT @ 0x038[E-]
N001 (  1,  1) [000023] -----------                            NO_OP     void  
               [000134] -----------                            IL_OFFSET void   INLRT @ 0x039[E-]
N001 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'

                                                            /--*  t116   ref    arg0 in rcx
N002 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000135] -----------                            IL_OFFSET void   INLRT @ 0x043[E-]
N001 (  1,  1) [000026] -----------                            NO_OP     void  
               [000136] -----------                            IL_OFFSET void   INLRT @ 0x044[E-]
N001 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t117   ref    
N002 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000137] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-]
N001 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class
N002 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3
                                                            /--*  t30    long   arg0 in rcx
                                                            +--*  t29    long   arg1 in rdx
N003 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t31    ref    
N004 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000138] -----------                            IL_OFFSET void   INLRT @ 0x050[--]
N001 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field
                                                            /--*  t35    long   arg0 in rcx
N002 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t36    struct 
N003 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N001 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4         
N002 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t34    ref    arg0 in rcx
                                                            +--*  t39    ref    arg1 in rdx
N003 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000139] -----------                            IL_OFFSET void   INLRT @ 0x05B[--]
N001 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t33    ref    
N002 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000140] -----------                            IL_OFFSET void   INLRT @ 0x05C[E-]
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2         
N002 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3         
N003 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1
                                                            /--*  t41    ref    arg0 in rcx
                                                            +--*  t42    ref    arg1 in rdx
                                                            +--*  t43    int    arg2 in r8
N004 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t44    ref    
N005 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000141] -----------                            IL_OFFSET void   INLRT @ 0x064[--]
N001 (  0,  0) [000047] -----------                            NOP       void  
               [000142] -----------                            IL_OFFSET void   INLRT @ 0x065[E-]
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2         
N002 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0
                                                            /--*  t48    ref    this in rcx
                                                            +--*  t49    int    arg1 in rdx
N003 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this
                                                            /--*  t50    int    
N004 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000143] -----------                            IL_OFFSET void   INLRT @ 0x06C[--]
N001 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7         
                                                            /--*  t52    int    arg0 in rcx
N002 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000144] -----------                            IL_OFFSET void   INLRT @ 0x071[E-]
N001 (  1,  1) [000054] -----------                            NO_OP     void  
               [000145] -----------                            IL_OFFSET void   INLRT @ 0x072[E-]
N001 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class
N002 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5
                                                            /--*  t56    long   arg0 in rcx
                                                            +--*  t55    long   arg1 in rdx
N003 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t57    ref    
N004 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000146] -----------                            IL_OFFSET void   INLRT @ 0x078[--]
N001 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field
                                                            /--*  t61    long   arg0 in rcx
N002 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t62    struct 
N003 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
N001 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8         
N002 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0]
                                                            /--*  t60    ref    arg0 in rcx
                                                            +--*  t65    ref    arg1 in rdx
N003 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000147] -----------                            IL_OFFSET void   INLRT @ 0x083[--]
N001 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t59    ref    
N002 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000148] -----------                            IL_OFFSET void   INLRT @ 0x085[E-]
N001 (  1,  1) [000067] -----------                            NO_OP     void  
               [000149] -----------                            IL_OFFSET void   INLRT @ 0x086[E-]
N001 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4         
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0
                                                            /--*  t68    ref    
                                                            +--*  t69    int    
N003 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[]
                                                            /--*  t70    byref  
N004 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000150] -----------                            IL_OFFSET void   INLRT @ 0x090[E-]
N001 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6         
                                                            /--*  t72    byref  
N002 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17        
N003 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17        
                                                            /--*  t119   long   
N005 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000151] -----------                            IL_OFFSET void   INLRT @ 0x095[E-]
N001 (  1,  1) [000075] -----------                            NO_OP     void  
               [000152] -----------                            IL_OFFSET void   INLRT @ 0x096[E-]
N001 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5         
                                                            /--*  t76    long   arg0 in rcx
N002 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this
                                                            /--*  t77    ref    
N003 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000153] -----------                            IL_OFFSET void   INLRT @ 0x09D[--]
N001 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10        
                                                            /--*  t79    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000154] -----------                            IL_OFFSET void   INLRT @ 0x09F[E-]
N001 (  1,  1) [000081] -----------                            NO_OP     void  
               [000155] -----------                            IL_OFFSET void   INLRT @ 0x0A0[E-]
N001 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0
                                                            /--*  t82    int    
N002 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint
                                                            /--*  t83    long   
N003 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000156] -----------                            IL_OFFSET void   INLRT @ 0x0A4[E-]
N001 (  1,  1) [000085] -----------                            NO_OP     void  
               [000157] -----------                            IL_OFFSET void   INLRT @ 0x0A5[E-]
N001 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '

                                                            /--*  t122   ref    
N002 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
N001 (  1,  1) [000087] -----------                   t87 =    CNS_INT   int    1
                                                            /--*  t87    int    
N002 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000158] -----------                            IL_OFFSET void   INLRT @ 0x0AF[--]
N001 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12        
                                                            /--*  t91    int    
N002 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8         
N001 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0]
                                                            /--*  t93    long   this in rcx
N002 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this
                                                            /--*  t94    ref    
N003 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000159] -----------                            IL_OFFSET void   INLRT @ 0x0B8[--]
N001 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11        
N002 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13        
                                                            /--*  t89    ref    arg0 in rcx
                                                            +--*  t96    ref    arg1 in rdx
N003 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String
                                                            /--*  t97    ref    
N004 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000160] -----------                            IL_OFFSET void   INLRT @ 0x0BD[--]
N001 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14        
                                                            /--*  t99    ref    arg0 in rcx
N002 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000161] -----------                            IL_OFFSET void   INLRT @ 0x0C2[E-]
N001 (  1,  1) [000101] -----------                            NO_OP     void  
               [000162] -----------                            IL_OFFSET void   INLRT @ 0x0C3[E-]
N001 (  0,  0) [000102] -----------                            RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Do 'simple' lowering

*************** Finishing PHASE Do 'simple' lowering [no changes]

*************** Starting PHASE Lowering nodeinfo
compEnregLocals() is false, setting doNotEnreg flag for all locals.
Local V00 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V01 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V02 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V03 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V04 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V05 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V06 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V07 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V08 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V09 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V10 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V11 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V12 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V13 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V14 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V15 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V16 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V17 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V18 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V19 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V20 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V21 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V22 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V23 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V24 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V25 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V26 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V27 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set
Lowering JTRUE:
N001 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr
                                                            /--*  t103   long   
N002 (  5, 12) [000104] nc--G------                  t104 = *  IND       int   
N003 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N004 (  7, 14) [000106] J---G--N---                  t106 = *  EQ        int   
                                                            /--*  t106   int    
N005 (  9, 16) [000123] ----G------                         *  JTRUE     void  

Lowering condition:
N001 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr
                                                            /--*  t103   long   
N002 (  5, 12) [000104] nc--G------                  t104 = *  IND       int   
N003 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N004 (  7, 14) [000106] J---G--N---                  t106 = *  EQ        int   

Lowering JTRUE Result:
N001 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr
                                                            /--*  t103   long   
N002 (  5, 12) [000104] nc--G------                  t104 = *  IND       int   
N003 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N004 (  7, 14) [000106] ----G--N---                         *  CMP       void  
N005 (  9, 16) [000123] ----G------                            JCC       void   cond=UEQ

lowering call (before):
N001 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

args:
======

late:
======
Bumping outgoing arg space size from 0 to 32 for [000107]
lowering call (after):
N001 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

lowering call (before):
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t4     long   this in rcx
                                                            +--*  t2     long   arg1 in rdx
                                                            +--*  t3     int    arg2 in r8
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

args:
======

late:
======
lowering arg : N001 (  3,  3) [000004] -----------                         *  LCL_ADDR  long   V11 tmp1         [+0]
new node is :                [000163] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N002 (  3, 10) [000002] H----------                         *  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
new node is :                [000164] -----------                         *  PUTARG_REG long   REG rdx

lowering arg : N003 (  1,  4) [000003] -----------                         *  CNS_INT   int    0xF00
new node is :                [000165] -----------                         *  PUTARG_REG int    REG r8

results of lowering call:
N001 (  3, 10) [000166] H----------                  t166 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] n---G------                  t167 = *  IND       long  
lowering call (after):
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
                                                            /--*  t4     long   
               [000163] -----------                  t163 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t2     long   
               [000164] -----------                  t164 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t3     int    
               [000165] -----------                  t165 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t163   long   this in rcx
                                                            +--*  t164   long   arg1 in rdx
                                                            +--*  t165   int    arg2 in r8
                                                            +--*  t167   long   control expr
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

lowering store lcl var/field (before):
N001 (  9,  6) [000006] -----------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
                                                            /--*  t6     struct 
N002 ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         


Local V01 should not be enregistered because: written/read in a block op

Local V11 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N001 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
               [000168] Dc---------                  t168 =    LCL_ADDR  byref  V01 loc0         [+0]
                                                            /--*  t168   byref  
                                                            +--*  t6     struct 
N002 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering call (before):
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t10    long   this in rcx
                                                            +--*  t8     long   arg1 in rdx
                                                            +--*  t9     int    arg2 in r8
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

args:
======

late:
======
lowering arg : N001 (  3,  3) [000010] -----------                         *  LCL_ADDR  long   V12 tmp2         [+0]
new node is :                [000169] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N002 (  3, 10) [000008] H----------                         *  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
new node is :                [000170] -----------                         *  PUTARG_REG long   REG rdx

lowering arg : N003 (  1,  4) [000009] -----------                         *  CNS_INT   int    0xF00
new node is :                [000171] -----------                         *  PUTARG_REG int    REG r8

results of lowering call:
N001 (  3, 10) [000172] H----------                  t172 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t172   long   
N002 (  5, 12) [000173] n---G------                  t173 = *  IND       long  
lowering call (after):
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
                                                            /--*  t10    long   
               [000169] -----------                  t169 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t8     long   
               [000170] -----------                  t170 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t9     int    
               [000171] -----------                  t171 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000172] Hc---------                  t172 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t172   long   
N002 (  5, 12) [000173] nc--G------                  t173 = *  IND       long   REG NA
                                                            /--*  t169   long   this in rcx
                                                            +--*  t170   long   arg1 in rdx
                                                            +--*  t171   int    arg2 in r8
                                                            +--*  t173   long   control expr
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

lowering store lcl var/field (before):
N001 (  9,  6) [000012] -----------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
                                                            /--*  t12    struct 
N002 ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         


Local V02 should not be enregistered because: written/read in a block op

Local V12 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N001 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
               [000174] Dc---------                  t174 =    LCL_ADDR  byref  V02 loc1         [+0]
                                                            /--*  t174   byref  
                                                            +--*  t12    struct 
N002 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering call (before):
N001 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'

                                                            /--*  t111   ref    arg0 in rcx
N002 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

args:
======

late:
======
lowering arg : N001 (  3, 10) [000111] H----------                         *  CNS_INT(h) ref     'Ascii------'

new node is :                [000175] -----------                         *  PUTARG_REG ref    REG rcx

results of lowering call:
N001 (  3, 10) [000176] H----------                  t176 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t176   long   
N002 (  5, 12) [000177] n---G------                  t177 = *  IND       long  
lowering call (after):
N001 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'

                                                            /--*  t111   ref    
               [000175] -----------                  t175 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000176] Hc---------                  t176 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t176   long   
N002 (  5, 12) [000177] nc--G------                  t177 = *  IND       long   REG NA
                                                            /--*  t175   ref    arg0 in rcx
                                                            +--*  t177   long   control expr
N002 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

lowering store lcl var/field (before):
N001 (  9,  6) [000017] -----------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
                                                            /--*  t17    struct 
N002 ( 19, 13) [000112] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V25 tmp15        


Local V25 should not be enregistered because: written/read in a block op

Local V01 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N001 (  9,  6) [000017] -c---------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000178] Dc---------                  t178 =    LCL_ADDR  byref  V25 tmp15        [+0]
                                                            /--*  t178   byref  
                                                            +--*  t17    struct 
N002 ( 19, 13) [000112] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering store lcl var/field (before):
N003 (  9,  6) [000018] -----------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
                                                            /--*  t18    struct 
N004 ( 19, 13) [000113] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V26 tmp16        


Local V26 should not be enregistered because: written/read in a block op

Local V02 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N003 (  9,  6) [000018] -c---------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000179] Dc---------                  t179 =    LCL_ADDR  byref  V26 tmp16        [+0]
                                                            /--*  t179   byref  
                                                            +--*  t18    struct 
N004 ( 19, 13) [000113] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering call (before):
N005 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0]
N006 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0]
                                                            /--*  t114   long   arg0 in rcx
                                                            +--*  t115   long   arg1 in rdx
N007 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool

args:
======

late:
======
lowering arg : N005 (  3,  3) [000114] -----------                         *  LCL_ADDR  long   V25 tmp15        [+0]
new node is :                [000180] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N006 (  3,  3) [000115] -----------                         *  LCL_ADDR  long   V26 tmp16        [+0]
new node is :                [000181] -----------                         *  PUTARG_REG long   REG rdx

results of lowering call:
N001 (  3, 10) [000182] H----------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn
                                                            /--*  t182   long   
N002 (  5, 12) [000183] n---G------                  t183 = *  IND       long  
lowering call (after):
N005 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0]
                                                            /--*  t114   long   
               [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0]
                                                            /--*  t115   long   
               [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn
                                                            /--*  t182   long   
N002 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                            /--*  t180   long   arg0 in rcx
                                                            +--*  t181   long   arg1 in rdx
                                                            +--*  t183   long   control expr
N007 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool

lowering store lcl var/field (before):
N005 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0]
                                                            /--*  t114   long   
               [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0]
                                                            /--*  t115   long   
               [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn
                                                            /--*  t182   long   
N002 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                            /--*  t180   long   arg0 in rcx
                                                            +--*  t181   long   arg1 in rdx
                                                            +--*  t183   long   control expr
N007 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t19    int    
N008 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         

lowering store lcl var/field (after):
N005 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0]
                                                            /--*  t114   long   
               [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0]
                                                            /--*  t115   long   
               [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn
                                                            /--*  t182   long   
N002 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                            /--*  t180   long   arg0 in rcx
                                                            +--*  t181   long   arg1 in rdx
                                                            +--*  t183   long   control expr
N007 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t19    int    
N008 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         

lowering call (before):
N001 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t21    int    arg0 in rcx
N002 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)

args:
======

late:
======
lowering arg : N001 (  3,  2) [000021] -----------                         *  LCL_VAR   int    V13 tmp3         
new node is :                [000184] -----------                         *  PUTARG_REG int    REG rcx

results of lowering call:
N001 (  3, 10) [000185] H----------                  t185 =    CNS_INT(h) long   0x7ffd0868fc18 ftn
                                                            /--*  t185   long   
N002 (  5, 12) [000186] n---G------                  t186 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t21    int    
               [000184] -----------                  t184 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000185] Hc---------                  t185 =    CNS_INT(h) long   0x7ffd0868fc18 ftn
                                                            /--*  t185   long   
N002 (  5, 12) [000186] nc--G------                  t186 = *  IND       long   REG NA
                                                            /--*  t184   int    arg0 in rcx
                                                            +--*  t186   long   control expr
N002 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)

lowering call (before):
N001 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'

                                                            /--*  t116   ref    arg0 in rcx
N002 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

args:
======

late:
======
lowering arg : N001 (  3, 10) [000116] H----------                         *  CNS_INT(h) ref     'String------'

new node is :                [000187] -----------                         *  PUTARG_REG ref    REG rcx

results of lowering call:
N001 (  3, 10) [000188] H----------                  t188 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t188   long   
N002 (  5, 12) [000189] n---G------                  t189 = *  IND       long  
lowering call (after):
N001 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'

                                                            /--*  t116   ref    
               [000187] -----------                  t187 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000188] Hc---------                  t188 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t188   long   
N002 (  5, 12) [000189] nc--G------                  t189 = *  IND       long   REG NA
                                                            /--*  t187   ref    arg0 in rcx
                                                            +--*  t189   long   control expr
N002 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

lowering store lcl var/field (before):
N001 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t117   ref    
N002 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         

lowering store lcl var/field (after):
N001 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t117   ref    
N002 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         

lowering call (before):
N001 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class
N002 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3
                                                            /--*  t30    long   arg0 in rcx
                                                            +--*  t29    long   arg1 in rdx
N003 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC

args:
======

late:
======
lowering arg : N001 (  3, 10) [000030] H----------                         *  CNS_INT(h) long   0x7ffd086d1a48 class
new node is :                [000190] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N002 (  1,  1) [000029] -----------                         *  CNS_INT   long   3
new node is :                [000191] -----------                         *  PUTARG_REG long   REG rdx

lowering call (after):
N001 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class
                                                            /--*  t30    long   
               [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3
                                                            /--*  t29    long   
               [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                            /--*  t190   long   arg0 in rcx
                                                            +--*  t191   long   arg1 in rdx
N003 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC

lowering store lcl var/field (before):
N001 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class
                                                            /--*  t30    long   
               [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3
                                                            /--*  t29    long   
               [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                            /--*  t190   long   arg0 in rcx
                                                            +--*  t191   long   arg1 in rdx
N003 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t31    ref    
N004 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         

lowering store lcl var/field (after):
N001 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class
                                                            /--*  t30    long   
               [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3
                                                            /--*  t29    long   
               [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                            /--*  t190   long   arg0 in rcx
                                                            +--*  t191   long   arg1 in rdx
N003 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t31    ref    
N004 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         

lowering call (before):
N001 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field
                                                            /--*  t35    long   arg0 in rcx
N002 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD

args:
======

late:
======
lowering arg : N001 (  3, 10) [000035] H----------                         *  CNS_INT(h) long   0x7ffd086d21c8 field
new node is :                [000192] -----------                         *  PUTARG_REG long   REG rcx

lowering call (after):
N001 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field
                                                            /--*  t35    long   
               [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                            /--*  t192   long   arg0 in rcx
N002 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD

lowering store lcl var/field (before):
N001 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field
                                                            /--*  t35    long   
               [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                            /--*  t192   long   arg0 in rcx
N002 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t36    ref    
N003 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         

lowering store lcl var/field (after):
N001 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field
                                                            /--*  t35    long   
               [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                            /--*  t192   long   arg0 in rcx
N002 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t36    ref    
N003 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         

lowering call (before):
N001 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4         
N002 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t34    ref    arg0 in rcx
                                                            +--*  t39    ref    arg1 in rdx
N003 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)

args:
======

late:
======
lowering arg : N001 (  3,  2) [000034] -----------                         *  LCL_VAR   ref    V14 tmp4         
new node is :                [000193] -----------                         *  PUTARG_REG ref    REG rcx

lowering arg : N002 (  3,  4) [000039] -----------                         *  LCL_FLD   ref    V15 tmp5         [+0]
new node is :                [000194] -----------                         *  PUTARG_REG ref    REG rdx

lowering call (after):
N001 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t34    ref    
               [000193] -----------                  t193 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t39    ref    
               [000194] -----------                  t194 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t193   ref    arg0 in rcx
                                                            +--*  t194   ref    arg1 in rdx
N003 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)

lowering store lcl var/field (before):
N001 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t33    ref    
N002 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         

lowering store lcl var/field (after):
N001 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t33    ref    
N002 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         

lowering call (before):
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2         
N002 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3         
N003 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1
                                                            /--*  t41    ref    arg0 in rcx
                                                            +--*  t42    ref    arg1 in rdx
                                                            +--*  t43    int    arg2 in r8
N004 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]

args:
======

late:
======
lowering arg : N001 (  3,  2) [000041] -----------                         *  LCL_VAR   ref    V03 loc2         
new node is :                [000195] -----------                         *  PUTARG_REG ref    REG rcx

lowering arg : N002 (  3,  2) [000042] -----------                         *  LCL_VAR   ref    V04 loc3         
new node is :                [000196] -----------                         *  PUTARG_REG ref    REG rdx

lowering arg : N003 (  1,  1) [000043] -----------                         *  CNS_INT   int    1
new node is :                [000197] -----------                         *  PUTARG_REG int    REG r8

results of lowering call:
N001 (  3, 10) [000198] H----------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn
                                                            /--*  t198   long   
N002 (  5, 12) [000199] n---G------                  t199 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t41    ref    
               [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t42    ref    
               [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1
                                                            /--*  t43    int    
               [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn
                                                            /--*  t198   long   
N002 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                            /--*  t195   ref    arg0 in rcx
                                                            +--*  t196   ref    arg1 in rdx
                                                            +--*  t197   int    arg2 in r8
                                                            +--*  t199   long   control expr
N004 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]

lowering store lcl var/field (before):
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t41    ref    
               [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t42    ref    
               [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1
                                                            /--*  t43    int    
               [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn
                                                            /--*  t198   long   
N002 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                            /--*  t195   ref    arg0 in rcx
                                                            +--*  t196   ref    arg1 in rdx
                                                            +--*  t197   int    arg2 in r8
                                                            +--*  t199   long   control expr
N004 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t44    ref    
N005 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         

lowering store lcl var/field (after):
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t41    ref    
               [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t42    ref    
               [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1
                                                            /--*  t43    int    
               [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn
                                                            /--*  t198   long   
N002 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                            /--*  t195   ref    arg0 in rcx
                                                            +--*  t196   ref    arg1 in rdx
                                                            +--*  t197   int    arg2 in r8
                                                            +--*  t199   long   control expr
N004 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t44    ref    
N005 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         

lowering call (before):
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2         
N002 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0
                                                            /--*  t48    ref    this in rcx
                                                            +--*  t49    int    arg1 in rdx
N003 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this

args:
======

late:
======
lowering arg : N001 (  3,  2) [000048] -----------                         *  LCL_VAR   ref    V03 loc2         
new node is :                [000200] -----------                         *  PUTARG_REG ref    REG rcx

lowering arg : N002 (  1,  1) [000049] -----------                         *  CNS_INT   int    0
new node is :                [000201] -----------                         *  PUTARG_REG int    REG rdx

results of lowering call:
N001 (  3, 10) [000202] H----------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn
                                                            /--*  t202   long   
N002 (  5, 12) [000203] n---G------                  t203 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t48    ref    
               [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
N002 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0
                                                            /--*  t49    int    
               [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
N001 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn
                                                            /--*  t202   long   
N002 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                            /--*  t200   ref    this in rcx
                                                            +--*  t201   int    arg1 in rdx
                                                            +--*  t203   long   control expr
N003 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this

lowering store lcl var/field (before):
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t48    ref    
               [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
N002 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0
                                                            /--*  t49    int    
               [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
N001 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn
                                                            /--*  t202   long   
N002 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                            /--*  t200   ref    this in rcx
                                                            +--*  t201   int    arg1 in rdx
                                                            +--*  t203   long   control expr
N003 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this
                                                            /--*  t50    int    
N004 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7         

lowering store lcl var/field (after):
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t48    ref    
               [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
N002 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0
                                                            /--*  t49    int    
               [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
N001 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn
                                                            /--*  t202   long   
N002 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                            /--*  t200   ref    this in rcx
                                                            +--*  t201   int    arg1 in rdx
                                                            +--*  t203   long   control expr
N003 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this
                                                            /--*  t50    int    
N004 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7         

lowering call (before):
N001 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7         
                                                            /--*  t52    int    arg0 in rcx
N002 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort)

args:
======

late:
======
lowering arg : N001 (  3,  2) [000052] -----------                         *  LCL_VAR   int    V17 tmp7         
new node is :                [000204] -----------                         *  PUTARG_REG int    REG rcx

results of lowering call:
N001 (  3, 10) [000205] H----------                  t205 =    CNS_INT(h) long   0x7ffd0868fc30 ftn
                                                            /--*  t205   long   
N002 (  5, 12) [000206] n---G------                  t206 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7         
                                                            /--*  t52    int    
               [000204] -----------                  t204 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000205] Hc---------                  t205 =    CNS_INT(h) long   0x7ffd0868fc30 ftn
                                                            /--*  t205   long   
N002 (  5, 12) [000206] nc--G------                  t206 = *  IND       long   REG NA
                                                            /--*  t204   int    arg0 in rcx
                                                            +--*  t206   long   control expr
N002 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort)

lowering call (before):
N001 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class
N002 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5
                                                            /--*  t56    long   arg0 in rcx
                                                            +--*  t55    long   arg1 in rdx
N003 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC

args:
======

late:
======
lowering arg : N001 (  3, 10) [000056] H----------                         *  CNS_INT(h) long   0x7ffd086d1e30 class
new node is :                [000207] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N002 (  1,  1) [000055] -----------                         *  CNS_INT   long   5
new node is :                [000208] -----------                         *  PUTARG_REG long   REG rdx

lowering call (after):
N001 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class
                                                            /--*  t56    long   
               [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5
                                                            /--*  t55    long   
               [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                            /--*  t207   long   arg0 in rcx
                                                            +--*  t208   long   arg1 in rdx
N003 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC

lowering store lcl var/field (before):
N001 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class
                                                            /--*  t56    long   
               [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5
                                                            /--*  t55    long   
               [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                            /--*  t207   long   arg0 in rcx
                                                            +--*  t208   long   arg1 in rdx
N003 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t57    ref    
N004 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8         

lowering store lcl var/field (after):
N001 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class
                                                            /--*  t56    long   
               [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5
                                                            /--*  t55    long   
               [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                            /--*  t207   long   arg0 in rcx
                                                            +--*  t208   long   arg1 in rdx
N003 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t57    ref    
N004 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8         

lowering call (before):
N001 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field
                                                            /--*  t61    long   arg0 in rcx
N002 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD

args:
======

late:
======
lowering arg : N001 (  3, 10) [000061] H----------                         *  CNS_INT(h) long   0x7ffd086d2198 field
new node is :                [000209] -----------                         *  PUTARG_REG long   REG rcx

lowering call (after):
N001 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field
                                                            /--*  t61    long   
               [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                            /--*  t209   long   arg0 in rcx
N002 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD

lowering store lcl var/field (before):
N001 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field
                                                            /--*  t61    long   
               [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                            /--*  t209   long   arg0 in rcx
N002 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t62    ref    
N003 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         

lowering store lcl var/field (after):
N001 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field
                                                            /--*  t61    long   
               [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                            /--*  t209   long   arg0 in rcx
N002 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t62    ref    
N003 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         

lowering call (before):
N001 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8         
N002 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0]
                                                            /--*  t60    ref    arg0 in rcx
                                                            +--*  t65    ref    arg1 in rdx
N003 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)

args:
======

late:
======
lowering arg : N001 (  3,  2) [000060] -----------                         *  LCL_VAR   ref    V18 tmp8         
new node is :                [000210] -----------                         *  PUTARG_REG ref    REG rcx

lowering arg : N002 (  3,  4) [000065] -----------                         *  LCL_FLD   ref    V19 tmp9         [+0]
new node is :                [000211] -----------                         *  PUTARG_REG ref    REG rdx

lowering call (after):
N001 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t60    ref    
               [000210] -----------                  t210 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0]
                                                            /--*  t65    ref    
               [000211] -----------                  t211 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t210   ref    arg0 in rcx
                                                            +--*  t211   ref    arg1 in rdx
N003 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)

lowering store lcl var/field (before):
N001 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t59    ref    
N002 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         

lowering store lcl var/field (after):
N001 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t59    ref    
N002 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         

lowering store lcl var/field (before):
N001 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4         
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0
                                                            /--*  t68    ref    
                                                            +--*  t69    int    
N003 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[]
                                                            /--*  t70    byref  
N004 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         

lowering store lcl var/field (after):
N001 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4         
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0
                                                            /--*  t68    ref    
                                                            +--*  t69    int    
N003 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[]
                                                            /--*  t70    byref  
N004 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         

lowering store lcl var/field (before):
N001 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6         
                                                            /--*  t72    byref  
N002 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17        

lowering store lcl var/field (after):
N001 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6         
                                                            /--*  t72    byref  
N002 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17        

lowering store lcl var/field (before):
N003 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17        
                                                            /--*  t119   long   
N005 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         

lowering store lcl var/field (after):
N003 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17        
                                                            /--*  t119   long   
N005 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         

lowering call (before):
N001 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5         
                                                            /--*  t76    long   arg0 in rcx
N002 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this

args:
======

late:
======
lowering arg : N001 (  3,  2) [000076] -----------                         *  LCL_VAR   long   V06 loc5         
new node is :                [000212] -----------                         *  PUTARG_REG long   REG rcx

lowering call (after):
N001 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5         
                                                            /--*  t76    long   
               [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                            /--*  t212   long   arg0 in rcx
N002 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this

lowering store lcl var/field (before):
N001 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5         
                                                            /--*  t76    long   
               [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                            /--*  t212   long   arg0 in rcx
N002 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this
                                                            /--*  t77    ref    
N003 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10        

lowering store lcl var/field (after):
N001 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5         
                                                            /--*  t76    long   
               [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                            /--*  t212   long   arg0 in rcx
N002 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this
                                                            /--*  t77    ref    
N003 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10        

lowering store lcl var/field (before):
N001 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10        
                                                            /--*  t79    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         

lowering store lcl var/field (after):
N001 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10        
                                                            /--*  t79    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         

lowering store lcl var/field (before):
N001 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0
                                                            /--*  t82    int    
N002 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint
                                                            /--*  t83    long   
N003 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         

lowering store lcl var/field (after):
N001 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0
                                                            /--*  t82    int    
N002 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint
                                                            /--*  t83    long   
N003 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         

lowering store lcl var/field (before):
N001 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '

                                                            /--*  t122   ref    
N002 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        

lowering store lcl var/field (after):
N001 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '

                                                            /--*  t122   ref    
N002 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        

lowering store lcl var/field (before):
N001 (  1,  1) [000087] -----------                   t87 =    CNS_INT   int    1
                                                            /--*  t87    int    
N002 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        

lowering store lcl var/field (after):
N001 (  1,  1) [000087] -c---------                   t87 =    CNS_INT   int    1
                                                            /--*  t87    int    
N002 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        

lowering store lcl var/field (before):
N001 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12        
                                                            /--*  t91    int    
N002 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8         

lowering store lcl var/field (after):
N001 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12        
                                                            /--*  t91    int    
N002 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8         

lowering call (before):
N001 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0]
                                                            /--*  t93    long   this in rcx
N002 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this

args:
======

late:
======
lowering arg : N001 (  3,  3) [000093] -----------                         *  LCL_ADDR  long   V09 loc8         [+0]
new node is :                [000213] -----------                         *  PUTARG_REG long   REG rcx

results of lowering call:
N001 (  3, 10) [000214] H----------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn
                                                            /--*  t214   long   
N002 (  5, 12) [000215] n---G------                  t215 = *  IND       long  
lowering call (after):
N001 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0]
                                                            /--*  t93    long   
               [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
N001 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn
                                                            /--*  t214   long   
N002 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                            /--*  t213   long   this in rcx
                                                            +--*  t215   long   control expr
N002 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this

lowering store lcl var/field (before):
N001 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0]
                                                            /--*  t93    long   
               [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
N001 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn
                                                            /--*  t214   long   
N002 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                            /--*  t213   long   this in rcx
                                                            +--*  t215   long   control expr
N002 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this
                                                            /--*  t94    ref    
N003 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13        

lowering store lcl var/field (after):
N001 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0]
                                                            /--*  t93    long   
               [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
N001 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn
                                                            /--*  t214   long   
N002 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                            /--*  t213   long   this in rcx
                                                            +--*  t215   long   control expr
N002 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this
                                                            /--*  t94    ref    
N003 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13        

lowering call (before):
N001 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11        
N002 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13        
                                                            /--*  t89    ref    arg0 in rcx
                                                            +--*  t96    ref    arg1 in rdx
N003 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String

args:
======

late:
======
lowering arg : N001 (  3,  2) [000089] -----------                         *  LCL_VAR   ref    V21 tmp11        
new node is :                [000216] -----------                         *  PUTARG_REG ref    REG rcx

lowering arg : N002 (  3,  2) [000096] -----------                         *  LCL_VAR   ref    V23 tmp13        
new node is :                [000217] -----------                         *  PUTARG_REG ref    REG rdx

results of lowering call:
N001 (  3, 10) [000218] H----------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn
                                                            /--*  t218   long   
N002 (  5, 12) [000219] n---G------                  t219 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11        
                                                            /--*  t89    ref    
               [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13        
                                                            /--*  t96    ref    
               [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
N001 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn
                                                            /--*  t218   long   
N002 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                            /--*  t216   ref    arg0 in rcx
                                                            +--*  t217   ref    arg1 in rdx
                                                            +--*  t219   long   control expr
N003 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String

lowering store lcl var/field (before):
N001 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11        
                                                            /--*  t89    ref    
               [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13        
                                                            /--*  t96    ref    
               [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
N001 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn
                                                            /--*  t218   long   
N002 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                            /--*  t216   ref    arg0 in rcx
                                                            +--*  t217   ref    arg1 in rdx
                                                            +--*  t219   long   control expr
N003 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String
                                                            /--*  t97    ref    
N004 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14        

lowering store lcl var/field (after):
N001 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11        
                                                            /--*  t89    ref    
               [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13        
                                                            /--*  t96    ref    
               [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
N001 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn
                                                            /--*  t218   long   
N002 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                            /--*  t216   ref    arg0 in rcx
                                                            +--*  t217   ref    arg1 in rdx
                                                            +--*  t219   long   control expr
N003 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String
                                                            /--*  t97    ref    
N004 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14        

lowering call (before):
N001 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14        
                                                            /--*  t99    ref    arg0 in rcx
N002 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

args:
======

late:
======
lowering arg : N001 (  3,  2) [000099] -----------                         *  LCL_VAR   ref    V24 tmp14        
new node is :                [000220] -----------                         *  PUTARG_REG ref    REG rcx

results of lowering call:
N001 (  3, 10) [000221] H----------                  t221 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t221   long   
N002 (  5, 12) [000222] n---G------                  t222 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14        
                                                            /--*  t99    ref    
               [000220] -----------                  t220 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000221] Hc---------                  t221 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t221   long   
N002 (  5, 12) [000222] nc--G------                  t222 = *  IND       long   REG NA
                                                            /--*  t220   ref    arg0 in rcx
                                                            +--*  t222   long   control expr
N002 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

lowering GT_RETURN
N001 (  0,  0) [000102] -----------                         *  RETURN    void  
============Lower has completed modifying nodes.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] -----------                            NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr
                                                            /--*  t103   long   
N002 (  5, 12) [000104] nc--G------                  t104 = *  IND       int   
N003 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N004 (  7, 14) [000106] ----G--N---                         *  CMP       void  
N005 (  9, 16) [000123] ----G------                            JCC       void   cond=UEQ

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}
               [000124] -----------                            IL_OFFSET void   INLRT @ 0x000[E-]
N001 (  1,  1) [000001] -----------                            NO_OP     void  
               [000125] -----------                            IL_OFFSET void   INLRT @ 0x001[E-]
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
                                                            /--*  t4     long   
               [000163] -----------                  t163 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t2     long   
               [000164] -----------                  t164 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t3     int    
               [000165] -----------                  t165 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t163   long   this in rcx
                                                            +--*  t164   long   arg1 in rdx
                                                            +--*  t165   int    arg2 in r8
                                                            +--*  t167   long   control expr
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000126] -----------                            IL_OFFSET void   INLRT @ 0x010[--]
N001 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
               [000168] Dc---------                  t168 =    LCL_ADDR  byref  V01 loc0         [+0]
                                                            /--*  t168   byref  
                                                            +--*  t6     struct 
N002 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000127] -----------                            IL_OFFSET void   INLRT @ 0x011[E-]
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
                                                            /--*  t10    long   
               [000169] -----------                  t169 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t8     long   
               [000170] -----------                  t170 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t9     int    
               [000171] -----------                  t171 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000172] Hc---------                  t172 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t172   long   
N002 (  5, 12) [000173] nc--G------                  t173 = *  IND       long   REG NA
                                                            /--*  t169   long   this in rcx
                                                            +--*  t170   long   arg1 in rdx
                                                            +--*  t171   int    arg2 in r8
                                                            +--*  t173   long   control expr
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000128] -----------                            IL_OFFSET void   INLRT @ 0x020[--]
N001 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
               [000174] Dc---------                  t174 =    LCL_ADDR  byref  V02 loc1         [+0]
                                                            /--*  t174   byref  
                                                            +--*  t12    struct 
N002 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000129] -----------                            IL_OFFSET void   INLRT @ 0x021[E-]
N001 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'

                                                            /--*  t111   ref    
               [000175] -----------                  t175 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000176] Hc---------                  t176 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t176   long   
N002 (  5, 12) [000177] nc--G------                  t177 = *  IND       long   REG NA
                                                            /--*  t175   ref    arg0 in rcx
                                                            +--*  t177   long   control expr
N002 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000130] -----------                            IL_OFFSET void   INLRT @ 0x02B[E-]
N001 (  1,  1) [000016] -----------                            NO_OP     void  
               [000131] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-]
N001 (  9,  6) [000017] -c---------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000178] Dc---------                  t178 =    LCL_ADDR  byref  V25 tmp15        [+0]
                                                            /--*  t178   byref  
                                                            +--*  t17    struct 
N002 ( 19, 13) [000112] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N003 (  9,  6) [000018] -c---------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000179] Dc---------                  t179 =    LCL_ADDR  byref  V26 tmp16        [+0]
                                                            /--*  t179   byref  
                                                            +--*  t18    struct 
N004 ( 19, 13) [000113] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N005 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0]
                                                            /--*  t114   long   
               [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0]
                                                            /--*  t115   long   
               [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn
                                                            /--*  t182   long   
N002 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                            /--*  t180   long   arg0 in rcx
                                                            +--*  t181   long   arg1 in rdx
                                                            +--*  t183   long   control expr
N007 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t19    int    
N008 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000132] -----------                            IL_OFFSET void   INLRT @ 0x033[--]
N001 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t21    int    
               [000184] -----------                  t184 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000185] Hc---------                  t185 =    CNS_INT(h) long   0x7ffd0868fc18 ftn
                                                            /--*  t185   long   
N002 (  5, 12) [000186] nc--G------                  t186 = *  IND       long   REG NA
                                                            /--*  t184   int    arg0 in rcx
                                                            +--*  t186   long   control expr
N002 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
               [000133] -----------                            IL_OFFSET void   INLRT @ 0x038[E-]
N001 (  1,  1) [000023] -----------                            NO_OP     void  
               [000134] -----------                            IL_OFFSET void   INLRT @ 0x039[E-]
N001 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'

                                                            /--*  t116   ref    
               [000187] -----------                  t187 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000188] Hc---------                  t188 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t188   long   
N002 (  5, 12) [000189] nc--G------                  t189 = *  IND       long   REG NA
                                                            /--*  t187   ref    arg0 in rcx
                                                            +--*  t189   long   control expr
N002 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000135] -----------                            IL_OFFSET void   INLRT @ 0x043[E-]
N001 (  1,  1) [000026] -----------                            NO_OP     void  
               [000136] -----------                            IL_OFFSET void   INLRT @ 0x044[E-]
N001 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t117   ref    
N002 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000137] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-]
N001 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class
                                                            /--*  t30    long   
               [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3
                                                            /--*  t29    long   
               [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                            /--*  t190   long   arg0 in rcx
                                                            +--*  t191   long   arg1 in rdx
N003 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t31    ref    
N004 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000138] -----------                            IL_OFFSET void   INLRT @ 0x050[--]
N001 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field
                                                            /--*  t35    long   
               [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                            /--*  t192   long   arg0 in rcx
N002 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t36    ref    
N003 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N001 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t34    ref    
               [000193] -----------                  t193 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t39    ref    
               [000194] -----------                  t194 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t193   ref    arg0 in rcx
                                                            +--*  t194   ref    arg1 in rdx
N003 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000139] -----------                            IL_OFFSET void   INLRT @ 0x05B[--]
N001 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t33    ref    
N002 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000140] -----------                            IL_OFFSET void   INLRT @ 0x05C[E-]
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t41    ref    
               [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t42    ref    
               [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1
                                                            /--*  t43    int    
               [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn
                                                            /--*  t198   long   
N002 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                            /--*  t195   ref    arg0 in rcx
                                                            +--*  t196   ref    arg1 in rdx
                                                            +--*  t197   int    arg2 in r8
                                                            +--*  t199   long   control expr
N004 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t44    ref    
N005 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000141] -----------                            IL_OFFSET void   INLRT @ 0x064[--]
N001 (  0,  0) [000047] -----------                            NOP       void  
               [000142] -----------                            IL_OFFSET void   INLRT @ 0x065[E-]
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t48    ref    
               [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
N002 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0
                                                            /--*  t49    int    
               [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
N001 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn
                                                            /--*  t202   long   
N002 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                            /--*  t200   ref    this in rcx
                                                            +--*  t201   int    arg1 in rdx
                                                            +--*  t203   long   control expr
N003 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this
                                                            /--*  t50    int    
N004 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000143] -----------                            IL_OFFSET void   INLRT @ 0x06C[--]
N001 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7         
                                                            /--*  t52    int    
               [000204] -----------                  t204 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000205] Hc---------                  t205 =    CNS_INT(h) long   0x7ffd0868fc30 ftn
                                                            /--*  t205   long   
N002 (  5, 12) [000206] nc--G------                  t206 = *  IND       long   REG NA
                                                            /--*  t204   int    arg0 in rcx
                                                            +--*  t206   long   control expr
N002 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000144] -----------                            IL_OFFSET void   INLRT @ 0x071[E-]
N001 (  1,  1) [000054] -----------                            NO_OP     void  
               [000145] -----------                            IL_OFFSET void   INLRT @ 0x072[E-]
N001 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class
                                                            /--*  t56    long   
               [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5
                                                            /--*  t55    long   
               [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                            /--*  t207   long   arg0 in rcx
                                                            +--*  t208   long   arg1 in rdx
N003 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t57    ref    
N004 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000146] -----------                            IL_OFFSET void   INLRT @ 0x078[--]
N001 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field
                                                            /--*  t61    long   
               [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                            /--*  t209   long   arg0 in rcx
N002 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t62    ref    
N003 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
N001 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t60    ref    
               [000210] -----------                  t210 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0]
                                                            /--*  t65    ref    
               [000211] -----------                  t211 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t210   ref    arg0 in rcx
                                                            +--*  t211   ref    arg1 in rdx
N003 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000147] -----------                            IL_OFFSET void   INLRT @ 0x083[--]
N001 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t59    ref    
N002 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000148] -----------                            IL_OFFSET void   INLRT @ 0x085[E-]
N001 (  1,  1) [000067] -----------                            NO_OP     void  
               [000149] -----------                            IL_OFFSET void   INLRT @ 0x086[E-]
N001 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4         
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0
                                                            /--*  t68    ref    
                                                            +--*  t69    int    
N003 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[]
                                                            /--*  t70    byref  
N004 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000150] -----------                            IL_OFFSET void   INLRT @ 0x090[E-]
N001 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6         
                                                            /--*  t72    byref  
N002 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17        
N003 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17        
                                                            /--*  t119   long   
N005 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000151] -----------                            IL_OFFSET void   INLRT @ 0x095[E-]
N001 (  1,  1) [000075] -----------                            NO_OP     void  
               [000152] -----------                            IL_OFFSET void   INLRT @ 0x096[E-]
N001 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5         
                                                            /--*  t76    long   
               [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                            /--*  t212   long   arg0 in rcx
N002 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this
                                                            /--*  t77    ref    
N003 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000153] -----------                            IL_OFFSET void   INLRT @ 0x09D[--]
N001 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10        
                                                            /--*  t79    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000154] -----------                            IL_OFFSET void   INLRT @ 0x09F[E-]
N001 (  1,  1) [000081] -----------                            NO_OP     void  
               [000155] -----------                            IL_OFFSET void   INLRT @ 0x0A0[E-]
N001 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0
                                                            /--*  t82    int    
N002 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint
                                                            /--*  t83    long   
N003 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000156] -----------                            IL_OFFSET void   INLRT @ 0x0A4[E-]
N001 (  1,  1) [000085] -----------                            NO_OP     void  
               [000157] -----------                            IL_OFFSET void   INLRT @ 0x0A5[E-]
N001 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '

                                                            /--*  t122   ref    
N002 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
N001 (  1,  1) [000087] -c---------                   t87 =    CNS_INT   int    1
                                                            /--*  t87    int    
N002 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000158] -----------                            IL_OFFSET void   INLRT @ 0x0AF[--]
N001 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12        
                                                            /--*  t91    int    
N002 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8         
N001 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0]
                                                            /--*  t93    long   
               [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
N001 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn
                                                            /--*  t214   long   
N002 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                            /--*  t213   long   this in rcx
                                                            +--*  t215   long   control expr
N002 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this
                                                            /--*  t94    ref    
N003 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000159] -----------                            IL_OFFSET void   INLRT @ 0x0B8[--]
N001 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11        
                                                            /--*  t89    ref    
               [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13        
                                                            /--*  t96    ref    
               [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
N001 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn
                                                            /--*  t218   long   
N002 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                            /--*  t216   ref    arg0 in rcx
                                                            +--*  t217   ref    arg1 in rdx
                                                            +--*  t219   long   control expr
N003 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String
                                                            /--*  t97    ref    
N004 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000160] -----------                            IL_OFFSET void   INLRT @ 0x0BD[--]
N001 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14        
                                                            /--*  t99    ref    
               [000220] -----------                  t220 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000221] Hc---------                  t221 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t221   long   
N002 (  5, 12) [000222] nc--G------                  t222 = *  IND       long   REG NA
                                                            /--*  t220   ref    arg0 in rcx
                                                            +--*  t222   long   control expr
N002 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000161] -----------                            IL_OFFSET void   INLRT @ 0x0C2[E-]
N001 (  1,  1) [000101] -----------                            NO_OP     void  
               [000162] -----------                            IL_OFFSET void   INLRT @ 0x0C3[E-]
N001 (  0,  0) [000102] -----------                            RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*** lvaComputeRefCounts ***
*************** In fgLocalVarLiveness()
; Initial local variable assignments
;
;  V00 arg0              ref  do-not-enreg[] class-hnd <System.String[]>
;  V01 loc0           struct <System.ReadOnlySpan`1, 16> do-not-enreg[S] <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1           struct <System.ReadOnlySpan`1, 16> do-not-enreg[S] <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2              ref  do-not-enreg[] class-hnd exact <System.String>
;  V04 loc3              ref  do-not-enreg[] class-hnd exact <ushort[]>
;  V05 loc4              ref  do-not-enreg[] class-hnd exact <byte[]>
;  V06 loc5             long  do-not-enreg[]
;  V07 loc6            byref  do-not-enreg[] pinned
;  V08 loc7              ref  do-not-enreg[] class-hnd exact <System.String>
;  V09 loc8             bool  do-not-enreg[X] addr-exposed ld-addr-op
;  V10 OutArgs        struct <32> do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
;  V11 tmp1           struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V12 tmp2           struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V13 tmp3              int  do-not-enreg[] "impSpillStackEnsure"
;  V14 tmp4              ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <ushort[]>
;  V15 tmp5           struct <System.RuntimeFieldHandle, 8> do-not-enreg[S] "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V16 tmp6              ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <System.String[]>
;  V17 tmp7              int  do-not-enreg[] "impSpillStackEnsure"
;  V18 tmp8              ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <byte[]>
;  V19 tmp9           struct <System.RuntimeFieldHandle, 8> do-not-enreg[S] "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V20 tmp10             ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <System.String>
;  V21 tmp11             ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <System.String>
;  V22 tmp12             int  do-not-enreg[] "impSpillStackEnsure"
;  V23 tmp13             ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <System.String>
;  V24 tmp14             ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <System.String>
;  V25 tmp15          struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V26 tmp16          struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V27 tmp17            long  do-not-enreg[] "Cast away GC"
In fgLocalVarLivenessInit
*************** In fgPerBlockLocalVarLiveness()
*************** In fgInterBlockLocalVarLiveness()
*************** In fgExtendDbgLifetimes()

Marking vars alive over their entire scope :

Local variable scopes = 10
    	VarNum 	LVNum 	      Name 	Beg 	End
Sorted by enter scope:
 0: 	00h 	00h 	  V00 arg0 	000h   	0C4h <-- next enter scope
 1: 	08h 	08h 	  V08 loc7 	000h   	0C4h
 2: 	07h 	07h 	  V07 loc6 	000h   	0C4h
 3: 	06h 	06h 	  V06 loc5 	000h   	0C4h
 4: 	05h 	05h 	  V05 loc4 	000h   	0C4h
 5: 	04h 	04h 	  V04 loc3 	000h   	0C4h
 6: 	03h 	03h 	  V03 loc2 	000h   	0C4h
 7: 	02h 	02h 	  V02 loc1 	000h   	0C4h
 8: 	01h 	01h 	  V01 loc0 	000h   	0C4h
 9: 	09h 	09h 	  V09 loc8 	000h   	0C4h
Sorted by exit scope:
 0: 	00h 	00h 	  V00 arg0 	000h   	0C4h <-- next exit scope
 1: 	08h 	08h 	  V08 loc7 	000h   	0C4h
 2: 	07h 	07h 	  V07 loc6 	000h   	0C4h
 3: 	06h 	06h 	  V06 loc5 	000h   	0C4h
 4: 	05h 	05h 	  V05 loc4 	000h   	0C4h
 5: 	04h 	04h 	  V04 loc3 	000h   	0C4h
 6: 	03h 	03h 	  V03 loc2 	000h   	0C4h
 7: 	02h 	02h 	  V02 loc1 	000h   	0C4h
 8: 	01h 	01h 	  V01 loc0 	000h   	0C4h
 9: 	09h 	09h 	  V09 loc8 	000h   	0C4h
Scope info: block BB01 marking in scope: {}
Scope info: block BB02 marking in scope: {}
Scope info: block BB03 marking in scope: {}
Scope info: block BB04 marking in scope: {}
Scope info: block BB05 marking in scope: {}

Debug scopes:
BB01: {}
BB02: {}
BB03: {}
BB04: {}
BB05: {}
Scope info: block BB01 UNmarking in scope: {}

BB liveness after fgExtendDbgLifetimes():

BB01 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB02 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB03 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB04 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB05 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap



*************** In fgRemoveDeadBlocks()
Removing unreachable blocks for fgRemoveDeadBlocks iteration #1
*************** In fgDebugCheckBBlist

*** lvaComputeRefCounts ***

*************** Finishing PHASE Lowering nodeinfo
Trees after Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] -----------                            NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr
                                                            /--*  t103   long   
N002 (  5, 12) [000104] nc--G------                  t104 = *  IND       int   
N003 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N004 (  7, 14) [000106] ----G--N---                         *  CMP       void  
N005 (  9, 16) [000123] ----G------                            JCC       void   cond=UEQ

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}
               [000124] -----------                            IL_OFFSET void   INLRT @ 0x000[E-]
N001 (  1,  1) [000001] -----------                            NO_OP     void  
               [000125] -----------                            IL_OFFSET void   INLRT @ 0x001[E-]
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
                                                            /--*  t4     long   
               [000163] -----------                  t163 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t2     long   
               [000164] -----------                  t164 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t3     int    
               [000165] -----------                  t165 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t163   long   this in rcx
                                                            +--*  t164   long   arg1 in rdx
                                                            +--*  t165   int    arg2 in r8
                                                            +--*  t167   long   control expr
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000126] -----------                            IL_OFFSET void   INLRT @ 0x010[--]
N001 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
               [000168] Dc---------                  t168 =    LCL_ADDR  byref  V01 loc0         [+0]
                                                            /--*  t168   byref  
                                                            +--*  t6     struct 
N002 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000127] -----------                            IL_OFFSET void   INLRT @ 0x011[E-]
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
                                                            /--*  t10    long   
               [000169] -----------                  t169 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t8     long   
               [000170] -----------                  t170 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t9     int    
               [000171] -----------                  t171 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000172] Hc---------                  t172 =    CNS_INT(h) long   0x7ffd08526a78 ftn
                                                            /--*  t172   long   
N002 (  5, 12) [000173] nc--G------                  t173 = *  IND       long   REG NA
                                                            /--*  t169   long   this in rcx
                                                            +--*  t170   long   arg1 in rdx
                                                            +--*  t171   int    arg2 in r8
                                                            +--*  t173   long   control expr
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000128] -----------                            IL_OFFSET void   INLRT @ 0x020[--]
N001 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
               [000174] Dc---------                  t174 =    LCL_ADDR  byref  V02 loc1         [+0]
                                                            /--*  t174   byref  
                                                            +--*  t12    struct 
N002 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000129] -----------                            IL_OFFSET void   INLRT @ 0x021[E-]
N001 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'

                                                            /--*  t111   ref    
               [000175] -----------                  t175 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000176] Hc---------                  t176 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t176   long   
N002 (  5, 12) [000177] nc--G------                  t177 = *  IND       long   REG NA
                                                            /--*  t175   ref    arg0 in rcx
                                                            +--*  t177   long   control expr
N002 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000130] -----------                            IL_OFFSET void   INLRT @ 0x02B[E-]
N001 (  1,  1) [000016] -----------                            NO_OP     void  
               [000131] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-]
N001 (  9,  6) [000017] -c---------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000178] Dc---------                  t178 =    LCL_ADDR  byref  V25 tmp15        [+0]
                                                            /--*  t178   byref  
                                                            +--*  t17    struct 
N002 ( 19, 13) [000112] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N003 (  9,  6) [000018] -c---------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000179] Dc---------                  t179 =    LCL_ADDR  byref  V26 tmp16        [+0]
                                                            /--*  t179   byref  
                                                            +--*  t18    struct 
N004 ( 19, 13) [000113] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N005 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0]
                                                            /--*  t114   long   
               [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0]
                                                            /--*  t115   long   
               [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn
                                                            /--*  t182   long   
N002 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                            /--*  t180   long   arg0 in rcx
                                                            +--*  t181   long   arg1 in rdx
                                                            +--*  t183   long   control expr
N007 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t19    int    
N008 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000132] -----------                            IL_OFFSET void   INLRT @ 0x033[--]
N001 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t21    int    
               [000184] -----------                  t184 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000185] Hc---------                  t185 =    CNS_INT(h) long   0x7ffd0868fc18 ftn
                                                            /--*  t185   long   
N002 (  5, 12) [000186] nc--G------                  t186 = *  IND       long   REG NA
                                                            /--*  t184   int    arg0 in rcx
                                                            +--*  t186   long   control expr
N002 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
               [000133] -----------                            IL_OFFSET void   INLRT @ 0x038[E-]
N001 (  1,  1) [000023] -----------                            NO_OP     void  
               [000134] -----------                            IL_OFFSET void   INLRT @ 0x039[E-]
N001 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'

                                                            /--*  t116   ref    
               [000187] -----------                  t187 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000188] Hc---------                  t188 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t188   long   
N002 (  5, 12) [000189] nc--G------                  t189 = *  IND       long   REG NA
                                                            /--*  t187   ref    arg0 in rcx
                                                            +--*  t189   long   control expr
N002 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000135] -----------                            IL_OFFSET void   INLRT @ 0x043[E-]
N001 (  1,  1) [000026] -----------                            NO_OP     void  
               [000136] -----------                            IL_OFFSET void   INLRT @ 0x044[E-]
N001 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t117   ref    
N002 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000137] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-]
N001 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class
                                                            /--*  t30    long   
               [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3
                                                            /--*  t29    long   
               [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                            /--*  t190   long   arg0 in rcx
                                                            +--*  t191   long   arg1 in rdx
N003 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t31    ref    
N004 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000138] -----------                            IL_OFFSET void   INLRT @ 0x050[--]
N001 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field
                                                            /--*  t35    long   
               [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                            /--*  t192   long   arg0 in rcx
N002 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t36    ref    
N003 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N001 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t34    ref    
               [000193] -----------                  t193 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t39    ref    
               [000194] -----------                  t194 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t193   ref    arg0 in rcx
                                                            +--*  t194   ref    arg1 in rdx
N003 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000139] -----------                            IL_OFFSET void   INLRT @ 0x05B[--]
N001 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t33    ref    
N002 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000140] -----------                            IL_OFFSET void   INLRT @ 0x05C[E-]
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t41    ref    
               [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t42    ref    
               [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1
                                                            /--*  t43    int    
               [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn
                                                            /--*  t198   long   
N002 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                            /--*  t195   ref    arg0 in rcx
                                                            +--*  t196   ref    arg1 in rdx
                                                            +--*  t197   int    arg2 in r8
                                                            +--*  t199   long   control expr
N004 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t44    ref    
N005 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000141] -----------                            IL_OFFSET void   INLRT @ 0x064[--]
N001 (  0,  0) [000047] -----------                            NOP       void  
               [000142] -----------                            IL_OFFSET void   INLRT @ 0x065[E-]
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t48    ref    
               [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
N002 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0
                                                            /--*  t49    int    
               [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
N001 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn
                                                            /--*  t202   long   
N002 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                            /--*  t200   ref    this in rcx
                                                            +--*  t201   int    arg1 in rdx
                                                            +--*  t203   long   control expr
N003 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this
                                                            /--*  t50    int    
N004 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7         
               [000143] -----------                            IL_OFFSET void   INLRT @ 0x06C[--]
N001 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7         
                                                            /--*  t52    int    
               [000204] -----------                  t204 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000205] Hc---------                  t205 =    CNS_INT(h) long   0x7ffd0868fc30 ftn
                                                            /--*  t205   long   
N002 (  5, 12) [000206] nc--G------                  t206 = *  IND       long   REG NA
                                                            /--*  t204   int    arg0 in rcx
                                                            +--*  t206   long   control expr
N002 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort)
               [000144] -----------                            IL_OFFSET void   INLRT @ 0x071[E-]
N001 (  1,  1) [000054] -----------                            NO_OP     void  
               [000145] -----------                            IL_OFFSET void   INLRT @ 0x072[E-]
N001 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class
                                                            /--*  t56    long   
               [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5
                                                            /--*  t55    long   
               [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                            /--*  t207   long   arg0 in rcx
                                                            +--*  t208   long   arg1 in rdx
N003 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t57    ref    
N004 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8         
               [000146] -----------                            IL_OFFSET void   INLRT @ 0x078[--]
N001 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field
                                                            /--*  t61    long   
               [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                            /--*  t209   long   arg0 in rcx
N002 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t62    ref    
N003 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9         
N001 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t60    ref    
               [000210] -----------                  t210 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0]
                                                            /--*  t65    ref    
               [000211] -----------                  t211 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t210   ref    arg0 in rcx
                                                            +--*  t211   ref    arg1 in rdx
N003 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000147] -----------                            IL_OFFSET void   INLRT @ 0x083[--]
N001 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8         
                                                            /--*  t59    ref    
N002 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4         
               [000148] -----------                            IL_OFFSET void   INLRT @ 0x085[E-]
N001 (  1,  1) [000067] -----------                            NO_OP     void  
               [000149] -----------                            IL_OFFSET void   INLRT @ 0x086[E-]
N001 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4         
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0
                                                            /--*  t68    ref    
                                                            +--*  t69    int    
N003 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[]
                                                            /--*  t70    byref  
N004 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000150] -----------                            IL_OFFSET void   INLRT @ 0x090[E-]
N001 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6         
                                                            /--*  t72    byref  
N002 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17        
N003 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17        
                                                            /--*  t119   long   
N005 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5         
               [000151] -----------                            IL_OFFSET void   INLRT @ 0x095[E-]
N001 (  1,  1) [000075] -----------                            NO_OP     void  
               [000152] -----------                            IL_OFFSET void   INLRT @ 0x096[E-]
N001 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5         
                                                            /--*  t76    long   
               [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                            /--*  t212   long   arg0 in rcx
N002 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this
                                                            /--*  t77    ref    
N003 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10        
               [000153] -----------                            IL_OFFSET void   INLRT @ 0x09D[--]
N001 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10        
                                                            /--*  t79    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7         
               [000154] -----------                            IL_OFFSET void   INLRT @ 0x09F[E-]
N001 (  1,  1) [000081] -----------                            NO_OP     void  
               [000155] -----------                            IL_OFFSET void   INLRT @ 0x0A0[E-]
N001 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0
                                                            /--*  t82    int    
N002 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint
                                                            /--*  t83    long   
N003 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6         
               [000156] -----------                            IL_OFFSET void   INLRT @ 0x0A4[E-]
N001 (  1,  1) [000085] -----------                            NO_OP     void  
               [000157] -----------                            IL_OFFSET void   INLRT @ 0x0A5[E-]
N001 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '

                                                            /--*  t122   ref    
N002 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11        
N001 (  1,  1) [000087] -c---------                   t87 =    CNS_INT   int    1
                                                            /--*  t87    int    
N002 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12        
               [000158] -----------                            IL_OFFSET void   INLRT @ 0x0AF[--]
N001 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12        
                                                            /--*  t91    int    
N002 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8         
N001 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0]
                                                            /--*  t93    long   
               [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
N001 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn
                                                            /--*  t214   long   
N002 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                            /--*  t213   long   this in rcx
                                                            +--*  t215   long   control expr
N002 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this
                                                            /--*  t94    ref    
N003 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13        
               [000159] -----------                            IL_OFFSET void   INLRT @ 0x0B8[--]
N001 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11        
                                                            /--*  t89    ref    
               [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13        
                                                            /--*  t96    ref    
               [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
N001 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn
                                                            /--*  t218   long   
N002 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                            /--*  t216   ref    arg0 in rcx
                                                            +--*  t217   ref    arg1 in rdx
                                                            +--*  t219   long   control expr
N003 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String
                                                            /--*  t97    ref    
N004 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14        
               [000160] -----------                            IL_OFFSET void   INLRT @ 0x0BD[--]
N001 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14        
                                                            /--*  t99    ref    
               [000220] -----------                  t220 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000221] Hc---------                  t221 =    CNS_INT(h) long   0x7ffd0868fd38 ftn
                                                            /--*  t221   long   
N002 (  5, 12) [000222] nc--G------                  t222 = *  IND       long   REG NA
                                                            /--*  t220   ref    arg0 in rcx
                                                            +--*  t222   long   control expr
N002 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000161] -----------                            IL_OFFSET void   INLRT @ 0x0C2[E-]
N001 (  1,  1) [000101] -----------                            NO_OP     void  
               [000162] -----------                            IL_OFFSET void   INLRT @ 0x0C3[E-]
N001 (  0,  0) [000102] -----------                            RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Calculate stack level slots

*************** Finishing PHASE Calculate stack level slots [no changes]

*************** Starting PHASE Linear scan register alloc
Clearing modified regs.

buildIntervals ========

-----------------
LIVENESS:
-----------------
BB01
use: {}
def: {}
 in: {}
out: {}
BB02
use: {}
def: {}
 in: {}
out: {}
BB03
use: {}
def: {}
 in: {}
out: {}
BB04
use: {}
def: {}
 in: {}
out: {}
BB05
use: {}
def: {}
 in: {}
out: {}

FP callee save candidate vars: None

floatVarCount = 0; hasLoops = false, singleExit = true
TUPLE STYLE DUMP BEFORE LSRA
Start LSRA Block Sequence: 
Current block: BB01
	Succ block: BB02, Criteria: weight, Worklist: [BB02 ]
Current block: BB02
	Succ block: BB03, Criteria: weight, Worklist: [BB03 ]
	Succ block: BB04, Criteria: weight, Worklist: [BB03 BB04 ]
Current block: BB03
Current block: BB04
	Succ block: BB05, Criteria: bbNum, Worklist: [BB05 ]
Current block: BB05
Final LSRA Block Sequence:
BB01 (  1   )
BB02 (  1   ) critical-out
BB03 (  0.50)
BB04 (  1   ) critical-in
BB05 (  1   )

BB01 [???..???), preds={} succs={BB02}
=====
  N001.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N001.                    CNS_INT(h) 0x7ffd08511d48 global ptr
  N002.                    IND      
  N003.                    CNS_INT   0
  N004.                    CMP      
  N005.                    JCC       cond=UEQ

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N001.                    CALL help

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..0C4) (return), preds={BB04} succs={}
=====
  N000.                    IL_OFFSET INLRT @ 0x000[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x001[E-]
  N001. t4              =  LCL_ADDR  V11 tmp1         [+0]
  N000. t163            =  PUTARG_REG; t4
  N002. t2              =  CNS_INT(h) 0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N000. t164            =  PUTARG_REG; t2
  N003. t3              =  CNS_INT   0xF00
  N000. t165            =  PUTARG_REG; t3
  N001.                    CNS_INT(h) 0x7ffd08526a78 ftn
  N002.                    IND      
  N004.                    CALL     ; t163,t164,t165
  N000.                    IL_OFFSET INLRT @ 0x010[--]
  N001.                    V11 MEM
  N000.                    LCL_ADDR  V01 loc0         [+0]
  N002.                    STORE_BLK
  N000.                    IL_OFFSET INLRT @ 0x011[E-]
  N001. t10             =  LCL_ADDR  V12 tmp2         [+0]
  N000. t169            =  PUTARG_REG; t10
  N002. t8              =  CNS_INT(h) 0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N000. t170            =  PUTARG_REG; t8
  N003. t9              =  CNS_INT   0xF00
  N000. t171            =  PUTARG_REG; t9
  N001.                    CNS_INT(h) 0x7ffd08526a78 ftn
  N002.                    IND      
  N004.                    CALL     ; t169,t170,t171
  N000.                    IL_OFFSET INLRT @ 0x020[--]
  N001.                    V12 MEM
  N000.                    LCL_ADDR  V02 loc1         [+0]
  N002.                    STORE_BLK
  N000.                    IL_OFFSET INLRT @ 0x021[E-]
  N001. t111            =  CNS_INT(h)  'Ascii------'

  N000. t175            =  PUTARG_REG; t111
  N001.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N002.                    IND      
  N002.                    CALL     ; t175
  N000.                    IL_OFFSET INLRT @ 0x02B[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x02C[E-]
  N001.                    V01 MEM
  N000.                    LCL_ADDR  V25 tmp15        [+0]
  N002.                    STORE_BLK
  N003.                    V02 MEM
  N000.                    LCL_ADDR  V26 tmp16        [+0]
  N004.                    STORE_BLK
  N005. t114            =  LCL_ADDR  V25 tmp15        [+0]
  N000. t180            =  PUTARG_REG; t114
  N006. t115            =  LCL_ADDR  V26 tmp16        [+0]
  N000. t181            =  PUTARG_REG; t115
  N001.                    CNS_INT(h) 0x7ffd085b6cb8 ftn
  N002.                    IND      
  N007. t19             =  CALL     ; t180,t181
  N008.                    V13 MEM; t19
  N000.                    IL_OFFSET INLRT @ 0x033[--]
  N001. t21             =  V13 MEM
  N000. t184            =  PUTARG_REG; t21
  N001.                    CNS_INT(h) 0x7ffd0868fc18 ftn
  N002.                    IND      
  N002.                    CALL     ; t184
  N000.                    IL_OFFSET INLRT @ 0x038[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x039[E-]
  N001. t116            =  CNS_INT(h)  'String------'

  N000. t187            =  PUTARG_REG; t116
  N001.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N002.                    IND      
  N002.                    CALL     ; t187
  N000.                    IL_OFFSET INLRT @ 0x043[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x044[E-]
  N001. t117            =  CNS_INT(h)  'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

  N002.                    V03 MEM; t117
  N000.                    IL_OFFSET INLRT @ 0x04A[E-]
  N001. t30             =  CNS_INT(h) 0x7ffd086d1a48 class
  N000. t190            =  PUTARG_REG; t30
  N002. t29             =  CNS_INT   3
  N000. t191            =  PUTARG_REG; t29
  N003. t31             =  CALL help; t190,t191
  N004.                    V14 MEM; t31
  N000.                    IL_OFFSET INLRT @ 0x050[--]
  N001. t35             =  CNS_INT(h) 0x7ffd086d21c8 field
  N000. t192            =  PUTARG_REG; t35
  N002. t36             =  CALL help; t192
  N003.                    V15 MEM; t36
  N001. t34             =  V14 MEM
  N000. t193            =  PUTARG_REG; t34
  N002. t39             =  V15 MEM
  N000. t194            =  PUTARG_REG; t39
  N003.                    CALL     ; t193,t194
  N000.                    IL_OFFSET INLRT @ 0x05B[--]
  N001. t33             =  V14 MEM
  N002.                    V04 MEM; t33
  N000.                    IL_OFFSET INLRT @ 0x05C[E-]
  N001. t41             =  V03 MEM
  N000. t195            =  PUTARG_REG; t41
  N002. t42             =  V04 MEM
  N000. t196            =  PUTARG_REG; t42
  N003. t43             =  CNS_INT   1
  N000. t197            =  PUTARG_REG; t43
  N001.                    CNS_INT(h) 0x7ffd08524cd8 ftn
  N002.                    IND      
  N004. t44             =  CALL     ; t195,t196,t197
  N005.                    V16 MEM; t44
  N000.                    IL_OFFSET INLRT @ 0x064[--]
  N001.                    NOP      
  N000.                    IL_OFFSET INLRT @ 0x065[E-]
  N001. t48             =  V03 MEM
  N000. t200            =  PUTARG_REG; t48
  N002. t49             =  CNS_INT   0
  N000. t201            =  PUTARG_REG; t49
  N001.                    CNS_INT(h) 0x7ffd08305ef0 ftn
  N002.                    IND      
  N003. t50             =  CALL nullcheck; t200,t201
  N004.                    V17 MEM; t50
  N000.                    IL_OFFSET INLRT @ 0x06C[--]
  N001. t52             =  V17 MEM
  N000. t204            =  PUTARG_REG; t52
  N001.                    CNS_INT(h) 0x7ffd0868fc30 ftn
  N002.                    IND      
  N002.                    CALL     ; t204
  N000.                    IL_OFFSET INLRT @ 0x071[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x072[E-]
  N001. t56             =  CNS_INT(h) 0x7ffd086d1e30 class
  N000. t207            =  PUTARG_REG; t56
  N002. t55             =  CNS_INT   5
  N000. t208            =  PUTARG_REG; t55
  N003. t57             =  CALL help; t207,t208
  N004.                    V18 MEM; t57
  N000.                    IL_OFFSET INLRT @ 0x078[--]
  N001. t61             =  CNS_INT(h) 0x7ffd086d2198 field
  N000. t209            =  PUTARG_REG; t61
  N002. t62             =  CALL help; t209
  N003.                    V19 MEM; t62
  N001. t60             =  V18 MEM
  N000. t210            =  PUTARG_REG; t60
  N002. t65             =  V19 MEM
  N000. t211            =  PUTARG_REG; t65
  N003.                    CALL     ; t210,t211
  N000.                    IL_OFFSET INLRT @ 0x083[--]
  N001. t59             =  V18 MEM
  N002.                    V05 MEM; t59
  N000.                    IL_OFFSET INLRT @ 0x085[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x086[E-]
  N001. t68             =  V05 MEM
  N002. t69             =  CNS_INT   0
  N003. t70             =  INDEX_ADDR; t68,t69
  N004.                    V07 MEM; t70
  N000.                    IL_OFFSET INLRT @ 0x090[E-]
  N001. t72             =  V07 MEM
  N002.                    V27 MEM; t72
  N003. t119            =  V27 MEM
  N005.                    V06 MEM; t119
  N000.                    IL_OFFSET INLRT @ 0x095[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x096[E-]
  N001. t76             =  V06 MEM
  N000. t212            =  PUTARG_REG; t76
  N002. t77             =  CALL     ; t212
  N003.                    V20 MEM; t77
  N000.                    IL_OFFSET INLRT @ 0x09D[--]
  N001. t79             =  V20 MEM
  N002.                    V08 MEM; t79
  N000.                    IL_OFFSET INLRT @ 0x09F[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x0A0[E-]
  N001. t82             =  CNS_INT   0
  N002. t83             =  CAST     ; t82
  N003.                    V07 MEM; t83
  N000.                    IL_OFFSET INLRT @ 0x0A4[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x0A5[E-]
  N001. t122            =  CNS_INT(h)  'Main Vector512: '

  N002.                    V21 MEM; t122
  N001.                    CNS_INT   1
  N002.                    V22 MEM
  N000.                    IL_OFFSET INLRT @ 0x0AF[--]
  N001. t91             =  V22 MEM
  N002.                    V09 MEM; t91
  N001. t93             =  LCL_ADDR  V09 loc8         [+0]
  N000. t213            =  PUTARG_REG; t93
  N001.                    CNS_INT(h) 0x7ffd0813c7c8 ftn
  N002.                    IND      
  N002. t94             =  CALL     ; t213
  N003.                    V23 MEM; t94
  N000.                    IL_OFFSET INLRT @ 0x0B8[--]
  N001. t89             =  V21 MEM
  N000. t216            =  PUTARG_REG; t89
  N002. t96             =  V23 MEM
  N000. t217            =  PUTARG_REG; t96
  N001.                    CNS_INT(h) 0x7ffd08306028 ftn
  N002.                    IND      
  N003. t97             =  CALL     ; t216,t217
  N004.                    V24 MEM; t97
  N000.                    IL_OFFSET INLRT @ 0x0BD[--]
  N001. t99             =  V24 MEM
  N000. t220            =  PUTARG_REG; t99
  N001.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N002.                    IND      
  N002.                    CALL     ; t220
  N000.                    IL_OFFSET INLRT @ 0x0C2[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x0C3[E-]
  N001.                    RETURN   




buildIntervals second part ========
Int arg V00 in reg rcx

NEW BLOCK BB01
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N002 (  0,  0) [000000] -----------                         *  NOP       void   REG NA


NEW BLOCK BB02


Setting BB01 as the predecessor for determining incoming variable registers of BB02
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N006 (  3, 10) [000103] Hc---------                         *  CNS_INT(h) long   0x7ffd08511d48 global ptr REG NA
Contained
DefList: {  }
N008 (  5, 12) [000104] nc--G------                         *  IND       int    REG NA
Contained
DefList: {  }
N010 (  1,  1) [000105] -c---------                         *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N012 (  7, 14) [000106] ----G--N---                         *  CMP       void   REG NA

DefList: {  }
N014 (  9, 16) [000123] ----G------                         *  JCC       void   cond=UEQ REG NA


NEW BLOCK BB03


Setting BB02 as the predecessor for determining incoming variable registers of BB03
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>

DefList: {  }
N018 ( 14,  5) [000107] --C-G-?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 wt=50.00>


NEW BLOCK BB04


Setting BB02 as the predecessor for determining incoming variable registers of BB04
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB05


Setting BB04 as the predecessor for determining incoming variable registers of BB05
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N024 (???,???) [000124] -----------                         *  IL_OFFSET void   INLRT @ 0x000[E-] REG NA

DefList: {  }
N026 (  1,  1) [000001] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N028 (???,???) [000125] -----------                         *  IL_OFFSET void   INLRT @ 0x001[E-] REG NA

DefList: {  }
N030 (  3,  3) [000004] -----------                         *  LCL_ADDR  long   V11 tmp1         [+0] NA REG NA
Interval  0: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N030.t4. LCL_ADDR }
N032 (???,???) [000163] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval  1: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N032.t163. PUTARG_REG }
N034 (  3, 10) [000002] H----------                         *  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG NA
Interval  2: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N032.t163. PUTARG_REG; N034.t2. CNS_INT }
N036 (???,???) [000164] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval  3: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N032.t163. PUTARG_REG; N036.t164. PUTARG_REG }
N038 (  1,  4) [000003] -----------                         *  CNS_INT   int    0xF00 REG NA
Interval  4: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N032.t163. PUTARG_REG; N036.t164. PUTARG_REG; N038.t3. CNS_INT }
N040 (???,???) [000165] -----------                         *  PUTARG_REG int    REG r8
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval  5: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N032.t163. PUTARG_REG; N036.t164. PUTARG_REG; N040.t165. PUTARG_REG }
N042 (  3, 10) [000166] Hc---------                         *  CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
Contained
DefList: { N032.t163. PUTARG_REG; N036.t164. PUTARG_REG; N040.t165. PUTARG_REG }
N044 (  5, 12) [000167] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N032.t163. PUTARG_REG; N036.t164. PUTARG_REG; N040.t165. PUTARG_REG }
N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N048 (???,???) [000126] -----------                         *  IL_OFFSET void   INLRT @ 0x010[--] REG NA

DefList: {  }
N050 (  9,  6) [000006] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
Contained
DefList: {  }
N052 (???,???) [000168] Dc---------                         *  LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
Contained
DefList: {  }
N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval  6: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N056 (???,???) [000127] -----------                         *  IL_OFFSET void   INLRT @ 0x011[E-] REG NA

DefList: {  }
N058 (  3,  3) [000010] -----------                         *  LCL_ADDR  long   V12 tmp2         [+0] NA REG NA
Interval  7: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N058.t10. LCL_ADDR }
N060 (???,???) [000169] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval  8: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N060.t169. PUTARG_REG }
N062 (  3, 10) [000008] H----------                         *  CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG NA
Interval  9: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N060.t169. PUTARG_REG; N062.t8. CNS_INT }
N064 (???,???) [000170] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 10: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N060.t169. PUTARG_REG; N064.t170. PUTARG_REG }
N066 (  1,  4) [000009] -----------                         *  CNS_INT   int    0xF00 REG NA
Interval 11: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N060.t169. PUTARG_REG; N064.t170. PUTARG_REG; N066.t9. CNS_INT }
N068 (???,???) [000171] -----------                         *  PUTARG_REG int    REG r8
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval 12: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N060.t169. PUTARG_REG; N064.t170. PUTARG_REG; N068.t171. PUTARG_REG }
N070 (  3, 10) [000172] Hc---------                         *  CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
Contained
DefList: { N060.t169. PUTARG_REG; N064.t170. PUTARG_REG; N068.t171. PUTARG_REG }
N072 (  5, 12) [000173] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N060.t169. PUTARG_REG; N064.t170. PUTARG_REG; N068.t171. PUTARG_REG }
N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N076 (???,???) [000128] -----------                         *  IL_OFFSET void   INLRT @ 0x020[--] REG NA

DefList: {  }
N078 (  9,  6) [000012] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
Contained
DefList: {  }
N080 (???,???) [000174] Dc---------                         *  LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
Contained
DefList: {  }
N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval 13: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N084 (???,???) [000129] -----------                         *  IL_OFFSET void   INLRT @ 0x021[E-] REG NA

DefList: {  }
N086 (  3, 10) [000111] H----------                         *  CNS_INT(h) ref     'Ascii------'
 REG NA
Interval 14: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #72  @87  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N086.t111. CNS_INT }
N088 (???,???) [000175] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #73  @88  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #74  @88  RefTypeUse <Ivl:14> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 15: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #75  @89  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #76  @89  RefTypeDef <Ivl:15> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N088.t175. PUTARG_REG }
N090 (  3, 10) [000176] Hc---------                         *  CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
Contained
DefList: { N088.t175. PUTARG_REG }
N092 (  5, 12) [000177] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N088.t175. PUTARG_REG }
N094 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
<RefPosition #77  @94  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #78  @94  RefTypeUse <Ivl:15> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #79  @95  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #80  @95  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #81  @95  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #82  @95  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #83  @95  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #84  @95  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #85  @95  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N096 (???,???) [000130] -----------                         *  IL_OFFSET void   INLRT @ 0x02B[E-] REG NA

DefList: {  }
N098 (  1,  1) [000016] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N100 (???,???) [000131] -----------                         *  IL_OFFSET void   INLRT @ 0x02C[E-] REG NA

DefList: {  }
N102 (  9,  6) [000017] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
Contained
DefList: {  }
N104 (???,???) [000178] Dc---------                         *  LCL_ADDR  byref  V25 tmp15        [+0] NA REG NA
Contained
DefList: {  }
N106 ( 19, 13) [000112] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval 16: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #86  @106 RefTypeDef <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #87  @106 RefTypeUse <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N108 (  9,  6) [000018] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
Contained
DefList: {  }
N110 (???,???) [000179] Dc---------                         *  LCL_ADDR  byref  V26 tmp16        [+0] NA REG NA
Contained
DefList: {  }
N112 ( 19, 13) [000113] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval 17: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #88  @112 RefTypeDef <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #89  @112 RefTypeUse <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N114 (  3,  3) [000114] -----------                         *  LCL_ADDR  long   V25 tmp15        [+0] NA REG NA
Interval 18: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #90  @115 RefTypeDef <Ivl:18> LCL_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N114.t114. LCL_ADDR }
N116 (???,???) [000180] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #91  @116 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #92  @116 RefTypeUse <Ivl:18> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 19: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #93  @117 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #94  @117 RefTypeDef <Ivl:19> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N116.t180. PUTARG_REG }
N118 (  3,  3) [000115] -----------                         *  LCL_ADDR  long   V26 tmp16        [+0] NA REG NA
Interval 20: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #95  @119 RefTypeDef <Ivl:20> LCL_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N116.t180. PUTARG_REG; N118.t115. LCL_ADDR }
N120 (???,???) [000181] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #96  @120 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #97  @120 RefTypeUse <Ivl:20> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 21: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #98  @121 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #99  @121 RefTypeDef <Ivl:21> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N116.t180. PUTARG_REG; N120.t181. PUTARG_REG }
N122 (  3, 10) [000182] Hc---------                         *  CNS_INT(h) long   0x7ffd085b6cb8 ftn REG NA
Contained
DefList: { N116.t180. PUTARG_REG; N120.t181. PUTARG_REG }
N124 (  5, 12) [000183] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N116.t180. PUTARG_REG; N120.t181. PUTARG_REG }
N126 ( 64, 39) [000019] --CXG------                         *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG NA
<RefPosition #100 @126 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @126 RefTypeUse <Ivl:19> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @126 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @126 RefTypeUse <Ivl:21> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #104 @127 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #105 @127 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #106 @127 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #107 @127 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #108 @127 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #109 @127 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #110 @127 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 22: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #111 @127 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #112 @127 RefTypeDef <Ivl:22> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N126.t19. CALL }
N128 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
<RefPosition #113 @128 RefTypeUse <Ivl:22> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N130 (???,???) [000132] -----------                         *  IL_OFFSET void   INLRT @ 0x033[--] REG NA

DefList: {  }
N132 (  3,  2) [000021] -----------                         *  LCL_VAR   int    V13 tmp3          NA REG NA
Interval 23: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #114 @133 RefTypeDef <Ivl:23> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N132.t21. LCL_VAR }
N134 (???,???) [000184] -----------                         *  PUTARG_REG int    REG rcx
<RefPosition #115 @134 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #116 @134 RefTypeUse <Ivl:23> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 24: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #117 @135 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #118 @135 RefTypeDef <Ivl:24> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N134.t184. PUTARG_REG }
N136 (  3, 10) [000185] Hc---------                         *  CNS_INT(h) long   0x7ffd0868fc18 ftn REG NA
Contained
DefList: { N134.t184. PUTARG_REG }
N138 (  5, 12) [000186] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N134.t184. PUTARG_REG }
N140 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
<RefPosition #119 @140 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #120 @140 RefTypeUse <Ivl:24> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #121 @141 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #122 @141 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #123 @141 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #124 @141 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #125 @141 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #126 @141 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #127 @141 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N142 (???,???) [000133] -----------                         *  IL_OFFSET void   INLRT @ 0x038[E-] REG NA

DefList: {  }
N144 (  1,  1) [000023] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N146 (???,???) [000134] -----------                         *  IL_OFFSET void   INLRT @ 0x039[E-] REG NA

DefList: {  }
N148 (  3, 10) [000116] H----------                         *  CNS_INT(h) ref     'String------'
 REG NA
Interval 25: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #128 @149 RefTypeDef <Ivl:25> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N148.t116. CNS_INT }
N150 (???,???) [000187] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #129 @150 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #130 @150 RefTypeUse <Ivl:25> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 26: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #131 @151 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #132 @151 RefTypeDef <Ivl:26> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N150.t187. PUTARG_REG }
N152 (  3, 10) [000188] Hc---------                         *  CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
Contained
DefList: { N150.t187. PUTARG_REG }
N154 (  5, 12) [000189] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N150.t187. PUTARG_REG }
N156 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
<RefPosition #133 @156 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @156 RefTypeUse <Ivl:26> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @157 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #136 @157 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #137 @157 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #138 @157 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #139 @157 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #140 @157 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #141 @157 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N158 (???,???) [000135] -----------                         *  IL_OFFSET void   INLRT @ 0x043[E-] REG NA

DefList: {  }
N160 (  1,  1) [000026] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N162 (???,???) [000136] -----------                         *  IL_OFFSET void   INLRT @ 0x044[E-] REG NA

DefList: {  }
N164 (  3, 10) [000117] H----------                         *  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG NA
Interval 27: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #142 @165 RefTypeDef <Ivl:27> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N164.t117. CNS_INT }
N166 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
<RefPosition #143 @166 RefTypeUse <Ivl:27> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N168 (???,???) [000137] -----------                         *  IL_OFFSET void   INLRT @ 0x04A[E-] REG NA

DefList: {  }
N170 (  3, 10) [000030] H----------                         *  CNS_INT(h) long   0x7ffd086d1a48 class REG NA
Interval 28: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #144 @171 RefTypeDef <Ivl:28> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N170.t30. CNS_INT }
N172 (???,???) [000190] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #145 @172 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @172 RefTypeUse <Ivl:28> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 29: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #147 @173 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #148 @173 RefTypeDef <Ivl:29> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N172.t190. PUTARG_REG }
N174 (  1,  1) [000029] -----------                         *  CNS_INT   long   3 REG NA
Interval 30: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #149 @175 RefTypeDef <Ivl:30> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N172.t190. PUTARG_REG; N174.t29. CNS_INT }
N176 (???,???) [000191] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #150 @176 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #151 @176 RefTypeUse <Ivl:30> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 31: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #152 @177 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #153 @177 RefTypeDef <Ivl:31> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N172.t190. PUTARG_REG; N176.t191. PUTARG_REG }
N178 ( 18, 18) [000031] --CXG------                         *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG NA
<RefPosition #154 @178 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #155 @178 RefTypeUse <Ivl:29> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #156 @178 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #157 @178 RefTypeUse <Ivl:31> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @179 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #159 @179 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #160 @179 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #161 @179 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #162 @179 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #163 @179 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #164 @179 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 32: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #165 @179 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #166 @179 RefTypeDef <Ivl:32> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N178.t31. CALL }
N180 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
<RefPosition #167 @180 RefTypeUse <Ivl:32> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N182 (???,???) [000138] -----------                         *  IL_OFFSET void   INLRT @ 0x050[--] REG NA

DefList: {  }
N184 (  3, 10) [000035] H----------                         *  CNS_INT(h) long   0x7ffd086d21c8 field REG NA
Interval 33: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #168 @185 RefTypeDef <Ivl:33> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N184.t35. CNS_INT }
N186 (???,???) [000192] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #169 @186 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #170 @186 RefTypeUse <Ivl:33> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 34: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #171 @187 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #172 @187 RefTypeDef <Ivl:34> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N186.t192. PUTARG_REG }
N188 ( 17, 16) [000036] --CXG------                         *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG NA
<RefPosition #173 @188 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #174 @188 RefTypeUse <Ivl:34> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #175 @189 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #176 @189 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #177 @189 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #178 @189 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #179 @189 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #180 @189 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #181 @189 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 35: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #182 @189 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #183 @189 RefTypeDef <Ivl:35> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N188.t36. CALL }
N190 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
<RefPosition #184 @190 RefTypeUse <Ivl:35> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N192 (  3,  2) [000034] -----------                         *  LCL_VAR   ref    V14 tmp4          NA REG NA
Interval 36: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #185 @193 RefTypeDef <Ivl:36> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N192.t34. LCL_VAR }
N194 (???,???) [000193] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #186 @194 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #187 @194 RefTypeUse <Ivl:36> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 37: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #188 @195 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #189 @195 RefTypeDef <Ivl:37> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N194.t193. PUTARG_REG }
N196 (  3,  4) [000039] -----------                         *  LCL_FLD   ref    V15 tmp5         [+0] NA REG NA
Interval 38: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #190 @197 RefTypeDef <Ivl:38> LCL_FLD BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N194.t193. PUTARG_REG; N196.t39. LCL_FLD }
N198 (???,???) [000194] -----------                         *  PUTARG_REG ref    REG rdx
<RefPosition #191 @198 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #192 @198 RefTypeUse <Ivl:38> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 39: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #193 @199 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #194 @199 RefTypeDef <Ivl:39> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N194.t193. PUTARG_REG; N198.t194. PUTARG_REG }
N200 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
<RefPosition #195 @200 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #196 @200 RefTypeUse <Ivl:37> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #197 @200 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @200 RefTypeUse <Ivl:39> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #199 @201 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #200 @201 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #201 @201 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #202 @201 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #203 @201 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #204 @201 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #205 @201 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N202 (???,???) [000139] -----------                         *  IL_OFFSET void   INLRT @ 0x05B[--] REG NA

DefList: {  }
N204 (  3,  2) [000033] -----------                         *  LCL_VAR   ref    V14 tmp4          NA REG NA
Interval 40: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #206 @205 RefTypeDef <Ivl:40> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N204.t33. LCL_VAR }
N206 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
<RefPosition #207 @206 RefTypeUse <Ivl:40> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N208 (???,???) [000140] -----------                         *  IL_OFFSET void   INLRT @ 0x05C[E-] REG NA

DefList: {  }
N210 (  3,  2) [000041] -----------                         *  LCL_VAR   ref    V03 loc2          NA REG NA
Interval 41: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #208 @211 RefTypeDef <Ivl:41> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N210.t41. LCL_VAR }
N212 (???,???) [000195] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #209 @212 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @212 RefTypeUse <Ivl:41> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 42: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #211 @213 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @213 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N212.t195. PUTARG_REG }
N214 (  3,  2) [000042] -----------                         *  LCL_VAR   ref    V04 loc3          NA REG NA
Interval 43: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #213 @215 RefTypeDef <Ivl:43> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N212.t195. PUTARG_REG; N214.t42. LCL_VAR }
N216 (???,???) [000196] -----------                         *  PUTARG_REG ref    REG rdx
<RefPosition #214 @216 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @216 RefTypeUse <Ivl:43> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 44: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #216 @217 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @217 RefTypeDef <Ivl:44> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N212.t195. PUTARG_REG; N216.t196. PUTARG_REG }
N218 (  1,  1) [000043] -----------                         *  CNS_INT   int    1 REG NA
Interval 45: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #218 @219 RefTypeDef <Ivl:45> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N212.t195. PUTARG_REG; N216.t196. PUTARG_REG; N218.t43. CNS_INT }
N220 (???,???) [000197] -----------                         *  PUTARG_REG int    REG r8
<RefPosition #219 @220 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @220 RefTypeUse <Ivl:45> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval 46: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #221 @221 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @221 RefTypeDef <Ivl:46> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N212.t195. PUTARG_REG; N216.t196. PUTARG_REG; N220.t197. PUTARG_REG }
N222 (  3, 10) [000198] Hc---------                         *  CNS_INT(h) long   0x7ffd08524cd8 ftn REG NA
Contained
DefList: { N212.t195. PUTARG_REG; N216.t196. PUTARG_REG; N220.t197. PUTARG_REG }
N224 (  5, 12) [000199] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N212.t195. PUTARG_REG; N216.t196. PUTARG_REG; N220.t197. PUTARG_REG }
N226 ( 21, 13) [000044] --CXG------                         *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[] REG NA
<RefPosition #223 @226 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @226 RefTypeUse <Ivl:42> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @226 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @226 RefTypeUse <Ivl:44> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @226 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @226 RefTypeUse <Ivl:46> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @227 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #230 @227 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #231 @227 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #232 @227 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #233 @227 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #234 @227 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #235 @227 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 47: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #236 @227 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #237 @227 RefTypeDef <Ivl:47> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N226.t44. CALL }
N228 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
<RefPosition #238 @228 RefTypeUse <Ivl:47> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N230 (???,???) [000141] -----------                         *  IL_OFFSET void   INLRT @ 0x064[--] REG NA

DefList: {  }
N232 (  0,  0) [000047] -----------                         *  NOP       void   REG NA

DefList: {  }
N234 (???,???) [000142] -----------                         *  IL_OFFSET void   INLRT @ 0x065[E-] REG NA

DefList: {  }
N236 (  3,  2) [000048] -----------                         *  LCL_VAR   ref    V03 loc2          NA REG NA
Interval 48: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #239 @237 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N236.t48. LCL_VAR }
N238 (???,???) [000200] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #240 @238 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #241 @238 RefTypeUse <Ivl:48> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 49: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #242 @239 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @239 RefTypeDef <Ivl:49> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N238.t200. PUTARG_REG }
N240 (  1,  1) [000049] -----------                         *  CNS_INT   int    0 REG NA
Interval 50: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #244 @241 RefTypeDef <Ivl:50> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N238.t200. PUTARG_REG; N240.t49. CNS_INT }
N242 (???,???) [000201] -----------                         *  PUTARG_REG int    REG rdx
<RefPosition #245 @242 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @242 RefTypeUse <Ivl:50> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 51: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #247 @243 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @243 RefTypeDef <Ivl:51> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N238.t200. PUTARG_REG; N242.t201. PUTARG_REG }
N244 (  3, 10) [000202] Hc---------                         *  CNS_INT(h) long   0x7ffd08305ef0 ftn REG NA
Contained
DefList: { N238.t200. PUTARG_REG; N242.t201. PUTARG_REG }
N246 (  5, 12) [000203] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N238.t200. PUTARG_REG; N242.t201. PUTARG_REG }
N248 ( 18, 10) [000050] --CXG------                         *  CALL nullcheck int    System.String:get_Chars(int):ushort:this REG NA
<RefPosition #249 @248 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #250 @248 RefTypeUse <Ivl:49> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #251 @248 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #252 @248 RefTypeUse <Ivl:51> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #253 @249 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #254 @249 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @249 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #256 @249 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #257 @249 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #258 @249 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #259 @249 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 52: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #260 @249 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #261 @249 RefTypeDef <Ivl:52> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N248.t50. CALL }
N250 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7          NA REG NA
<RefPosition #262 @250 RefTypeUse <Ivl:52> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N252 (???,???) [000143] -----------                         *  IL_OFFSET void   INLRT @ 0x06C[--] REG NA

DefList: {  }
N254 (  3,  2) [000052] -----------                         *  LCL_VAR   int    V17 tmp7          NA REG NA
Interval 53: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #263 @255 RefTypeDef <Ivl:53> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N254.t52. LCL_VAR }
N256 (???,???) [000204] -----------                         *  PUTARG_REG int    REG rcx
<RefPosition #264 @256 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #265 @256 RefTypeUse <Ivl:53> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 54: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #266 @257 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #267 @257 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N256.t204. PUTARG_REG }
N258 (  3, 10) [000205] Hc---------                         *  CNS_INT(h) long   0x7ffd0868fc30 ftn REG NA
Contained
DefList: { N256.t204. PUTARG_REG }
N260 (  5, 12) [000206] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N256.t204. PUTARG_REG }
N262 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort) REG NA
<RefPosition #268 @262 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #269 @262 RefTypeUse <Ivl:54> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #270 @263 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #271 @263 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #272 @263 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #273 @263 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #274 @263 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #275 @263 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #276 @263 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N264 (???,???) [000144] -----------                         *  IL_OFFSET void   INLRT @ 0x071[E-] REG NA

DefList: {  }
N266 (  1,  1) [000054] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N268 (???,???) [000145] -----------                         *  IL_OFFSET void   INLRT @ 0x072[E-] REG NA

DefList: {  }
N270 (  3, 10) [000056] H----------                         *  CNS_INT(h) long   0x7ffd086d1e30 class REG NA
Interval 55: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #277 @271 RefTypeDef <Ivl:55> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N270.t56. CNS_INT }
N272 (???,???) [000207] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #278 @272 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @272 RefTypeUse <Ivl:55> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 56: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #280 @273 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @273 RefTypeDef <Ivl:56> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N272.t207. PUTARG_REG }
N274 (  1,  1) [000055] -----------                         *  CNS_INT   long   5 REG NA
Interval 57: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #282 @275 RefTypeDef <Ivl:57> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N272.t207. PUTARG_REG; N274.t55. CNS_INT }
N276 (???,???) [000208] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #283 @276 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #284 @276 RefTypeUse <Ivl:57> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 58: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #285 @277 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #286 @277 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N272.t207. PUTARG_REG; N276.t208. PUTARG_REG }
N278 ( 18, 18) [000057] --CXG------                         *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG NA
<RefPosition #287 @278 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #288 @278 RefTypeUse <Ivl:56> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #289 @278 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #290 @278 RefTypeUse <Ivl:58> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #291 @279 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #292 @279 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #293 @279 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #294 @279 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #295 @279 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #296 @279 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #297 @279 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 59: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #298 @279 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #299 @279 RefTypeDef <Ivl:59> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N278.t57. CALL }
N280 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8          NA REG NA
<RefPosition #300 @280 RefTypeUse <Ivl:59> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N282 (???,???) [000146] -----------                         *  IL_OFFSET void   INLRT @ 0x078[--] REG NA

DefList: {  }
N284 (  3, 10) [000061] H----------                         *  CNS_INT(h) long   0x7ffd086d2198 field REG NA
Interval 60: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #301 @285 RefTypeDef <Ivl:60> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N284.t61. CNS_INT }
N286 (???,???) [000209] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #302 @286 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #303 @286 RefTypeUse <Ivl:60> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 61: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #304 @287 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #305 @287 RefTypeDef <Ivl:61> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N286.t209. PUTARG_REG }
N288 ( 17, 16) [000062] --CXG------                         *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG NA
<RefPosition #306 @288 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @288 RefTypeUse <Ivl:61> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @289 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #309 @289 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #310 @289 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #311 @289 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #312 @289 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #313 @289 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #314 @289 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 62: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #315 @289 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #316 @289 RefTypeDef <Ivl:62> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N288.t62. CALL }
N290 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9          NA REG NA
<RefPosition #317 @290 RefTypeUse <Ivl:62> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N292 (  3,  2) [000060] -----------                         *  LCL_VAR   ref    V18 tmp8          NA REG NA
Interval 63: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #318 @293 RefTypeDef <Ivl:63> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N292.t60. LCL_VAR }
N294 (???,???) [000210] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #319 @294 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @294 RefTypeUse <Ivl:63> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 64: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #321 @295 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @295 RefTypeDef <Ivl:64> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N294.t210. PUTARG_REG }
N296 (  3,  4) [000065] -----------                         *  LCL_FLD   ref    V19 tmp9         [+0] NA REG NA
Interval 65: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #323 @297 RefTypeDef <Ivl:65> LCL_FLD BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N294.t210. PUTARG_REG; N296.t65. LCL_FLD }
N298 (???,???) [000211] -----------                         *  PUTARG_REG ref    REG rdx
<RefPosition #324 @298 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @298 RefTypeUse <Ivl:65> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 66: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #326 @299 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #327 @299 RefTypeDef <Ivl:66> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N294.t210. PUTARG_REG; N298.t211. PUTARG_REG }
N300 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
<RefPosition #328 @300 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #329 @300 RefTypeUse <Ivl:64> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #330 @300 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #331 @300 RefTypeUse <Ivl:66> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #332 @301 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #333 @301 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #334 @301 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #335 @301 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #336 @301 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #337 @301 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #338 @301 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N302 (???,???) [000147] -----------                         *  IL_OFFSET void   INLRT @ 0x083[--] REG NA

DefList: {  }
N304 (  3,  2) [000059] -----------                         *  LCL_VAR   ref    V18 tmp8          NA REG NA
Interval 67: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #339 @305 RefTypeDef <Ivl:67> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N304.t59. LCL_VAR }
N306 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4          NA REG NA
<RefPosition #340 @306 RefTypeUse <Ivl:67> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N308 (???,???) [000148] -----------                         *  IL_OFFSET void   INLRT @ 0x085[E-] REG NA

DefList: {  }
N310 (  1,  1) [000067] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N312 (???,???) [000149] -----------                         *  IL_OFFSET void   INLRT @ 0x086[E-] REG NA

DefList: {  }
N314 (  3,  2) [000068] -----------                         *  LCL_VAR   ref    V05 loc4          NA REG NA
Interval 68: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #341 @315 RefTypeDef <Ivl:68> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N314.t68. LCL_VAR }
N316 (  1,  1) [000069] -----------                         *  CNS_INT   int    0 REG NA
Interval 69: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #342 @317 RefTypeDef <Ivl:69> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N314.t68. LCL_VAR; N316.t69. CNS_INT }
N318 ( 10, 12) [000070] ---XG------                         *  INDEX_ADDR byref byte[] REG NA
Interval 70: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #343 @318 RefTypeDef <Ivl:70 internal> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #344 @318 RefTypeUse <Ivl:68> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #345 @318 RefTypeUse <Ivl:69> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #346 @318 RefTypeUse <Ivl:70 internal> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 last wt=400.00>
Interval 71: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #347 @319 RefTypeDef <Ivl:71> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
Assigning related <I71> to <I68>

DefList: { N318.t70. INDEX_ADDR }
N320 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
<RefPosition #348 @320 RefTypeUse <Ivl:71> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N322 (???,???) [000150] -----------                         *  IL_OFFSET void   INLRT @ 0x090[E-] REG NA

DefList: {  }
N324 (  3,  2) [000072] -----------                         *  LCL_VAR   byref  V07 loc6          NA REG NA
Interval 72: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #349 @325 RefTypeDef <Ivl:72> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N324.t72. LCL_VAR }
N326 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17         NA REG NA
<RefPosition #350 @326 RefTypeUse <Ivl:72> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N328 (  3,  2) [000119] -----------                         *  LCL_VAR   long   V27 tmp17         NA REG NA
Interval 73: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #351 @329 RefTypeDef <Ivl:73> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N328.t119. LCL_VAR }
N330 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5          NA REG NA
<RefPosition #352 @330 RefTypeUse <Ivl:73> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N332 (???,???) [000151] -----------                         *  IL_OFFSET void   INLRT @ 0x095[E-] REG NA

DefList: {  }
N334 (  1,  1) [000075] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N336 (???,???) [000152] -----------                         *  IL_OFFSET void   INLRT @ 0x096[E-] REG NA

DefList: {  }
N338 (  3,  2) [000076] -----------                         *  LCL_VAR   long   V06 loc5          NA REG NA
Interval 74: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #353 @339 RefTypeDef <Ivl:74> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N338.t76. LCL_VAR }
N340 (???,???) [000212] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #354 @340 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #355 @340 RefTypeUse <Ivl:74> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 75: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #356 @341 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #357 @341 RefTypeDef <Ivl:75> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N340.t212. PUTARG_REG }
N342 ( 17,  8) [000077] --CXG------                         *  CALL      ref    System.String:.ctor(ulong):this REG NA
<RefPosition #358 @342 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #359 @342 RefTypeUse <Ivl:75> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #360 @343 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #361 @343 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #362 @343 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #363 @343 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #364 @343 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #365 @343 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #366 @343 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 76: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #367 @343 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #368 @343 RefTypeDef <Ivl:76> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N342.t77. CALL }
N344 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10         NA REG NA
<RefPosition #369 @344 RefTypeUse <Ivl:76> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N346 (???,???) [000153] -----------                         *  IL_OFFSET void   INLRT @ 0x09D[--] REG NA

DefList: {  }
N348 (  3,  2) [000079] -----------                         *  LCL_VAR   ref    V20 tmp10         NA REG NA
Interval 77: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #370 @349 RefTypeDef <Ivl:77> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N348.t79. LCL_VAR }
N350 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7          NA REG NA
<RefPosition #371 @350 RefTypeUse <Ivl:77> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N352 (???,???) [000154] -----------                         *  IL_OFFSET void   INLRT @ 0x09F[E-] REG NA

DefList: {  }
N354 (  1,  1) [000081] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N356 (???,???) [000155] -----------                         *  IL_OFFSET void   INLRT @ 0x0A0[E-] REG NA

DefList: {  }
N358 (  1,  1) [000082] -----------                         *  CNS_INT   int    0 REG NA
Interval 78: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #372 @359 RefTypeDef <Ivl:78> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N358.t82. CNS_INT }
N360 (  2,  3) [000083] ---------U-                         *  CAST      long <- ulong <- uint REG NA
<RefPosition #373 @360 RefTypeUse <Ivl:78> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 79: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #374 @361 RefTypeDef <Ivl:79> CAST BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N360.t83. CAST }
N362 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
<RefPosition #375 @362 RefTypeUse <Ivl:79> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N364 (???,???) [000156] -----------                         *  IL_OFFSET void   INLRT @ 0x0A4[E-] REG NA

DefList: {  }
N366 (  1,  1) [000085] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N368 (???,???) [000157] -----------                         *  IL_OFFSET void   INLRT @ 0x0A5[E-] REG NA

DefList: {  }
N370 (  3, 10) [000122] H----------                         *  CNS_INT(h) ref     'Main Vector512: '
 REG NA
Interval 80: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #376 @371 RefTypeDef <Ivl:80> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N370.t122. CNS_INT }
N372 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11         NA REG NA
<RefPosition #377 @372 RefTypeUse <Ivl:80> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N374 (  1,  1) [000087] -c---------                         *  CNS_INT   int    1 REG NA
Contained
DefList: {  }
N376 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12         NA REG NA

DefList: {  }
N378 (???,???) [000158] -----------                         *  IL_OFFSET void   INLRT @ 0x0AF[--] REG NA

DefList: {  }
N380 (  3,  2) [000091] -----------                         *  LCL_VAR   int    V22 tmp12         NA REG NA
Interval 81: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #378 @381 RefTypeDef <Ivl:81> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N380.t91. LCL_VAR }
N382 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8          NA REG NA
<RefPosition #379 @382 RefTypeUse <Ivl:81> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N384 (  3,  3) [000093] -----------                         *  LCL_ADDR  long   V09 loc8         [+0] NA REG NA
Interval 82: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #380 @385 RefTypeDef <Ivl:82> LCL_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N384.t93. LCL_ADDR }
N386 (???,???) [000213] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #381 @386 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #382 @386 RefTypeUse <Ivl:82> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 83: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #383 @387 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #384 @387 RefTypeDef <Ivl:83> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N386.t213. PUTARG_REG }
N388 (  3, 10) [000214] Hc---------                         *  CNS_INT(h) long   0x7ffd0813c7c8 ftn REG NA
Contained
DefList: { N386.t213. PUTARG_REG }
N390 (  5, 12) [000215] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N386.t213. PUTARG_REG }
N392 ( 17,  9) [000094] --CXG------                         *  CALL      ref    System.Boolean:ToString():System.String:this REG NA
<RefPosition #385 @392 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #386 @392 RefTypeUse <Ivl:83> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #387 @393 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #388 @393 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #389 @393 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #390 @393 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #391 @393 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #392 @393 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #393 @393 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 84: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #394 @393 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #395 @393 RefTypeDef <Ivl:84> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N392.t94. CALL }
N394 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13         NA REG NA
<RefPosition #396 @394 RefTypeUse <Ivl:84> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N396 (???,???) [000159] -----------                         *  IL_OFFSET void   INLRT @ 0x0B8[--] REG NA

DefList: {  }
N398 (  3,  2) [000089] -----------                         *  LCL_VAR   ref    V21 tmp11         NA REG NA
Interval 85: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #397 @399 RefTypeDef <Ivl:85> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N398.t89. LCL_VAR }
N400 (???,???) [000216] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #398 @400 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @400 RefTypeUse <Ivl:85> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 86: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #400 @401 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #401 @401 RefTypeDef <Ivl:86> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N400.t216. PUTARG_REG }
N402 (  3,  2) [000096] -----------                         *  LCL_VAR   ref    V23 tmp13         NA REG NA
Interval 87: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #402 @403 RefTypeDef <Ivl:87> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N400.t216. PUTARG_REG; N402.t96. LCL_VAR }
N404 (???,???) [000217] -----------                         *  PUTARG_REG ref    REG rdx
<RefPosition #403 @404 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #404 @404 RefTypeUse <Ivl:87> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 88: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #405 @405 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #406 @405 RefTypeDef <Ivl:88> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N400.t216. PUTARG_REG; N404.t217. PUTARG_REG }
N406 (  3, 10) [000218] Hc---------                         *  CNS_INT(h) long   0x7ffd08306028 ftn REG NA
Contained
DefList: { N400.t216. PUTARG_REG; N404.t217. PUTARG_REG }
N408 (  5, 12) [000219] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N400.t216. PUTARG_REG; N404.t217. PUTARG_REG }
N410 ( 20, 11) [000097] --CXG------                         *  CALL      ref    System.String:Concat(System.String,System.String):System.String REG NA
<RefPosition #407 @410 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #408 @410 RefTypeUse <Ivl:86> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #409 @410 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #410 @410 RefTypeUse <Ivl:88> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #411 @411 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #412 @411 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #413 @411 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #414 @411 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #415 @411 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #416 @411 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #417 @411 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 89: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #418 @411 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #419 @411 RefTypeDef <Ivl:89> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N410.t97. CALL }
N412 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14         NA REG NA
<RefPosition #420 @412 RefTypeUse <Ivl:89> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N414 (???,???) [000160] -----------                         *  IL_OFFSET void   INLRT @ 0x0BD[--] REG NA

DefList: {  }
N416 (  3,  2) [000099] -----------                         *  LCL_VAR   ref    V24 tmp14         NA REG NA
Interval 90: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #421 @417 RefTypeDef <Ivl:90> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N416.t99. LCL_VAR }
N418 (???,???) [000220] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #422 @418 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #423 @418 RefTypeUse <Ivl:90> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 91: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #424 @419 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #425 @419 RefTypeDef <Ivl:91> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N418.t220. PUTARG_REG }
N420 (  3, 10) [000221] Hc---------                         *  CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
Contained
DefList: { N418.t220. PUTARG_REG }
N422 (  5, 12) [000222] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N418.t220. PUTARG_REG }
N424 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
<RefPosition #426 @424 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #427 @424 RefTypeUse <Ivl:91> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #428 @425 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #429 @425 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #430 @425 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #431 @425 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #432 @425 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #433 @425 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #434 @425 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N426 (???,???) [000161] -----------                         *  IL_OFFSET void   INLRT @ 0x0C2[E-] REG NA

DefList: {  }
N428 (  1,  1) [000101] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N430 (???,???) [000162] -----------                         *  IL_OFFSET void   INLRT @ 0x0C3[E-] REG NA

DefList: {  }
N432 (  0,  0) [000102] -----------                         *  RETURN    void   REG NA


Linear scan intervals BEFORE VALIDATING INTERVALS:
Interval  0: long RefPositions {#12@31 #14@32} physReg:NA Preferences=[rcx]
Interval  1: long RefPositions {#16@33 #28@46} physReg:NA Preferences=[rcx]
Interval  2: long (constant) RefPositions {#17@35 #19@36} physReg:NA Preferences=[rdx]
Interval  3: long RefPositions {#21@37 #30@46} physReg:NA Preferences=[rdx]
Interval  4: int (constant) RefPositions {#22@39 #24@40} physReg:NA Preferences=[r8]
Interval  5: int RefPositions {#26@41 #32@46} physReg:NA Preferences=[r8]
Interval  6: float (INTERNAL) RefPositions {#40@54 #41@54} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval  7: long RefPositions {#42@59 #44@60} physReg:NA Preferences=[rcx]
Interval  8: long RefPositions {#46@61 #58@74} physReg:NA Preferences=[rcx]
Interval  9: long (constant) RefPositions {#47@63 #49@64} physReg:NA Preferences=[rdx]
Interval 10: long RefPositions {#51@65 #60@74} physReg:NA Preferences=[rdx]
Interval 11: int (constant) RefPositions {#52@67 #54@68} physReg:NA Preferences=[r8]
Interval 12: int RefPositions {#56@69 #62@74} physReg:NA Preferences=[r8]
Interval 13: float (INTERNAL) RefPositions {#70@82 #71@82} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 14: ref (constant) RefPositions {#72@87 #74@88} physReg:NA Preferences=[rcx]
Interval 15: ref RefPositions {#76@89 #78@94} physReg:NA Preferences=[rcx]
Interval 16: float (INTERNAL) RefPositions {#86@106 #87@106} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 17: float (INTERNAL) RefPositions {#88@112 #89@112} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 18: long RefPositions {#90@115 #92@116} physReg:NA Preferences=[rcx]
Interval 19: long RefPositions {#94@117 #101@126} physReg:NA Preferences=[rcx]
Interval 20: long RefPositions {#95@119 #97@120} physReg:NA Preferences=[rdx]
Interval 21: long RefPositions {#99@121 #103@126} physReg:NA Preferences=[rdx]
Interval 22: int RefPositions {#112@127 #113@128} physReg:NA Preferences=[rax]
Interval 23: int RefPositions {#114@133 #116@134} physReg:NA Preferences=[rcx]
Interval 24: int RefPositions {#118@135 #120@140} physReg:NA Preferences=[rcx]
Interval 25: ref (constant) RefPositions {#128@149 #130@150} physReg:NA Preferences=[rcx]
Interval 26: ref RefPositions {#132@151 #134@156} physReg:NA Preferences=[rcx]
Interval 27: ref (constant) RefPositions {#142@165 #143@166} physReg:NA Preferences=[allIntButFP]
Interval 28: long (constant) RefPositions {#144@171 #146@172} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#148@173 #155@178} physReg:NA Preferences=[rcx]
Interval 30: long (constant) RefPositions {#149@175 #151@176} physReg:NA Preferences=[rdx]
Interval 31: long RefPositions {#153@177 #157@178} physReg:NA Preferences=[rdx]
Interval 32: ref RefPositions {#166@179 #167@180} physReg:NA Preferences=[rax]
Interval 33: long (constant) RefPositions {#168@185 #170@186} physReg:NA Preferences=[rcx]
Interval 34: long RefPositions {#172@187 #174@188} physReg:NA Preferences=[rcx]
Interval 35: ref RefPositions {#183@189 #184@190} physReg:NA Preferences=[rax]
Interval 36: ref RefPositions {#185@193 #187@194} physReg:NA Preferences=[rcx]
Interval 37: ref RefPositions {#189@195 #196@200} physReg:NA Preferences=[rcx]
Interval 38: ref RefPositions {#190@197 #192@198} physReg:NA Preferences=[rdx]
Interval 39: ref RefPositions {#194@199 #198@200} physReg:NA Preferences=[rdx]
Interval 40: ref RefPositions {#206@205 #207@206} physReg:NA Preferences=[allIntButFP]
Interval 41: ref RefPositions {#208@211 #210@212} physReg:NA Preferences=[rcx]
Interval 42: ref RefPositions {#212@213 #224@226} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#213@215 #215@216} physReg:NA Preferences=[rdx]
Interval 44: ref RefPositions {#217@217 #226@226} physReg:NA Preferences=[rdx]
Interval 45: int (constant) RefPositions {#218@219 #220@220} physReg:NA Preferences=[r8]
Interval 46: int RefPositions {#222@221 #228@226} physReg:NA Preferences=[r8]
Interval 47: ref RefPositions {#237@227 #238@228} physReg:NA Preferences=[rax]
Interval 48: ref RefPositions {#239@237 #241@238} physReg:NA Preferences=[rcx]
Interval 49: ref RefPositions {#243@239 #250@248} physReg:NA Preferences=[rcx]
Interval 50: int (constant) RefPositions {#244@241 #246@242} physReg:NA Preferences=[rdx]
Interval 51: int RefPositions {#248@243 #252@248} physReg:NA Preferences=[rdx]
Interval 52: int RefPositions {#261@249 #262@250} physReg:NA Preferences=[rax]
Interval 53: int RefPositions {#263@255 #265@256} physReg:NA Preferences=[rcx]
Interval 54: int RefPositions {#267@257 #269@262} physReg:NA Preferences=[rcx]
Interval 55: long (constant) RefPositions {#277@271 #279@272} physReg:NA Preferences=[rcx]
Interval 56: long RefPositions {#281@273 #288@278} physReg:NA Preferences=[rcx]
Interval 57: long (constant) RefPositions {#282@275 #284@276} physReg:NA Preferences=[rdx]
Interval 58: long RefPositions {#286@277 #290@278} physReg:NA Preferences=[rdx]
Interval 59: ref RefPositions {#299@279 #300@280} physReg:NA Preferences=[rax]
Interval 60: long (constant) RefPositions {#301@285 #303@286} physReg:NA Preferences=[rcx]
Interval 61: long RefPositions {#305@287 #307@288} physReg:NA Preferences=[rcx]
Interval 62: ref RefPositions {#316@289 #317@290} physReg:NA Preferences=[rax]
Interval 63: ref RefPositions {#318@293 #320@294} physReg:NA Preferences=[rcx]
Interval 64: ref RefPositions {#322@295 #329@300} physReg:NA Preferences=[rcx]
Interval 65: ref RefPositions {#323@297 #325@298} physReg:NA Preferences=[rdx]
Interval 66: ref RefPositions {#327@299 #331@300} physReg:NA Preferences=[rdx]
Interval 67: ref RefPositions {#339@305 #340@306} physReg:NA Preferences=[allIntButFP]
Interval 68: ref RefPositions {#341@315 #344@318} physReg:NA Preferences=[allIntButFP] RelatedInterval <I71>
Interval 69: int (constant) RefPositions {#342@317 #345@318} physReg:NA Preferences=[allIntButFP]
Interval 70: int (INTERNAL) RefPositions {#343@318 #346@318} physReg:NA Preferences=[allIntButFP]
Interval 71: byref (interfering uses) RefPositions {#347@319 #348@320} physReg:NA Preferences=[allIntButFP]
Interval 72: byref RefPositions {#349@325 #350@326} physReg:NA Preferences=[allIntButFP]
Interval 73: long RefPositions {#351@329 #352@330} physReg:NA Preferences=[allIntButFP]
Interval 74: long RefPositions {#353@339 #355@340} physReg:NA Preferences=[rcx]
Interval 75: long RefPositions {#357@341 #359@342} physReg:NA Preferences=[rcx]
Interval 76: ref RefPositions {#368@343 #369@344} physReg:NA Preferences=[rax]
Interval 77: ref RefPositions {#370@349 #371@350} physReg:NA Preferences=[allIntButFP]
Interval 78: int (constant) RefPositions {#372@359 #373@360} physReg:NA Preferences=[allIntButFP]
Interval 79: long RefPositions {#374@361 #375@362} physReg:NA Preferences=[allIntButFP]
Interval 80: ref (constant) RefPositions {#376@371 #377@372} physReg:NA Preferences=[allIntButFP]
Interval 81: int RefPositions {#378@381 #379@382} physReg:NA Preferences=[allIntButFP]
Interval 82: long RefPositions {#380@385 #382@386} physReg:NA Preferences=[rcx]
Interval 83: long RefPositions {#384@387 #386@392} physReg:NA Preferences=[rcx]
Interval 84: ref RefPositions {#395@393 #396@394} physReg:NA Preferences=[rax]
Interval 85: ref RefPositions {#397@399 #399@400} physReg:NA Preferences=[rcx]
Interval 86: ref RefPositions {#401@401 #408@410} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#402@403 #404@404} physReg:NA Preferences=[rdx]
Interval 88: ref RefPositions {#406@405 #410@410} physReg:NA Preferences=[rdx]
Interval 89: ref RefPositions {#419@411 #420@412} physReg:NA Preferences=[rax]
Interval 90: ref RefPositions {#421@417 #423@418} physReg:NA Preferences=[rcx]
Interval 91: ref RefPositions {#425@419 #427@424} physReg:NA Preferences=[rcx]

------------
REFPOSITIONS BEFORE VALIDATING INTERVALS: 
------------
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #72  @87  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #73  @88  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #74  @88  RefTypeUse <Ivl:14> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #75  @89  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #76  @89  RefTypeDef <Ivl:15> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #77  @94  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #78  @94  RefTypeUse <Ivl:15> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #79  @95  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #80  @95  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #81  @95  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #82  @95  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #83  @95  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #84  @95  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #85  @95  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #86  @106 RefTypeDef <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #87  @106 RefTypeUse <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #88  @112 RefTypeDef <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #89  @112 RefTypeUse <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #90  @115 RefTypeDef <Ivl:18> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #91  @116 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #92  @116 RefTypeUse <Ivl:18> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #93  @117 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #94  @117 RefTypeDef <Ivl:19> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #95  @119 RefTypeDef <Ivl:20> LCL_ADDR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #96  @120 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #97  @120 RefTypeUse <Ivl:20> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #98  @121 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #99  @121 RefTypeDef <Ivl:21> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #100 @126 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @126 RefTypeUse <Ivl:19> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @126 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @126 RefTypeUse <Ivl:21> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #104 @127 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #105 @127 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #106 @127 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #107 @127 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #108 @127 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #109 @127 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #110 @127 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #111 @127 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #112 @127 RefTypeDef <Ivl:22> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #113 @128 RefTypeUse <Ivl:22> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #114 @133 RefTypeDef <Ivl:23> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #115 @134 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #116 @134 RefTypeUse <Ivl:23> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #117 @135 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #118 @135 RefTypeDef <Ivl:24> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #119 @140 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #120 @140 RefTypeUse <Ivl:24> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #121 @141 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #122 @141 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #123 @141 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #124 @141 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #125 @141 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #126 @141 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #127 @141 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #128 @149 RefTypeDef <Ivl:25> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #129 @150 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #130 @150 RefTypeUse <Ivl:25> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #131 @151 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #132 @151 RefTypeDef <Ivl:26> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #133 @156 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @156 RefTypeUse <Ivl:26> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @157 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #136 @157 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #137 @157 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #138 @157 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #139 @157 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #140 @157 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #141 @157 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #142 @165 RefTypeDef <Ivl:27> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #143 @166 RefTypeUse <Ivl:27> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #144 @171 RefTypeDef <Ivl:28> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #145 @172 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @172 RefTypeUse <Ivl:28> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #147 @173 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #148 @173 RefTypeDef <Ivl:29> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #149 @175 RefTypeDef <Ivl:30> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #150 @176 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #151 @176 RefTypeUse <Ivl:30> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #152 @177 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #153 @177 RefTypeDef <Ivl:31> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #154 @178 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #155 @178 RefTypeUse <Ivl:29> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #156 @178 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #157 @178 RefTypeUse <Ivl:31> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @179 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #159 @179 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #160 @179 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #161 @179 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #162 @179 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #163 @179 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #164 @179 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #165 @179 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #166 @179 RefTypeDef <Ivl:32> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #167 @180 RefTypeUse <Ivl:32> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #168 @185 RefTypeDef <Ivl:33> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #169 @186 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #170 @186 RefTypeUse <Ivl:33> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #171 @187 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #172 @187 RefTypeDef <Ivl:34> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #173 @188 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #174 @188 RefTypeUse <Ivl:34> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #175 @189 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #176 @189 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #177 @189 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #178 @189 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #179 @189 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #180 @189 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #181 @189 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #182 @189 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #183 @189 RefTypeDef <Ivl:35> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #184 @190 RefTypeUse <Ivl:35> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #185 @193 RefTypeDef <Ivl:36> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #186 @194 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #187 @194 RefTypeUse <Ivl:36> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #188 @195 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #189 @195 RefTypeDef <Ivl:37> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #190 @197 RefTypeDef <Ivl:38> LCL_FLD BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #191 @198 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #192 @198 RefTypeUse <Ivl:38> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #193 @199 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #194 @199 RefTypeDef <Ivl:39> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #195 @200 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #196 @200 RefTypeUse <Ivl:37> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #197 @200 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @200 RefTypeUse <Ivl:39> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #199 @201 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #200 @201 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #201 @201 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #202 @201 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #203 @201 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #204 @201 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #205 @201 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #206 @205 RefTypeDef <Ivl:40> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #207 @206 RefTypeUse <Ivl:40> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #208 @211 RefTypeDef <Ivl:41> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #209 @212 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @212 RefTypeUse <Ivl:41> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #211 @213 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @213 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #213 @215 RefTypeDef <Ivl:43> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #214 @216 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @216 RefTypeUse <Ivl:43> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #216 @217 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @217 RefTypeDef <Ivl:44> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #218 @219 RefTypeDef <Ivl:45> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #219 @220 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @220 RefTypeUse <Ivl:45> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #221 @221 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @221 RefTypeDef <Ivl:46> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #223 @226 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @226 RefTypeUse <Ivl:42> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @226 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @226 RefTypeUse <Ivl:44> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @226 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @226 RefTypeUse <Ivl:46> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @227 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #230 @227 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #231 @227 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #232 @227 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #233 @227 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #234 @227 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #235 @227 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #236 @227 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #237 @227 RefTypeDef <Ivl:47> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #238 @228 RefTypeUse <Ivl:47> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #239 @237 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #240 @238 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #241 @238 RefTypeUse <Ivl:48> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #242 @239 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @239 RefTypeDef <Ivl:49> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #244 @241 RefTypeDef <Ivl:50> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #245 @242 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @242 RefTypeUse <Ivl:50> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #247 @243 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @243 RefTypeDef <Ivl:51> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #249 @248 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #250 @248 RefTypeUse <Ivl:49> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #251 @248 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #252 @248 RefTypeUse <Ivl:51> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #253 @249 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #254 @249 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #255 @249 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #256 @249 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #257 @249 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #258 @249 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #259 @249 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #260 @249 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #261 @249 RefTypeDef <Ivl:52> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #262 @250 RefTypeUse <Ivl:52> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #263 @255 RefTypeDef <Ivl:53> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #264 @256 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #265 @256 RefTypeUse <Ivl:53> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #266 @257 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #267 @257 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #268 @262 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #269 @262 RefTypeUse <Ivl:54> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #270 @263 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #271 @263 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #272 @263 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #273 @263 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #274 @263 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #275 @263 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #276 @263 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #277 @271 RefTypeDef <Ivl:55> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #278 @272 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @272 RefTypeUse <Ivl:55> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #280 @273 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @273 RefTypeDef <Ivl:56> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #282 @275 RefTypeDef <Ivl:57> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #283 @276 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #284 @276 RefTypeUse <Ivl:57> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #285 @277 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #286 @277 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #287 @278 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #288 @278 RefTypeUse <Ivl:56> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #289 @278 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #290 @278 RefTypeUse <Ivl:58> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #291 @279 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #292 @279 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #293 @279 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #294 @279 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #295 @279 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #296 @279 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #297 @279 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #298 @279 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #299 @279 RefTypeDef <Ivl:59> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #300 @280 RefTypeUse <Ivl:59> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #301 @285 RefTypeDef <Ivl:60> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #302 @286 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #303 @286 RefTypeUse <Ivl:60> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #304 @287 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #305 @287 RefTypeDef <Ivl:61> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #306 @288 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @288 RefTypeUse <Ivl:61> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @289 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #309 @289 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #310 @289 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #311 @289 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #312 @289 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #313 @289 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #314 @289 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #315 @289 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #316 @289 RefTypeDef <Ivl:62> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #317 @290 RefTypeUse <Ivl:62> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #318 @293 RefTypeDef <Ivl:63> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #319 @294 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @294 RefTypeUse <Ivl:63> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #321 @295 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @295 RefTypeDef <Ivl:64> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #323 @297 RefTypeDef <Ivl:65> LCL_FLD BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #324 @298 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @298 RefTypeUse <Ivl:65> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #326 @299 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #327 @299 RefTypeDef <Ivl:66> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #328 @300 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #329 @300 RefTypeUse <Ivl:64> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #330 @300 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #331 @300 RefTypeUse <Ivl:66> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #332 @301 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #333 @301 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #334 @301 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #335 @301 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #336 @301 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #337 @301 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #338 @301 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #339 @305 RefTypeDef <Ivl:67> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #340 @306 RefTypeUse <Ivl:67> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #341 @315 RefTypeDef <Ivl:68> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #342 @317 RefTypeDef <Ivl:69> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #343 @318 RefTypeDef <Ivl:70 internal> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #344 @318 RefTypeUse <Ivl:68> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #345 @318 RefTypeUse <Ivl:69> BB05 regmask=[allIntButFP] minReg=1 last delay wt=100.00>
<RefPosition #346 @318 RefTypeUse <Ivl:70 internal> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 last wt=400.00>
<RefPosition #347 @319 RefTypeDef <Ivl:71> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #348 @320 RefTypeUse <Ivl:71> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #349 @325 RefTypeDef <Ivl:72> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #350 @326 RefTypeUse <Ivl:72> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #351 @329 RefTypeDef <Ivl:73> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #352 @330 RefTypeUse <Ivl:73> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #353 @339 RefTypeDef <Ivl:74> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #354 @340 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #355 @340 RefTypeUse <Ivl:74> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #356 @341 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #357 @341 RefTypeDef <Ivl:75> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #358 @342 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #359 @342 RefTypeUse <Ivl:75> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #360 @343 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #361 @343 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #362 @343 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #363 @343 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #364 @343 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #365 @343 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #366 @343 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #367 @343 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #368 @343 RefTypeDef <Ivl:76> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #369 @344 RefTypeUse <Ivl:76> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #370 @349 RefTypeDef <Ivl:77> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #371 @350 RefTypeUse <Ivl:77> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #372 @359 RefTypeDef <Ivl:78> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #373 @360 RefTypeUse <Ivl:78> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #374 @361 RefTypeDef <Ivl:79> CAST BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #375 @362 RefTypeUse <Ivl:79> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #376 @371 RefTypeDef <Ivl:80> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #377 @372 RefTypeUse <Ivl:80> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #378 @381 RefTypeDef <Ivl:81> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #379 @382 RefTypeUse <Ivl:81> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #380 @385 RefTypeDef <Ivl:82> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #381 @386 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #382 @386 RefTypeUse <Ivl:82> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #383 @387 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #384 @387 RefTypeDef <Ivl:83> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #385 @392 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #386 @392 RefTypeUse <Ivl:83> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #387 @393 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #388 @393 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #389 @393 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #390 @393 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #391 @393 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #392 @393 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #393 @393 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #394 @393 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #395 @393 RefTypeDef <Ivl:84> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #396 @394 RefTypeUse <Ivl:84> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #397 @399 RefTypeDef <Ivl:85> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #398 @400 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @400 RefTypeUse <Ivl:85> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #400 @401 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #401 @401 RefTypeDef <Ivl:86> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #402 @403 RefTypeDef <Ivl:87> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #403 @404 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #404 @404 RefTypeUse <Ivl:87> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #405 @405 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #406 @405 RefTypeDef <Ivl:88> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #407 @410 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #408 @410 RefTypeUse <Ivl:86> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #409 @410 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #410 @410 RefTypeUse <Ivl:88> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #411 @411 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #412 @411 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #413 @411 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #414 @411 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #415 @411 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #416 @411 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #417 @411 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #418 @411 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #419 @411 RefTypeDef <Ivl:89> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #420 @412 RefTypeUse <Ivl:89> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #421 @417 RefTypeDef <Ivl:90> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #422 @418 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #423 @418 RefTypeUse <Ivl:90> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #424 @419 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #425 @419 RefTypeDef <Ivl:91> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #426 @424 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #427 @424 RefTypeUse <Ivl:91> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #428 @425 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #429 @425 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #430 @425 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #431 @425 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #432 @425 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #433 @425 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #434 @425 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
TUPLE STYLE DUMP WITH REF POSITIONS
Incoming Parameters: 
BB01 [???..???), preds={} succs={BB02}
=====
  N002.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N006.                    CNS_INT(h) 0x7ffd08511d48 global ptr
  N008.                    IND      
  N010.                    CNS_INT   0
  N012.                    CMP      
  N014.                    JCC       cond=UEQ

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N018.                    CALL help
        Kill: rax rcx rdx r8 r9 r10 r11 

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..0C4) (return), preds={BB04} succs={}
=====
  N024.                    IL_OFFSET INLRT @ 0x000[E-]
  N026.                    NO_OP    
  N028.                    IL_OFFSET INLRT @ 0x001[E-]
  N030.                    LCL_ADDR  V11 tmp1         [+0] NA
        Def:<I0>(#12)
  N032.                    PUTARG_REG
                               Use:<I0>(#14) Fixed:rcx(#13) *
        Def:<I1>(#16) rcx
  N034.                    CNS_INT(h) 0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
        Def:<I2>(#17)
  N036.                    PUTARG_REG
                               Use:<I2>(#19) Fixed:rdx(#18) *
        Def:<I3>(#21) rdx
  N038.                    CNS_INT   0xF00
        Def:<I4>(#22)
  N040.                    PUTARG_REG
                               Use:<I4>(#24) Fixed:r8(#23) *
        Def:<I5>(#26) r8
  N042.                    CNS_INT(h) 0x7ffd08526a78 ftn
  N044.                    IND      
  N046.                    CALL     
                               Use:<I1>(#28) Fixed:rcx(#27) *
                               Use:<I3>(#30) Fixed:rdx(#29) *
                               Use:<I5>(#32) Fixed:r8(#31) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N048.                    IL_OFFSET INLRT @ 0x010[--]
  N050.                    V11 MEM
  N052.                    LCL_ADDR  V01 loc0         [+0] NA
  N054.                    STORE_BLK
        Def:<T6>(#40)
                               Use:<T6>(#41) *
  N056.                    IL_OFFSET INLRT @ 0x011[E-]
  N058.                    LCL_ADDR  V12 tmp2         [+0] NA
        Def:<I7>(#42)
  N060.                    PUTARG_REG
                               Use:<I7>(#44) Fixed:rcx(#43) *
        Def:<I8>(#46) rcx
  N062.                    CNS_INT(h) 0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
        Def:<I9>(#47)
  N064.                    PUTARG_REG
                               Use:<I9>(#49) Fixed:rdx(#48) *
        Def:<I10>(#51) rdx
  N066.                    CNS_INT   0xF00
        Def:<I11>(#52)
  N068.                    PUTARG_REG
                               Use:<I11>(#54) Fixed:r8(#53) *
        Def:<I12>(#56) r8
  N070.                    CNS_INT(h) 0x7ffd08526a78 ftn
  N072.                    IND      
  N074.                    CALL     
                               Use:<I8>(#58) Fixed:rcx(#57) *
                               Use:<I10>(#60) Fixed:rdx(#59) *
                               Use:<I12>(#62) Fixed:r8(#61) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N076.                    IL_OFFSET INLRT @ 0x020[--]
  N078.                    V12 MEM
  N080.                    LCL_ADDR  V02 loc1         [+0] NA
  N082.                    STORE_BLK
        Def:<T13>(#70)
                               Use:<T13>(#71) *
  N084.                    IL_OFFSET INLRT @ 0x021[E-]
  N086.                    CNS_INT(h)  'Ascii------'

        Def:<I14>(#72)
  N088.                    PUTARG_REG
                               Use:<I14>(#74) Fixed:rcx(#73) *
        Def:<I15>(#76) rcx
  N090.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N092.                    IND      
  N094.                    CALL     
                               Use:<I15>(#78) Fixed:rcx(#77) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N096.                    IL_OFFSET INLRT @ 0x02B[E-]
  N098.                    NO_OP    
  N100.                    IL_OFFSET INLRT @ 0x02C[E-]
  N102.                    V01 MEM
  N104.                    LCL_ADDR  V25 tmp15        [+0] NA
  N106.                    STORE_BLK
        Def:<T16>(#86)
                               Use:<T16>(#87) *
  N108.                    V02 MEM
  N110.                    LCL_ADDR  V26 tmp16        [+0] NA
  N112.                    STORE_BLK
        Def:<T17>(#88)
                               Use:<T17>(#89) *
  N114.                    LCL_ADDR  V25 tmp15        [+0] NA
        Def:<I18>(#90)
  N116.                    PUTARG_REG
                               Use:<I18>(#92) Fixed:rcx(#91) *
        Def:<I19>(#94) rcx
  N118.                    LCL_ADDR  V26 tmp16        [+0] NA
        Def:<I20>(#95)
  N120.                    PUTARG_REG
                               Use:<I20>(#97) Fixed:rdx(#96) *
        Def:<I21>(#99) rdx
  N122.                    CNS_INT(h) 0x7ffd085b6cb8 ftn
  N124.                    IND      
  N126.                    CALL     
                               Use:<I19>(#101) Fixed:rcx(#100) *
                               Use:<I21>(#103) Fixed:rdx(#102) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I22>(#112) rax
  N128.                    V13 MEM
                               Use:<I22>(#113) *
  N130.                    IL_OFFSET INLRT @ 0x033[--]
  N132.                    V13 MEM
        Def:<I23>(#114)
  N134.                    PUTARG_REG
                               Use:<I23>(#116) Fixed:rcx(#115) *
        Def:<I24>(#118) rcx
  N136.                    CNS_INT(h) 0x7ffd0868fc18 ftn
  N138.                    IND      
  N140.                    CALL     
                               Use:<I24>(#120) Fixed:rcx(#119) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N142.                    IL_OFFSET INLRT @ 0x038[E-]
  N144.                    NO_OP    
  N146.                    IL_OFFSET INLRT @ 0x039[E-]
  N148.                    CNS_INT(h)  'String------'

        Def:<I25>(#128)
  N150.                    PUTARG_REG
                               Use:<I25>(#130) Fixed:rcx(#129) *
        Def:<I26>(#132) rcx
  N152.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N154.                    IND      
  N156.                    CALL     
                               Use:<I26>(#134) Fixed:rcx(#133) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N158.                    IL_OFFSET INLRT @ 0x043[E-]
  N160.                    NO_OP    
  N162.                    IL_OFFSET INLRT @ 0x044[E-]
  N164.                    CNS_INT(h)  'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

        Def:<I27>(#142)
  N166.                    V03 MEM
                               Use:<I27>(#143) *
  N168.                    IL_OFFSET INLRT @ 0x04A[E-]
  N170.                    CNS_INT(h) 0x7ffd086d1a48 class
        Def:<I28>(#144)
  N172.                    PUTARG_REG
                               Use:<I28>(#146) Fixed:rcx(#145) *
        Def:<I29>(#148) rcx
  N174.                    CNS_INT   3
        Def:<I30>(#149)
  N176.                    PUTARG_REG
                               Use:<I30>(#151) Fixed:rdx(#150) *
        Def:<I31>(#153) rdx
  N178.                    CALL help
                               Use:<I29>(#155) Fixed:rcx(#154) *
                               Use:<I31>(#157) Fixed:rdx(#156) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I32>(#166) rax
  N180.                    V14 MEM
                               Use:<I32>(#167) *
  N182.                    IL_OFFSET INLRT @ 0x050[--]
  N184.                    CNS_INT(h) 0x7ffd086d21c8 field
        Def:<I33>(#168)
  N186.                    PUTARG_REG
                               Use:<I33>(#170) Fixed:rcx(#169) *
        Def:<I34>(#172) rcx
  N188.                    CALL help
                               Use:<I34>(#174) Fixed:rcx(#173) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I35>(#183) rax
  N190.                    V15 MEM
                               Use:<I35>(#184) *
  N192.                    V14 MEM
        Def:<I36>(#185)
  N194.                    PUTARG_REG
                               Use:<I36>(#187) Fixed:rcx(#186) *
        Def:<I37>(#189) rcx
  N196.                    V15 MEM
        Def:<I38>(#190)
  N198.                    PUTARG_REG
                               Use:<I38>(#192) Fixed:rdx(#191) *
        Def:<I39>(#194) rdx
  N200.                    CALL     
                               Use:<I37>(#196) Fixed:rcx(#195) *
                               Use:<I39>(#198) Fixed:rdx(#197) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N202.                    IL_OFFSET INLRT @ 0x05B[--]
  N204.                    V14 MEM
        Def:<I40>(#206)
  N206.                    V04 MEM
                               Use:<I40>(#207) *
  N208.                    IL_OFFSET INLRT @ 0x05C[E-]
  N210.                    V03 MEM
        Def:<I41>(#208)
  N212.                    PUTARG_REG
                               Use:<I41>(#210) Fixed:rcx(#209) *
        Def:<I42>(#212) rcx
  N214.                    V04 MEM
        Def:<I43>(#213)
  N216.                    PUTARG_REG
                               Use:<I43>(#215) Fixed:rdx(#214) *
        Def:<I44>(#217) rdx
  N218.                    CNS_INT   1
        Def:<I45>(#218)
  N220.                    PUTARG_REG
                               Use:<I45>(#220) Fixed:r8(#219) *
        Def:<I46>(#222) r8
  N222.                    CNS_INT(h) 0x7ffd08524cd8 ftn
  N224.                    IND      
  N226.                    CALL     
                               Use:<I42>(#224) Fixed:rcx(#223) *
                               Use:<I44>(#226) Fixed:rdx(#225) *
                               Use:<I46>(#228) Fixed:r8(#227) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I47>(#237) rax
  N228.                    V16 MEM
                               Use:<I47>(#238) *
  N230.                    IL_OFFSET INLRT @ 0x064[--]
  N232.                    NOP      
  N234.                    IL_OFFSET INLRT @ 0x065[E-]
  N236.                    V03 MEM
        Def:<I48>(#239)
  N238.                    PUTARG_REG
                               Use:<I48>(#241) Fixed:rcx(#240) *
        Def:<I49>(#243) rcx
  N240.                    CNS_INT   0
        Def:<I50>(#244)
  N242.                    PUTARG_REG
                               Use:<I50>(#246) Fixed:rdx(#245) *
        Def:<I51>(#248) rdx
  N244.                    CNS_INT(h) 0x7ffd08305ef0 ftn
  N246.                    IND      
  N248.                    CALL nullcheck
                               Use:<I49>(#250) Fixed:rcx(#249) *
                               Use:<I51>(#252) Fixed:rdx(#251) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I52>(#261) rax
  N250.                    V17 MEM
                               Use:<I52>(#262) *
  N252.                    IL_OFFSET INLRT @ 0x06C[--]
  N254.                    V17 MEM
        Def:<I53>(#263)
  N256.                    PUTARG_REG
                               Use:<I53>(#265) Fixed:rcx(#264) *
        Def:<I54>(#267) rcx
  N258.                    CNS_INT(h) 0x7ffd0868fc30 ftn
  N260.                    IND      
  N262.                    CALL     
                               Use:<I54>(#269) Fixed:rcx(#268) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N264.                    IL_OFFSET INLRT @ 0x071[E-]
  N266.                    NO_OP    
  N268.                    IL_OFFSET INLRT @ 0x072[E-]
  N270.                    CNS_INT(h) 0x7ffd086d1e30 class
        Def:<I55>(#277)
  N272.                    PUTARG_REG
                               Use:<I55>(#279) Fixed:rcx(#278) *
        Def:<I56>(#281) rcx
  N274.                    CNS_INT   5
        Def:<I57>(#282)
  N276.                    PUTARG_REG
                               Use:<I57>(#284) Fixed:rdx(#283) *
        Def:<I58>(#286) rdx
  N278.                    CALL help
                               Use:<I56>(#288) Fixed:rcx(#287) *
                               Use:<I58>(#290) Fixed:rdx(#289) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I59>(#299) rax
  N280.                    V18 MEM
                               Use:<I59>(#300) *
  N282.                    IL_OFFSET INLRT @ 0x078[--]
  N284.                    CNS_INT(h) 0x7ffd086d2198 field
        Def:<I60>(#301)
  N286.                    PUTARG_REG
                               Use:<I60>(#303) Fixed:rcx(#302) *
        Def:<I61>(#305) rcx
  N288.                    CALL help
                               Use:<I61>(#307) Fixed:rcx(#306) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I62>(#316) rax
  N290.                    V19 MEM
                               Use:<I62>(#317) *
  N292.                    V18 MEM
        Def:<I63>(#318)
  N294.                    PUTARG_REG
                               Use:<I63>(#320) Fixed:rcx(#319) *
        Def:<I64>(#322) rcx
  N296.                    V19 MEM
        Def:<I65>(#323)
  N298.                    PUTARG_REG
                               Use:<I65>(#325) Fixed:rdx(#324) *
        Def:<I66>(#327) rdx
  N300.                    CALL     
                               Use:<I64>(#329) Fixed:rcx(#328) *
                               Use:<I66>(#331) Fixed:rdx(#330) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N302.                    IL_OFFSET INLRT @ 0x083[--]
  N304.                    V18 MEM
        Def:<I67>(#339)
  N306.                    V05 MEM
                               Use:<I67>(#340) *
  N308.                    IL_OFFSET INLRT @ 0x085[E-]
  N310.                    NO_OP    
  N312.                    IL_OFFSET INLRT @ 0x086[E-]
  N314.                    V05 MEM
        Def:<I68>(#341) Pref:<I71>
  N316.                    CNS_INT   0
        Def:<I69>(#342)
  N318.                    INDEX_ADDR
        Def:<T70>(#343)
                               Use:<I68>(#344) *
                               Use:<I69>(#345) *
                               Use:<T70>(#346) *
        Def:<I71>(#347)
  N320.                    V07 MEM
                               Use:<I71>(#348) *
  N322.                    IL_OFFSET INLRT @ 0x090[E-]
  N324.                    V07 MEM
        Def:<I72>(#349)
  N326.                    V27 MEM
                               Use:<I72>(#350) *
  N328.                    V27 MEM
        Def:<I73>(#351)
  N330.                    V06 MEM
                               Use:<I73>(#352) *
  N332.                    IL_OFFSET INLRT @ 0x095[E-]
  N334.                    NO_OP    
  N336.                    IL_OFFSET INLRT @ 0x096[E-]
  N338.                    V06 MEM
        Def:<I74>(#353)
  N340.                    PUTARG_REG
                               Use:<I74>(#355) Fixed:rcx(#354) *
        Def:<I75>(#357) rcx
  N342.                    CALL     
                               Use:<I75>(#359) Fixed:rcx(#358) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I76>(#368) rax
  N344.                    V20 MEM
                               Use:<I76>(#369) *
  N346.                    IL_OFFSET INLRT @ 0x09D[--]
  N348.                    V20 MEM
        Def:<I77>(#370)
  N350.                    V08 MEM
                               Use:<I77>(#371) *
  N352.                    IL_OFFSET INLRT @ 0x09F[E-]
  N354.                    NO_OP    
  N356.                    IL_OFFSET INLRT @ 0x0A0[E-]
  N358.                    CNS_INT   0
        Def:<I78>(#372)
  N360.                    CAST     
                               Use:<I78>(#373) *
        Def:<I79>(#374)
  N362.                    V07 MEM
                               Use:<I79>(#375) *
  N364.                    IL_OFFSET INLRT @ 0x0A4[E-]
  N366.                    NO_OP    
  N368.                    IL_OFFSET INLRT @ 0x0A5[E-]
  N370.                    CNS_INT(h)  'Main Vector512: '

        Def:<I80>(#376)
  N372.                    V21 MEM
                               Use:<I80>(#377) *
  N374.                    CNS_INT   1
  N376.                    V22 MEM
  N378.                    IL_OFFSET INLRT @ 0x0AF[--]
  N380.                    V22 MEM
        Def:<I81>(#378)
  N382.                    V09 MEM
                               Use:<I81>(#379) *
  N384.                    LCL_ADDR  V09 loc8         [+0] NA
        Def:<I82>(#380)
  N386.                    PUTARG_REG
                               Use:<I82>(#382) Fixed:rcx(#381) *
        Def:<I83>(#384) rcx
  N388.                    CNS_INT(h) 0x7ffd0813c7c8 ftn
  N390.                    IND      
  N392.                    CALL     
                               Use:<I83>(#386) Fixed:rcx(#385) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I84>(#395) rax
  N394.                    V23 MEM
                               Use:<I84>(#396) *
  N396.                    IL_OFFSET INLRT @ 0x0B8[--]
  N398.                    V21 MEM
        Def:<I85>(#397)
  N400.                    PUTARG_REG
                               Use:<I85>(#399) Fixed:rcx(#398) *
        Def:<I86>(#401) rcx
  N402.                    V23 MEM
        Def:<I87>(#402)
  N404.                    PUTARG_REG
                               Use:<I87>(#404) Fixed:rdx(#403) *
        Def:<I88>(#406) rdx
  N406.                    CNS_INT(h) 0x7ffd08306028 ftn
  N408.                    IND      
  N410.                    CALL     
                               Use:<I86>(#408) Fixed:rcx(#407) *
                               Use:<I88>(#410) Fixed:rdx(#409) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I89>(#419) rax
  N412.                    V24 MEM
                               Use:<I89>(#420) *
  N414.                    IL_OFFSET INLRT @ 0x0BD[--]
  N416.                    V24 MEM
        Def:<I90>(#421)
  N418.                    PUTARG_REG
                               Use:<I90>(#423) Fixed:rcx(#422) *
        Def:<I91>(#425) rcx
  N420.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N422.                    IND      
  N424.                    CALL     
                               Use:<I91>(#427) Fixed:rcx(#426) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N426.                    IL_OFFSET INLRT @ 0x0C2[E-]
  N428.                    NO_OP    
  N430.                    IL_OFFSET INLRT @ 0x0C3[E-]
  N432.                    RETURN   




Linear scan intervals after buildIntervals:
Interval  0: long RefPositions {#12@31 #14@32} physReg:NA Preferences=[rcx]
Interval  1: long RefPositions {#16@33 #28@46} physReg:NA Preferences=[rcx]
Interval  2: long (constant) RefPositions {#17@35 #19@36} physReg:NA Preferences=[rdx]
Interval  3: long RefPositions {#21@37 #30@46} physReg:NA Preferences=[rdx]
Interval  4: int (constant) RefPositions {#22@39 #24@40} physReg:NA Preferences=[r8]
Interval  5: int RefPositions {#26@41 #32@46} physReg:NA Preferences=[r8]
Interval  6: float (INTERNAL) RefPositions {#40@54 #41@54} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval  7: long RefPositions {#42@59 #44@60} physReg:NA Preferences=[rcx]
Interval  8: long RefPositions {#46@61 #58@74} physReg:NA Preferences=[rcx]
Interval  9: long (constant) RefPositions {#47@63 #49@64} physReg:NA Preferences=[rdx]
Interval 10: long RefPositions {#51@65 #60@74} physReg:NA Preferences=[rdx]
Interval 11: int (constant) RefPositions {#52@67 #54@68} physReg:NA Preferences=[r8]
Interval 12: int RefPositions {#56@69 #62@74} physReg:NA Preferences=[r8]
Interval 13: float (INTERNAL) RefPositions {#70@82 #71@82} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 14: ref (constant) RefPositions {#72@87 #74@88} physReg:NA Preferences=[rcx]
Interval 15: ref RefPositions {#76@89 #78@94} physReg:NA Preferences=[rcx]
Interval 16: float (INTERNAL) RefPositions {#86@106 #87@106} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 17: float (INTERNAL) RefPositions {#88@112 #89@112} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 18: long RefPositions {#90@115 #92@116} physReg:NA Preferences=[rcx]
Interval 19: long RefPositions {#94@117 #101@126} physReg:NA Preferences=[rcx]
Interval 20: long RefPositions {#95@119 #97@120} physReg:NA Preferences=[rdx]
Interval 21: long RefPositions {#99@121 #103@126} physReg:NA Preferences=[rdx]
Interval 22: int RefPositions {#112@127 #113@128} physReg:NA Preferences=[rax]
Interval 23: int RefPositions {#114@133 #116@134} physReg:NA Preferences=[rcx]
Interval 24: int RefPositions {#118@135 #120@140} physReg:NA Preferences=[rcx]
Interval 25: ref (constant) RefPositions {#128@149 #130@150} physReg:NA Preferences=[rcx]
Interval 26: ref RefPositions {#132@151 #134@156} physReg:NA Preferences=[rcx]
Interval 27: ref (constant) RefPositions {#142@165 #143@166} physReg:NA Preferences=[allIntButFP]
Interval 28: long (constant) RefPositions {#144@171 #146@172} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#148@173 #155@178} physReg:NA Preferences=[rcx]
Interval 30: long (constant) RefPositions {#149@175 #151@176} physReg:NA Preferences=[rdx]
Interval 31: long RefPositions {#153@177 #157@178} physReg:NA Preferences=[rdx]
Interval 32: ref RefPositions {#166@179 #167@180} physReg:NA Preferences=[rax]
Interval 33: long (constant) RefPositions {#168@185 #170@186} physReg:NA Preferences=[rcx]
Interval 34: long RefPositions {#172@187 #174@188} physReg:NA Preferences=[rcx]
Interval 35: ref RefPositions {#183@189 #184@190} physReg:NA Preferences=[rax]
Interval 36: ref RefPositions {#185@193 #187@194} physReg:NA Preferences=[rcx]
Interval 37: ref RefPositions {#189@195 #196@200} physReg:NA Preferences=[rcx]
Interval 38: ref RefPositions {#190@197 #192@198} physReg:NA Preferences=[rdx]
Interval 39: ref RefPositions {#194@199 #198@200} physReg:NA Preferences=[rdx]
Interval 40: ref RefPositions {#206@205 #207@206} physReg:NA Preferences=[allIntButFP]
Interval 41: ref RefPositions {#208@211 #210@212} physReg:NA Preferences=[rcx]
Interval 42: ref RefPositions {#212@213 #224@226} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#213@215 #215@216} physReg:NA Preferences=[rdx]
Interval 44: ref RefPositions {#217@217 #226@226} physReg:NA Preferences=[rdx]
Interval 45: int (constant) RefPositions {#218@219 #220@220} physReg:NA Preferences=[r8]
Interval 46: int RefPositions {#222@221 #228@226} physReg:NA Preferences=[r8]
Interval 47: ref RefPositions {#237@227 #238@228} physReg:NA Preferences=[rax]
Interval 48: ref RefPositions {#239@237 #241@238} physReg:NA Preferences=[rcx]
Interval 49: ref RefPositions {#243@239 #250@248} physReg:NA Preferences=[rcx]
Interval 50: int (constant) RefPositions {#244@241 #246@242} physReg:NA Preferences=[rdx]
Interval 51: int RefPositions {#248@243 #252@248} physReg:NA Preferences=[rdx]
Interval 52: int RefPositions {#261@249 #262@250} physReg:NA Preferences=[rax]
Interval 53: int RefPositions {#263@255 #265@256} physReg:NA Preferences=[rcx]
Interval 54: int RefPositions {#267@257 #269@262} physReg:NA Preferences=[rcx]
Interval 55: long (constant) RefPositions {#277@271 #279@272} physReg:NA Preferences=[rcx]
Interval 56: long RefPositions {#281@273 #288@278} physReg:NA Preferences=[rcx]
Interval 57: long (constant) RefPositions {#282@275 #284@276} physReg:NA Preferences=[rdx]
Interval 58: long RefPositions {#286@277 #290@278} physReg:NA Preferences=[rdx]
Interval 59: ref RefPositions {#299@279 #300@280} physReg:NA Preferences=[rax]
Interval 60: long (constant) RefPositions {#301@285 #303@286} physReg:NA Preferences=[rcx]
Interval 61: long RefPositions {#305@287 #307@288} physReg:NA Preferences=[rcx]
Interval 62: ref RefPositions {#316@289 #317@290} physReg:NA Preferences=[rax]
Interval 63: ref RefPositions {#318@293 #320@294} physReg:NA Preferences=[rcx]
Interval 64: ref RefPositions {#322@295 #329@300} physReg:NA Preferences=[rcx]
Interval 65: ref RefPositions {#323@297 #325@298} physReg:NA Preferences=[rdx]
Interval 66: ref RefPositions {#327@299 #331@300} physReg:NA Preferences=[rdx]
Interval 67: ref RefPositions {#339@305 #340@306} physReg:NA Preferences=[allIntButFP]
Interval 68: ref RefPositions {#341@315 #344@318} physReg:NA Preferences=[allIntButFP] RelatedInterval <I71>
Interval 69: int (constant) RefPositions {#342@317 #345@318} physReg:NA Preferences=[allIntButFP]
Interval 70: int (INTERNAL) RefPositions {#343@318 #346@318} physReg:NA Preferences=[allIntButFP]
Interval 71: byref (interfering uses) RefPositions {#347@319 #348@320} physReg:NA Preferences=[allIntButFP]
Interval 72: byref RefPositions {#349@325 #350@326} physReg:NA Preferences=[allIntButFP]
Interval 73: long RefPositions {#351@329 #352@330} physReg:NA Preferences=[allIntButFP]
Interval 74: long RefPositions {#353@339 #355@340} physReg:NA Preferences=[rcx]
Interval 75: long RefPositions {#357@341 #359@342} physReg:NA Preferences=[rcx]
Interval 76: ref RefPositions {#368@343 #369@344} physReg:NA Preferences=[rax]
Interval 77: ref RefPositions {#370@349 #371@350} physReg:NA Preferences=[allIntButFP]
Interval 78: int (constant) RefPositions {#372@359 #373@360} physReg:NA Preferences=[allIntButFP]
Interval 79: long RefPositions {#374@361 #375@362} physReg:NA Preferences=[allIntButFP]
Interval 80: ref (constant) RefPositions {#376@371 #377@372} physReg:NA Preferences=[allIntButFP]
Interval 81: int RefPositions {#378@381 #379@382} physReg:NA Preferences=[allIntButFP]
Interval 82: long RefPositions {#380@385 #382@386} physReg:NA Preferences=[rcx]
Interval 83: long RefPositions {#384@387 #386@392} physReg:NA Preferences=[rcx]
Interval 84: ref RefPositions {#395@393 #396@394} physReg:NA Preferences=[rax]
Interval 85: ref RefPositions {#397@399 #399@400} physReg:NA Preferences=[rcx]
Interval 86: ref RefPositions {#401@401 #408@410} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#402@403 #404@404} physReg:NA Preferences=[rdx]
Interval 88: ref RefPositions {#406@405 #410@410} physReg:NA Preferences=[rdx]
Interval 89: ref RefPositions {#419@411 #420@412} physReg:NA Preferences=[rax]
Interval 90: ref RefPositions {#421@417 #423@418} physReg:NA Preferences=[rcx]
Interval 91: ref RefPositions {#425@419 #427@424} physReg:NA Preferences=[rcx]

*************** In LinearScan::allocateRegisters()

Linear scan intervals before allocateRegisters:
Interval  0: long RefPositions {#12@31 #14@32} physReg:NA Preferences=[rcx]
Interval  1: long RefPositions {#16@33 #28@46} physReg:NA Preferences=[rcx]
Interval  2: long (constant) RefPositions {#17@35 #19@36} physReg:NA Preferences=[rdx]
Interval  3: long RefPositions {#21@37 #30@46} physReg:NA Preferences=[rdx]
Interval  4: int (constant) RefPositions {#22@39 #24@40} physReg:NA Preferences=[r8]
Interval  5: int RefPositions {#26@41 #32@46} physReg:NA Preferences=[r8]
Interval  6: float (INTERNAL) RefPositions {#40@54 #41@54} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval  7: long RefPositions {#42@59 #44@60} physReg:NA Preferences=[rcx]
Interval  8: long RefPositions {#46@61 #58@74} physReg:NA Preferences=[rcx]
Interval  9: long (constant) RefPositions {#47@63 #49@64} physReg:NA Preferences=[rdx]
Interval 10: long RefPositions {#51@65 #60@74} physReg:NA Preferences=[rdx]
Interval 11: int (constant) RefPositions {#52@67 #54@68} physReg:NA Preferences=[r8]
Interval 12: int RefPositions {#56@69 #62@74} physReg:NA Preferences=[r8]
Interval 13: float (INTERNAL) RefPositions {#70@82 #71@82} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 14: ref (constant) RefPositions {#72@87 #74@88} physReg:NA Preferences=[rcx]
Interval 15: ref RefPositions {#76@89 #78@94} physReg:NA Preferences=[rcx]
Interval 16: float (INTERNAL) RefPositions {#86@106 #87@106} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 17: float (INTERNAL) RefPositions {#88@112 #89@112} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 18: long RefPositions {#90@115 #92@116} physReg:NA Preferences=[rcx]
Interval 19: long RefPositions {#94@117 #101@126} physReg:NA Preferences=[rcx]
Interval 20: long RefPositions {#95@119 #97@120} physReg:NA Preferences=[rdx]
Interval 21: long RefPositions {#99@121 #103@126} physReg:NA Preferences=[rdx]
Interval 22: int RefPositions {#112@127 #113@128} physReg:NA Preferences=[rax]
Interval 23: int RefPositions {#114@133 #116@134} physReg:NA Preferences=[rcx]
Interval 24: int RefPositions {#118@135 #120@140} physReg:NA Preferences=[rcx]
Interval 25: ref (constant) RefPositions {#128@149 #130@150} physReg:NA Preferences=[rcx]
Interval 26: ref RefPositions {#132@151 #134@156} physReg:NA Preferences=[rcx]
Interval 27: ref (constant) RefPositions {#142@165 #143@166} physReg:NA Preferences=[allIntButFP]
Interval 28: long (constant) RefPositions {#144@171 #146@172} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#148@173 #155@178} physReg:NA Preferences=[rcx]
Interval 30: long (constant) RefPositions {#149@175 #151@176} physReg:NA Preferences=[rdx]
Interval 31: long RefPositions {#153@177 #157@178} physReg:NA Preferences=[rdx]
Interval 32: ref RefPositions {#166@179 #167@180} physReg:NA Preferences=[rax]
Interval 33: long (constant) RefPositions {#168@185 #170@186} physReg:NA Preferences=[rcx]
Interval 34: long RefPositions {#172@187 #174@188} physReg:NA Preferences=[rcx]
Interval 35: ref RefPositions {#183@189 #184@190} physReg:NA Preferences=[rax]
Interval 36: ref RefPositions {#185@193 #187@194} physReg:NA Preferences=[rcx]
Interval 37: ref RefPositions {#189@195 #196@200} physReg:NA Preferences=[rcx]
Interval 38: ref RefPositions {#190@197 #192@198} physReg:NA Preferences=[rdx]
Interval 39: ref RefPositions {#194@199 #198@200} physReg:NA Preferences=[rdx]
Interval 40: ref RefPositions {#206@205 #207@206} physReg:NA Preferences=[allIntButFP]
Interval 41: ref RefPositions {#208@211 #210@212} physReg:NA Preferences=[rcx]
Interval 42: ref RefPositions {#212@213 #224@226} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#213@215 #215@216} physReg:NA Preferences=[rdx]
Interval 44: ref RefPositions {#217@217 #226@226} physReg:NA Preferences=[rdx]
Interval 45: int (constant) RefPositions {#218@219 #220@220} physReg:NA Preferences=[r8]
Interval 46: int RefPositions {#222@221 #228@226} physReg:NA Preferences=[r8]
Interval 47: ref RefPositions {#237@227 #238@228} physReg:NA Preferences=[rax]
Interval 48: ref RefPositions {#239@237 #241@238} physReg:NA Preferences=[rcx]
Interval 49: ref RefPositions {#243@239 #250@248} physReg:NA Preferences=[rcx]
Interval 50: int (constant) RefPositions {#244@241 #246@242} physReg:NA Preferences=[rdx]
Interval 51: int RefPositions {#248@243 #252@248} physReg:NA Preferences=[rdx]
Interval 52: int RefPositions {#261@249 #262@250} physReg:NA Preferences=[rax]
Interval 53: int RefPositions {#263@255 #265@256} physReg:NA Preferences=[rcx]
Interval 54: int RefPositions {#267@257 #269@262} physReg:NA Preferences=[rcx]
Interval 55: long (constant) RefPositions {#277@271 #279@272} physReg:NA Preferences=[rcx]
Interval 56: long RefPositions {#281@273 #288@278} physReg:NA Preferences=[rcx]
Interval 57: long (constant) RefPositions {#282@275 #284@276} physReg:NA Preferences=[rdx]
Interval 58: long RefPositions {#286@277 #290@278} physReg:NA Preferences=[rdx]
Interval 59: ref RefPositions {#299@279 #300@280} physReg:NA Preferences=[rax]
Interval 60: long (constant) RefPositions {#301@285 #303@286} physReg:NA Preferences=[rcx]
Interval 61: long RefPositions {#305@287 #307@288} physReg:NA Preferences=[rcx]
Interval 62: ref RefPositions {#316@289 #317@290} physReg:NA Preferences=[rax]
Interval 63: ref RefPositions {#318@293 #320@294} physReg:NA Preferences=[rcx]
Interval 64: ref RefPositions {#322@295 #329@300} physReg:NA Preferences=[rcx]
Interval 65: ref RefPositions {#323@297 #325@298} physReg:NA Preferences=[rdx]
Interval 66: ref RefPositions {#327@299 #331@300} physReg:NA Preferences=[rdx]
Interval 67: ref RefPositions {#339@305 #340@306} physReg:NA Preferences=[allIntButFP]
Interval 68: ref RefPositions {#341@315 #344@318} physReg:NA Preferences=[allIntButFP] RelatedInterval <I71>
Interval 69: int (constant) RefPositions {#342@317 #345@318} physReg:NA Preferences=[allIntButFP]
Interval 70: int (INTERNAL) RefPositions {#343@318 #346@318} physReg:NA Preferences=[allIntButFP]
Interval 71: byref (interfering uses) RefPositions {#347@319 #348@320} physReg:NA Preferences=[allIntButFP]
Interval 72: byref RefPositions {#349@325 #350@326} physReg:NA Preferences=[allIntButFP]
Interval 73: long RefPositions {#351@329 #352@330} physReg:NA Preferences=[allIntButFP]
Interval 74: long RefPositions {#353@339 #355@340} physReg:NA Preferences=[rcx]
Interval 75: long RefPositions {#357@341 #359@342} physReg:NA Preferences=[rcx]
Interval 76: ref RefPositions {#368@343 #369@344} physReg:NA Preferences=[rax]
Interval 77: ref RefPositions {#370@349 #371@350} physReg:NA Preferences=[allIntButFP]
Interval 78: int (constant) RefPositions {#372@359 #373@360} physReg:NA Preferences=[allIntButFP]
Interval 79: long RefPositions {#374@361 #375@362} physReg:NA Preferences=[allIntButFP]
Interval 80: ref (constant) RefPositions {#376@371 #377@372} physReg:NA Preferences=[allIntButFP]
Interval 81: int RefPositions {#378@381 #379@382} physReg:NA Preferences=[allIntButFP]
Interval 82: long RefPositions {#380@385 #382@386} physReg:NA Preferences=[rcx]
Interval 83: long RefPositions {#384@387 #386@392} physReg:NA Preferences=[rcx]
Interval 84: ref RefPositions {#395@393 #396@394} physReg:NA Preferences=[rax]
Interval 85: ref RefPositions {#397@399 #399@400} physReg:NA Preferences=[rcx]
Interval 86: ref RefPositions {#401@401 #408@410} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#402@403 #404@404} physReg:NA Preferences=[rdx]
Interval 88: ref RefPositions {#406@405 #410@410} physReg:NA Preferences=[rdx]
Interval 89: ref RefPositions {#419@411 #420@412} physReg:NA Preferences=[rax]
Interval 90: ref RefPositions {#421@417 #423@418} physReg:NA Preferences=[rcx]
Interval 91: ref RefPositions {#425@419 #427@424} physReg:NA Preferences=[rcx]

------------
REFPOSITIONS BEFORE ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #72  @87  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #73  @88  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #74  @88  RefTypeUse <Ivl:14> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #75  @89  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #76  @89  RefTypeDef <Ivl:15> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #77  @94  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #78  @94  RefTypeUse <Ivl:15> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #79  @95  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #80  @95  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #81  @95  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #82  @95  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #83  @95  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #84  @95  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #85  @95  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #86  @106 RefTypeDef <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #87  @106 RefTypeUse <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #88  @112 RefTypeDef <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #89  @112 RefTypeUse <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #90  @115 RefTypeDef <Ivl:18> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #91  @116 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #92  @116 RefTypeUse <Ivl:18> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #93  @117 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #94  @117 RefTypeDef <Ivl:19> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #95  @119 RefTypeDef <Ivl:20> LCL_ADDR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #96  @120 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #97  @120 RefTypeUse <Ivl:20> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #98  @121 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #99  @121 RefTypeDef <Ivl:21> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #100 @126 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @126 RefTypeUse <Ivl:19> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @126 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @126 RefTypeUse <Ivl:21> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #104 @127 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #105 @127 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #106 @127 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #107 @127 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #108 @127 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #109 @127 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #110 @127 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #111 @127 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #112 @127 RefTypeDef <Ivl:22> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #113 @128 RefTypeUse <Ivl:22> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #114 @133 RefTypeDef <Ivl:23> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #115 @134 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #116 @134 RefTypeUse <Ivl:23> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #117 @135 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #118 @135 RefTypeDef <Ivl:24> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #119 @140 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #120 @140 RefTypeUse <Ivl:24> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #121 @141 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #122 @141 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #123 @141 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #124 @141 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #125 @141 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #126 @141 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #127 @141 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #128 @149 RefTypeDef <Ivl:25> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #129 @150 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #130 @150 RefTypeUse <Ivl:25> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #131 @151 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #132 @151 RefTypeDef <Ivl:26> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #133 @156 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @156 RefTypeUse <Ivl:26> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @157 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #136 @157 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #137 @157 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #138 @157 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #139 @157 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #140 @157 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #141 @157 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #142 @165 RefTypeDef <Ivl:27> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #143 @166 RefTypeUse <Ivl:27> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #144 @171 RefTypeDef <Ivl:28> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #145 @172 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @172 RefTypeUse <Ivl:28> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #147 @173 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #148 @173 RefTypeDef <Ivl:29> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #149 @175 RefTypeDef <Ivl:30> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #150 @176 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #151 @176 RefTypeUse <Ivl:30> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #152 @177 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #153 @177 RefTypeDef <Ivl:31> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #154 @178 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #155 @178 RefTypeUse <Ivl:29> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #156 @178 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #157 @178 RefTypeUse <Ivl:31> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @179 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #159 @179 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #160 @179 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #161 @179 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #162 @179 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #163 @179 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #164 @179 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #165 @179 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #166 @179 RefTypeDef <Ivl:32> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #167 @180 RefTypeUse <Ivl:32> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #168 @185 RefTypeDef <Ivl:33> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #169 @186 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #170 @186 RefTypeUse <Ivl:33> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #171 @187 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #172 @187 RefTypeDef <Ivl:34> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #173 @188 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #174 @188 RefTypeUse <Ivl:34> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #175 @189 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #176 @189 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #177 @189 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #178 @189 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #179 @189 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #180 @189 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #181 @189 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #182 @189 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #183 @189 RefTypeDef <Ivl:35> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #184 @190 RefTypeUse <Ivl:35> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #185 @193 RefTypeDef <Ivl:36> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #186 @194 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #187 @194 RefTypeUse <Ivl:36> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #188 @195 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #189 @195 RefTypeDef <Ivl:37> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #190 @197 RefTypeDef <Ivl:38> LCL_FLD BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #191 @198 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #192 @198 RefTypeUse <Ivl:38> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #193 @199 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #194 @199 RefTypeDef <Ivl:39> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #195 @200 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #196 @200 RefTypeUse <Ivl:37> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #197 @200 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @200 RefTypeUse <Ivl:39> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #199 @201 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #200 @201 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #201 @201 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #202 @201 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #203 @201 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #204 @201 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #205 @201 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #206 @205 RefTypeDef <Ivl:40> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #207 @206 RefTypeUse <Ivl:40> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #208 @211 RefTypeDef <Ivl:41> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #209 @212 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @212 RefTypeUse <Ivl:41> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #211 @213 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @213 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #213 @215 RefTypeDef <Ivl:43> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #214 @216 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @216 RefTypeUse <Ivl:43> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #216 @217 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @217 RefTypeDef <Ivl:44> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #218 @219 RefTypeDef <Ivl:45> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #219 @220 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @220 RefTypeUse <Ivl:45> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #221 @221 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @221 RefTypeDef <Ivl:46> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #223 @226 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @226 RefTypeUse <Ivl:42> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @226 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @226 RefTypeUse <Ivl:44> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @226 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @226 RefTypeUse <Ivl:46> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @227 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #230 @227 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #231 @227 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #232 @227 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #233 @227 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #234 @227 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #235 @227 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #236 @227 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #237 @227 RefTypeDef <Ivl:47> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #238 @228 RefTypeUse <Ivl:47> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #239 @237 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #240 @238 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #241 @238 RefTypeUse <Ivl:48> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #242 @239 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @239 RefTypeDef <Ivl:49> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #244 @241 RefTypeDef <Ivl:50> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #245 @242 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @242 RefTypeUse <Ivl:50> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #247 @243 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @243 RefTypeDef <Ivl:51> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #249 @248 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #250 @248 RefTypeUse <Ivl:49> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #251 @248 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #252 @248 RefTypeUse <Ivl:51> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #253 @249 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #254 @249 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #255 @249 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #256 @249 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #257 @249 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #258 @249 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #259 @249 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #260 @249 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #261 @249 RefTypeDef <Ivl:52> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #262 @250 RefTypeUse <Ivl:52> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #263 @255 RefTypeDef <Ivl:53> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #264 @256 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #265 @256 RefTypeUse <Ivl:53> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #266 @257 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #267 @257 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #268 @262 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #269 @262 RefTypeUse <Ivl:54> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #270 @263 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #271 @263 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #272 @263 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #273 @263 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #274 @263 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #275 @263 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #276 @263 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #277 @271 RefTypeDef <Ivl:55> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #278 @272 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @272 RefTypeUse <Ivl:55> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #280 @273 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @273 RefTypeDef <Ivl:56> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #282 @275 RefTypeDef <Ivl:57> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #283 @276 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #284 @276 RefTypeUse <Ivl:57> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #285 @277 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #286 @277 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #287 @278 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #288 @278 RefTypeUse <Ivl:56> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #289 @278 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #290 @278 RefTypeUse <Ivl:58> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #291 @279 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #292 @279 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #293 @279 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #294 @279 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #295 @279 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #296 @279 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #297 @279 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #298 @279 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #299 @279 RefTypeDef <Ivl:59> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #300 @280 RefTypeUse <Ivl:59> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #301 @285 RefTypeDef <Ivl:60> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #302 @286 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #303 @286 RefTypeUse <Ivl:60> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #304 @287 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #305 @287 RefTypeDef <Ivl:61> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #306 @288 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @288 RefTypeUse <Ivl:61> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @289 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #309 @289 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #310 @289 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #311 @289 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #312 @289 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #313 @289 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #314 @289 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #315 @289 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #316 @289 RefTypeDef <Ivl:62> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #317 @290 RefTypeUse <Ivl:62> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #318 @293 RefTypeDef <Ivl:63> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #319 @294 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @294 RefTypeUse <Ivl:63> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #321 @295 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @295 RefTypeDef <Ivl:64> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #323 @297 RefTypeDef <Ivl:65> LCL_FLD BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #324 @298 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @298 RefTypeUse <Ivl:65> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #326 @299 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #327 @299 RefTypeDef <Ivl:66> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #328 @300 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #329 @300 RefTypeUse <Ivl:64> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #330 @300 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #331 @300 RefTypeUse <Ivl:66> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #332 @301 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #333 @301 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #334 @301 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #335 @301 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #336 @301 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #337 @301 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #338 @301 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #339 @305 RefTypeDef <Ivl:67> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #340 @306 RefTypeUse <Ivl:67> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #341 @315 RefTypeDef <Ivl:68> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #342 @317 RefTypeDef <Ivl:69> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #343 @318 RefTypeDef <Ivl:70 internal> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #344 @318 RefTypeUse <Ivl:68> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #345 @318 RefTypeUse <Ivl:69> BB05 regmask=[allIntButFP] minReg=1 last delay wt=100.00>
<RefPosition #346 @318 RefTypeUse <Ivl:70 internal> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 last wt=400.00>
<RefPosition #347 @319 RefTypeDef <Ivl:71> INDEX_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #348 @320 RefTypeUse <Ivl:71> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #349 @325 RefTypeDef <Ivl:72> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #350 @326 RefTypeUse <Ivl:72> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #351 @329 RefTypeDef <Ivl:73> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #352 @330 RefTypeUse <Ivl:73> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #353 @339 RefTypeDef <Ivl:74> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #354 @340 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #355 @340 RefTypeUse <Ivl:74> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #356 @341 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #357 @341 RefTypeDef <Ivl:75> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #358 @342 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #359 @342 RefTypeUse <Ivl:75> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #360 @343 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #361 @343 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #362 @343 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #363 @343 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #364 @343 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #365 @343 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #366 @343 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #367 @343 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #368 @343 RefTypeDef <Ivl:76> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #369 @344 RefTypeUse <Ivl:76> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #370 @349 RefTypeDef <Ivl:77> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #371 @350 RefTypeUse <Ivl:77> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #372 @359 RefTypeDef <Ivl:78> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #373 @360 RefTypeUse <Ivl:78> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #374 @361 RefTypeDef <Ivl:79> CAST BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #375 @362 RefTypeUse <Ivl:79> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #376 @371 RefTypeDef <Ivl:80> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #377 @372 RefTypeUse <Ivl:80> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #378 @381 RefTypeDef <Ivl:81> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #379 @382 RefTypeUse <Ivl:81> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #380 @385 RefTypeDef <Ivl:82> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #381 @386 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #382 @386 RefTypeUse <Ivl:82> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #383 @387 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #384 @387 RefTypeDef <Ivl:83> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #385 @392 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #386 @392 RefTypeUse <Ivl:83> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #387 @393 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #388 @393 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #389 @393 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #390 @393 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #391 @393 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #392 @393 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #393 @393 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #394 @393 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #395 @393 RefTypeDef <Ivl:84> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #396 @394 RefTypeUse <Ivl:84> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #397 @399 RefTypeDef <Ivl:85> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #398 @400 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @400 RefTypeUse <Ivl:85> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #400 @401 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #401 @401 RefTypeDef <Ivl:86> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #402 @403 RefTypeDef <Ivl:87> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #403 @404 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #404 @404 RefTypeUse <Ivl:87> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #405 @405 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #406 @405 RefTypeDef <Ivl:88> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #407 @410 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #408 @410 RefTypeUse <Ivl:86> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #409 @410 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #410 @410 RefTypeUse <Ivl:88> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #411 @411 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #412 @411 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #413 @411 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #414 @411 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #415 @411 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #416 @411 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #417 @411 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #418 @411 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #419 @411 RefTypeDef <Ivl:89> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #420 @412 RefTypeUse <Ivl:89> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #421 @417 RefTypeDef <Ivl:90> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #422 @418 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #423 @418 RefTypeUse <Ivl:90> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #424 @419 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #425 @419 RefTypeDef <Ivl:91> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #426 @424 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #427 @424 RefTypeUse <Ivl:91> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #428 @425 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #429 @425 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #430 @425 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #431 @425 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #432 @425 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #433 @425 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #434 @425 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>


Allocating Registers
--------------------
The following table has one or more rows for each RefPosition that is handled during allocation.
The columns are: (1) Loc: LSRA location, (2) RP#: RefPosition number, (3) Name, (4) Type (e.g. Def, Use,
Fixd, Parm, DDef (Dummy Def), ExpU (Exposed Use), Kill) followed by a '*' if it is a last use, and a 'D'
if it is delayRegFree, (5) Action taken during allocation. Some actions include (a) Alloc a new register,
(b) Keep an existing register, (c) Spill a register, (d) ReLod (Reload) a register. If an ALL-CAPS name
such as COVRS is displayed, it is a score name from lsra_score.h, with a trailing '(A)' indicating alloc,
'(C)' indicating copy, and '(R)' indicating re-use. See dumpLsraAllocationEvent() for details.
The subsequent columns show the Interval occupying each register, if any, followed by 'a' if it is
active, 'p' if it is a large vector that has been partially spilled, and 'i' if it is inactive.
Columns are only printed up to the last modified register, which may increase during allocation,
in which case additional columns will appear. Registers which are not marked modified have ---- in
their column.

--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
                                            |    |    |    |    |    |    |    |    |    |
           0.#0   BB1 PredBB0               |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
           4.#1   BB2 PredBB1               |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          16.#2   BB3 PredBB2               |    |    |    |    |    |    |    |    |    |
[000107]  19.#3   rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          19.#4   rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          19.#5   rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          19.#6   r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          19.#7   r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          19.#8   r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          19.#9   r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          20.#10  BB4 PredBB2               |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          22.#11  BB5 PredBB4               |    |    |    |    |    |    |    |    |    |
[000004]  31.#12  I0   Def    Alloc    rcx  |    |I0 a|    |    |    |    |    |    |    |
[000163]  32.#13  rcx  Fixd   Keep     rcx  |    |I0 a|    |    |    |    |    |    |    |
          32.#14  I0   Use *  Keep     rcx  |    |I0 a|    |    |    |    |    |    |    |
          33.#15  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          33.#16  I1   Def    Alloc    rcx  |    |I1 a|    |    |    |    |    |    |    |
[000002]  35.#17  C2   Def    Alloc    rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
[000164]  36.#18  rdx  Fixd   Keep     rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
          36.#19  C2   Use *  Keep     rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
          37.#20  rdx  Fixd   Keep     rdx  |    |I1 a|    |    |    |    |    |    |    |
          37.#21  I3   Def    Alloc    rdx  |    |I1 a|I3 a|    |    |    |    |    |    |
[000003]  39.#22  C4   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
[000165]  40.#23  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
          40.#24  C4   Use *  Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
          41.#25  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |    |    |
          41.#26  I5   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
[000005]  46.#27  rcx  Fixd   Keep     rcx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#28  I1   Use *  Keep     rcx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#29  rdx  Fixd   Keep     rdx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#30  I3   Use *  Keep     rdx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#31  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#32  I5   Use *  Keep     r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          47.#33  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          47.#34  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          47.#35  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          47.#36  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          47.#37  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          47.#38  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          47.#39  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000007]  54.#40  I6   Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
          54.#41  I6   Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000010]  59.#42  I7   Def    Alloc    rcx  |    |I7 a|    |    |    |    |    |    |    |
[000169]  60.#43  rcx  Fixd   Keep     rcx  |    |I7 a|    |    |    |    |    |    |    |
          60.#44  I7   Use *  Keep     rcx  |    |I7 a|    |    |    |    |    |    |    |
          61.#45  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          61.#46  I8   Def    Alloc    rcx  |    |I8 a|    |    |    |    |    |    |    |
[000008]  63.#47  C9   Def    Alloc    rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
[000170]  64.#48  rdx  Fixd   Keep     rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
          64.#49  C9   Use *  Keep     rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
          65.#50  rdx  Fixd   Keep     rdx  |    |I8 a|    |    |    |    |    |    |    |
          65.#51  I10  Def    Alloc    rdx  |    |I8 a|I10a|    |    |    |    |    |    |
[000009]  67.#52  C11  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
[000171]  68.#53  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
          68.#54  C11  Use *  Keep     r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
          69.#55  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |    |    |
          69.#56  I12  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
[000011]  74.#57  rcx  Fixd   Keep     rcx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#58  I8   Use *  Keep     rcx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#59  rdx  Fixd   Keep     rdx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#60  I10  Use *  Keep     rdx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#61  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          74.#62  I12  Use *  Keep     r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
          75.#63  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          75.#64  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          75.#65  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          75.#66  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          75.#67  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          75.#68  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          75.#69  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000013]  82.#70  I13  Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
          82.#71  I13  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000111]  87.#72  C14  Def    Alloc    rcx  |    |C14a|    |    |    |    |    |    |    |
[000175]  88.#73  rcx  Fixd   Keep     rcx  |    |C14a|    |    |    |    |    |    |    |
          88.#74  C14  Use *  Keep     rcx  |    |C14a|    |    |    |    |    |    |    |
          89.#75  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          89.#76  I15  Def    Alloc    rcx  |    |I15a|    |    |    |    |    |    |    |
[000015]  94.#77  rcx  Fixd   Keep     rcx  |    |I15a|    |    |    |    |    |    |    |
          94.#78  I15  Use *  Keep     rcx  |    |I15a|    |    |    |    |    |    |    |
          95.#79  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          95.#80  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          95.#81  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          95.#82  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          95.#83  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          95.#84  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          95.#85  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000112] 106.#86  I16  Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
         106.#87  I16  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000113] 112.#88  I17  Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
         112.#89  I17  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000114] 115.#90  I18  Def    Alloc    rcx  |    |I18a|    |    |    |    |    |    |    |
[000180] 116.#91  rcx  Fixd   Keep     rcx  |    |I18a|    |    |    |    |    |    |    |
         116.#92  I18  Use *  Keep     rcx  |    |I18a|    |    |    |    |    |    |    |
         117.#93  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         117.#94  I19  Def    Alloc    rcx  |    |I19a|    |    |    |    |    |    |    |
[000115] 119.#95  I20  Def    Alloc    rdx  |    |I19a|I20a|    |    |    |    |    |    |
[000181] 120.#96  rdx  Fixd   Keep     rdx  |    |I19a|I20a|    |    |    |    |    |    |
         120.#97  I20  Use *  Keep     rdx  |    |I19a|I20a|    |    |    |    |    |    |
         121.#98  rdx  Fixd   Keep     rdx  |    |I19a|    |    |    |    |    |    |    |
         121.#99  I21  Def    Alloc    rdx  |    |I19a|I21a|    |    |    |    |    |    |
[000019] 126.#100 rcx  Fixd   Keep     rcx  |    |I19a|I21a|    |    |    |    |    |    |
         126.#101 I19  Use *  Keep     rcx  |    |I19a|I21a|    |    |    |    |    |    |
         126.#102 rdx  Fixd   Keep     rdx  |    |I19a|I21a|    |    |    |    |    |    |
         126.#103 I21  Use *  Keep     rdx  |    |I19a|I21a|    |    |    |    |    |    |
         127.#104 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         127.#105 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         127.#106 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         127.#107 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         127.#108 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         127.#109 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         127.#110 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         127.#111 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         127.#112 I22  Def    Alloc    rax  |I22a|    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
[000020] 128.#113 I22  Use *  Keep     rax  |I22a|    |    |    |    |    |    |    |    |
[000021] 133.#114 I23  Def    Alloc    rcx  |    |I23a|    |    |    |    |    |    |    |
[000184] 134.#115 rcx  Fixd   Keep     rcx  |    |I23a|    |    |    |    |    |    |    |
         134.#116 I23  Use *  Keep     rcx  |    |I23a|    |    |    |    |    |    |    |
         135.#117 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         135.#118 I24  Def    Alloc    rcx  |    |I24a|    |    |    |    |    |    |    |
[000022] 140.#119 rcx  Fixd   Keep     rcx  |    |I24a|    |    |    |    |    |    |    |
         140.#120 I24  Use *  Keep     rcx  |    |I24a|    |    |    |    |    |    |    |
         141.#121 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         141.#122 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         141.#123 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         141.#124 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         141.#125 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         141.#126 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         141.#127 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000116] 149.#128 C25  Def    Alloc    rcx  |    |C25a|    |    |    |    |    |    |    |
[000187] 150.#129 rcx  Fixd   Keep     rcx  |    |C25a|    |    |    |    |    |    |    |
         150.#130 C25  Use *  Keep     rcx  |    |C25a|    |    |    |    |    |    |    |
         151.#131 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         151.#132 I26  Def    Alloc    rcx  |    |I26a|    |    |    |    |    |    |    |
[000025] 156.#133 rcx  Fixd   Keep     rcx  |    |I26a|    |    |    |    |    |    |    |
         156.#134 I26  Use *  Keep     rcx  |    |I26a|    |    |    |    |    |    |    |
         157.#135 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         157.#136 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         157.#137 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         157.#138 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         157.#139 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         157.#140 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         157.#141 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000117] 165.#142 C27  Def    BSFIT(A) rcx  |    |C27a|    |    |    |    |    |    |    |
[000028] 166.#143 C27  Use *  Keep     rcx  |    |C27a|    |    |    |    |    |    |    |
[000030] 171.#144 C28  Def    Alloc    rcx  |    |C28a|    |    |    |    |    |    |    |
[000190] 172.#145 rcx  Fixd   Keep     rcx  |    |C28a|    |    |    |    |    |    |    |
         172.#146 C28  Use *  Keep     rcx  |    |C28a|    |    |    |    |    |    |    |
         173.#147 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         173.#148 I29  Def    Alloc    rcx  |    |I29a|    |    |    |    |    |    |    |
[000029] 175.#149 C30  Def    Alloc    rdx  |    |I29a|C30a|    |    |    |    |    |    |
[000191] 176.#150 rdx  Fixd   Keep     rdx  |    |I29a|C30a|    |    |    |    |    |    |
         176.#151 C30  Use *  Keep     rdx  |    |I29a|C30a|    |    |    |    |    |    |
         177.#152 rdx  Fixd   Keep     rdx  |    |I29a|    |    |    |    |    |    |    |
         177.#153 I31  Def    Alloc    rdx  |    |I29a|I31a|    |    |    |    |    |    |
[000031] 178.#154 rcx  Fixd   Keep     rcx  |    |I29a|I31a|    |    |    |    |    |    |
         178.#155 I29  Use *  Keep     rcx  |    |I29a|I31a|    |    |    |    |    |    |
         178.#156 rdx  Fixd   Keep     rdx  |    |I29a|I31a|    |    |    |    |    |    |
         178.#157 I31  Use *  Keep     rdx  |    |I29a|I31a|    |    |    |    |    |    |
         179.#158 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         179.#159 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         179.#160 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         179.#161 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         179.#162 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         179.#163 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         179.#164 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         179.#165 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         179.#166 I32  Def    Alloc    rax  |I32a|    |    |    |    |    |    |    |    |
[000032] 180.#167 I32  Use *  Keep     rax  |I32a|    |    |    |    |    |    |    |    |
[000035] 185.#168 C33  Def    Alloc    rcx  |    |C33a|    |    |    |    |    |    |    |
[000192] 186.#169 rcx  Fixd   Keep     rcx  |    |C33a|    |    |    |    |    |    |    |
         186.#170 C33  Use *  Keep     rcx  |    |C33a|    |    |    |    |    |    |    |
         187.#171 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         187.#172 I34  Def    Alloc    rcx  |    |I34a|    |    |    |    |    |    |    |
[000036] 188.#173 rcx  Fixd   Keep     rcx  |    |I34a|    |    |    |    |    |    |    |
         188.#174 I34  Use *  Keep     rcx  |    |I34a|    |    |    |    |    |    |    |
         189.#175 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         189.#176 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         189.#177 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         189.#178 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         189.#179 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         189.#180 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         189.#181 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         189.#182 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         189.#183 I35  Def    Alloc    rax  |I35a|    |    |    |    |    |    |    |    |
[000038] 190.#184 I35  Use *  Keep     rax  |I35a|    |    |    |    |    |    |    |    |
[000034] 193.#185 I36  Def    Alloc    rcx  |    |I36a|    |    |    |    |    |    |    |
[000193] 194.#186 rcx  Fixd   Keep     rcx  |    |I36a|    |    |    |    |    |    |    |
         194.#187 I36  Use *  Keep     rcx  |    |I36a|    |    |    |    |    |    |    |
         195.#188 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         195.#189 I37  Def    Alloc    rcx  |    |I37a|    |    |    |    |    |    |    |
[000039] 197.#190 I38  Def    Alloc    rdx  |    |I37a|I38a|    |    |    |    |    |    |
[000194] 198.#191 rdx  Fixd   Keep     rdx  |    |I37a|I38a|    |    |    |    |    |    |
         198.#192 I38  Use *  Keep     rdx  |    |I37a|I38a|    |    |    |    |    |    |
         199.#193 rdx  Fixd   Keep     rdx  |    |I37a|    |    |    |    |    |    |    |
         199.#194 I39  Def    Alloc    rdx  |    |I37a|I39a|    |    |    |    |    |    |
[000037] 200.#195 rcx  Fixd   Keep     rcx  |    |I37a|I39a|    |    |    |    |    |    |
         200.#196 I37  Use *  Keep     rcx  |    |I37a|I39a|    |    |    |    |    |    |
         200.#197 rdx  Fixd   Keep     rdx  |    |I37a|I39a|    |    |    |    |    |    |
         200.#198 I39  Use *  Keep     rdx  |    |I37a|I39a|    |    |    |    |    |    |
         201.#199 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         201.#200 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         201.#201 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         201.#202 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         201.#203 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         201.#204 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         201.#205 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000033] 205.#206 I40  Def    BSFIT(A) rcx  |    |I40a|    |    |    |    |    |    |    |
[000040] 206.#207 I40  Use *  Keep     rcx  |    |I40a|    |    |    |    |    |    |    |
[000041] 211.#208 I41  Def    Alloc    rcx  |    |I41a|    |    |    |    |    |    |    |
[000195] 212.#209 rcx  Fixd   Keep     rcx  |    |I41a|    |    |    |    |    |    |    |
         212.#210 I41  Use *  Keep     rcx  |    |I41a|    |    |    |    |    |    |    |
         213.#211 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         213.#212 I42  Def    Alloc    rcx  |    |I42a|    |    |    |    |    |    |    |
[000042] 215.#213 I43  Def    Alloc    rdx  |    |I42a|I43a|    |    |    |    |    |    |
[000196] 216.#214 rdx  Fixd   Keep     rdx  |    |I42a|I43a|    |    |    |    |    |    |
         216.#215 I43  Use *  Keep     rdx  |    |I42a|I43a|    |    |    |    |    |    |
         217.#216 rdx  Fixd   Keep     rdx  |    |I42a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         217.#217 I44  Def    Alloc    rdx  |    |I42a|I44a|    |    |    |    |    |    |
[000043] 219.#218 C45  Def    Alloc    r8   |    |I42a|I44a|    |    |    |    |C45a|    |
[000197] 220.#219 r8   Fixd   Keep     r8   |    |I42a|I44a|    |    |    |    |C45a|    |
         220.#220 C45  Use *  Keep     r8   |    |I42a|I44a|    |    |    |    |C45a|    |
         221.#221 r8   Fixd   Keep     r8   |    |I42a|I44a|    |    |    |    |    |    |
         221.#222 I46  Def    Alloc    r8   |    |I42a|I44a|    |    |    |    |I46a|    |
[000044] 226.#223 rcx  Fixd   Keep     rcx  |    |I42a|I44a|    |    |    |    |I46a|    |
         226.#224 I42  Use *  Keep     rcx  |    |I42a|I44a|    |    |    |    |I46a|    |
         226.#225 rdx  Fixd   Keep     rdx  |    |I42a|I44a|    |    |    |    |I46a|    |
         226.#226 I44  Use *  Keep     rdx  |    |I42a|I44a|    |    |    |    |I46a|    |
         226.#227 r8   Fixd   Keep     r8   |    |I42a|I44a|    |    |    |    |I46a|    |
         226.#228 I46  Use *  Keep     r8   |    |I42a|I44a|    |    |    |    |I46a|    |
         227.#229 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         227.#230 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         227.#231 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         227.#232 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         227.#233 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         227.#234 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         227.#235 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         227.#236 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         227.#237 I47  Def    Alloc    rax  |I47a|    |    |    |    |    |    |    |    |
[000045] 228.#238 I47  Use *  Keep     rax  |I47a|    |    |    |    |    |    |    |    |
[000048] 237.#239 I48  Def    Alloc    rcx  |    |I48a|    |    |    |    |    |    |    |
[000200] 238.#240 rcx  Fixd   Keep     rcx  |    |I48a|    |    |    |    |    |    |    |
         238.#241 I48  Use *  Keep     rcx  |    |I48a|    |    |    |    |    |    |    |
         239.#242 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         239.#243 I49  Def    Alloc    rcx  |    |I49a|    |    |    |    |    |    |    |
[000049] 241.#244 C50  Def    Alloc    rdx  |    |I49a|C50a|    |    |    |    |    |    |
[000201] 242.#245 rdx  Fixd   Keep     rdx  |    |I49a|C50a|    |    |    |    |    |    |
         242.#246 C50  Use *  Keep     rdx  |    |I49a|C50a|    |    |    |    |    |    |
         243.#247 rdx  Fixd   Keep     rdx  |    |I49a|    |    |    |    |    |    |    |
         243.#248 I51  Def    Alloc    rdx  |    |I49a|I51a|    |    |    |    |    |    |
[000050] 248.#249 rcx  Fixd   Keep     rcx  |    |I49a|I51a|    |    |    |    |    |    |
         248.#250 I49  Use *  Keep     rcx  |    |I49a|I51a|    |    |    |    |    |    |
         248.#251 rdx  Fixd   Keep     rdx  |    |I49a|I51a|    |    |    |    |    |    |
         248.#252 I51  Use *  Keep     rdx  |    |I49a|I51a|    |    |    |    |    |    |
         249.#253 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         249.#254 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         249.#255 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         249.#256 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         249.#257 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         249.#258 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         249.#259 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         249.#260 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         249.#261 I52  Def    Alloc    rax  |I52a|    |    |    |    |    |    |    |    |
[000051] 250.#262 I52  Use *  Keep     rax  |I52a|    |    |    |    |    |    |    |    |
[000052] 255.#263 I53  Def    Alloc    rcx  |    |I53a|    |    |    |    |    |    |    |
[000204] 256.#264 rcx  Fixd   Keep     rcx  |    |I53a|    |    |    |    |    |    |    |
         256.#265 I53  Use *  Keep     rcx  |    |I53a|    |    |    |    |    |    |    |
         257.#266 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         257.#267 I54  Def    Alloc    rcx  |    |I54a|    |    |    |    |    |    |    |
[000053] 262.#268 rcx  Fixd   Keep     rcx  |    |I54a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         262.#269 I54  Use *  Keep     rcx  |    |I54a|    |    |    |    |    |    |    |
         263.#270 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         263.#271 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         263.#272 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         263.#273 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         263.#274 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         263.#275 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         263.#276 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000056] 271.#277 C55  Def    Alloc    rcx  |    |C55a|    |    |    |    |    |    |    |
[000207] 272.#278 rcx  Fixd   Keep     rcx  |    |C55a|    |    |    |    |    |    |    |
         272.#279 C55  Use *  Keep     rcx  |    |C55a|    |    |    |    |    |    |    |
         273.#280 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         273.#281 I56  Def    Alloc    rcx  |    |I56a|    |    |    |    |    |    |    |
[000055] 275.#282 C57  Def    Alloc    rdx  |    |I56a|C57a|    |    |    |    |    |    |
[000208] 276.#283 rdx  Fixd   Keep     rdx  |    |I56a|C57a|    |    |    |    |    |    |
         276.#284 C57  Use *  Keep     rdx  |    |I56a|C57a|    |    |    |    |    |    |
         277.#285 rdx  Fixd   Keep     rdx  |    |I56a|    |    |    |    |    |    |    |
         277.#286 I58  Def    Alloc    rdx  |    |I56a|I58a|    |    |    |    |    |    |
[000057] 278.#287 rcx  Fixd   Keep     rcx  |    |I56a|I58a|    |    |    |    |    |    |
         278.#288 I56  Use *  Keep     rcx  |    |I56a|I58a|    |    |    |    |    |    |
         278.#289 rdx  Fixd   Keep     rdx  |    |I56a|I58a|    |    |    |    |    |    |
         278.#290 I58  Use *  Keep     rdx  |    |I56a|I58a|    |    |    |    |    |    |
         279.#291 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         279.#292 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         279.#293 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         279.#294 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         279.#295 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         279.#296 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         279.#297 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         279.#298 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         279.#299 I59  Def    Alloc    rax  |I59a|    |    |    |    |    |    |    |    |
[000058] 280.#300 I59  Use *  Keep     rax  |I59a|    |    |    |    |    |    |    |    |
[000061] 285.#301 C60  Def    Alloc    rcx  |    |C60a|    |    |    |    |    |    |    |
[000209] 286.#302 rcx  Fixd   Keep     rcx  |    |C60a|    |    |    |    |    |    |    |
         286.#303 C60  Use *  Keep     rcx  |    |C60a|    |    |    |    |    |    |    |
         287.#304 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         287.#305 I61  Def    Alloc    rcx  |    |I61a|    |    |    |    |    |    |    |
[000062] 288.#306 rcx  Fixd   Keep     rcx  |    |I61a|    |    |    |    |    |    |    |
         288.#307 I61  Use *  Keep     rcx  |    |I61a|    |    |    |    |    |    |    |
         289.#308 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         289.#309 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         289.#310 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         289.#311 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         289.#312 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         289.#313 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         289.#314 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         289.#315 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         289.#316 I62  Def    Alloc    rax  |I62a|    |    |    |    |    |    |    |    |
[000064] 290.#317 I62  Use *  Keep     rax  |I62a|    |    |    |    |    |    |    |    |
[000060] 293.#318 I63  Def    Alloc    rcx  |    |I63a|    |    |    |    |    |    |    |
[000210] 294.#319 rcx  Fixd   Keep     rcx  |    |I63a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         294.#320 I63  Use *  Keep     rcx  |    |I63a|    |    |    |    |    |    |    |
         295.#321 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         295.#322 I64  Def    Alloc    rcx  |    |I64a|    |    |    |    |    |    |    |
[000065] 297.#323 I65  Def    Alloc    rdx  |    |I64a|I65a|    |    |    |    |    |    |
[000211] 298.#324 rdx  Fixd   Keep     rdx  |    |I64a|I65a|    |    |    |    |    |    |
         298.#325 I65  Use *  Keep     rdx  |    |I64a|I65a|    |    |    |    |    |    |
         299.#326 rdx  Fixd   Keep     rdx  |    |I64a|    |    |    |    |    |    |    |
         299.#327 I66  Def    Alloc    rdx  |    |I64a|I66a|    |    |    |    |    |    |
[000063] 300.#328 rcx  Fixd   Keep     rcx  |    |I64a|I66a|    |    |    |    |    |    |
         300.#329 I64  Use *  Keep     rcx  |    |I64a|I66a|    |    |    |    |    |    |
         300.#330 rdx  Fixd   Keep     rdx  |    |I64a|I66a|    |    |    |    |    |    |
         300.#331 I66  Use *  Keep     rdx  |    |I64a|I66a|    |    |    |    |    |    |
         301.#332 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         301.#333 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         301.#334 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         301.#335 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         301.#336 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         301.#337 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         301.#338 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000059] 305.#339 I67  Def    BSFIT(A) rcx  |    |I67a|    |    |    |    |    |    |    |
[000066] 306.#340 I67  Use *  Keep     rcx  |    |I67a|    |    |    |    |    |    |    |
[000068] 315.#341 I68  Def    BSFIT(A) rcx  |    |I68a|    |    |    |    |    |    |    |
[000069] 317.#342 C69  Def    ORDER(A) rax  |C69a|I68a|    |    |    |    |    |    |    |
[000070] 318.#343 I70  Def    ORDER(A) rdx  |C69a|I68a|I70a|    |    |    |    |    |    |
         318.#344 I68  Use *  Keep     rcx  |C69a|I68a|I70a|    |    |    |    |    |    |
         318.#345 C69  Use *D Keep     rax  |C69a|I68a|I70a|    |    |    |    |    |    |
         318.#346 I70  Use *  Keep     rdx  |C69a|I68a|I70a|    |    |    |    |    |    |
         319.#347 I71  Def    COVRS(A) rcx  |C69a|I71a|    |    |    |    |    |    |    |
[000071] 320.#348 I71  Use *  Keep     rcx  |C69i|I71a|    |    |    |    |    |    |    |
[000072] 325.#349 I72  Def    BSFIT(A) rcx  |C69i|I72a|    |    |    |    |    |    |    |
[000118] 326.#350 I72  Use *  Keep     rcx  |C69i|I72a|    |    |    |    |    |    |    |
[000119] 329.#351 I73  Def    BSFIT(A) rcx  |C69i|I73a|    |    |    |    |    |    |    |
[000074] 330.#352 I73  Use *  Keep     rcx  |C69i|I73a|    |    |    |    |    |    |    |
[000076] 339.#353 I74  Def    Alloc    rcx  |C69i|I74a|    |    |    |    |    |    |    |
[000212] 340.#354 rcx  Fixd   Keep     rcx  |C69i|I74a|    |    |    |    |    |    |    |
         340.#355 I74  Use *  Keep     rcx  |C69i|I74a|    |    |    |    |    |    |    |
         341.#356 rcx  Fixd   Keep     rcx  |C69i|    |    |    |    |    |    |    |    |
         341.#357 I75  Def    Alloc    rcx  |C69i|I75a|    |    |    |    |    |    |    |
[000077] 342.#358 rcx  Fixd   Keep     rcx  |C69i|I75a|    |    |    |    |    |    |    |
         342.#359 I75  Use *  Keep     rcx  |C69i|I75a|    |    |    |    |    |    |    |
         343.#360 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         343.#361 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         343.#362 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         343.#363 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         343.#364 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         343.#365 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         343.#366 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         343.#367 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         343.#368 I76  Def    Alloc    rax  |I76a|    |    |    |    |    |    |    |    |
[000078] 344.#369 I76  Use *  Keep     rax  |I76a|    |    |    |    |    |    |    |    |
[000079] 349.#370 I77  Def    BSFIT(A) rcx  |    |I77a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
[000080] 350.#371 I77  Use *  Keep     rcx  |    |I77a|    |    |    |    |    |    |    |
[000082] 359.#372 C78  Def    BSFIT(A) rcx  |    |C78a|    |    |    |    |    |    |    |
[000083] 360.#373 C78  Use *  Keep     rcx  |    |C78a|    |    |    |    |    |    |    |
         361.#374 I79  Def    BSFIT(A) rcx  |    |I79a|    |    |    |    |    |    |    |
[000084] 362.#375 I79  Use *  Keep     rcx  |    |I79a|    |    |    |    |    |    |    |
[000122] 371.#376 C80  Def    BSFIT(A) rcx  |    |C80a|    |    |    |    |    |    |    |
[000088] 372.#377 C80  Use *  Keep     rcx  |    |C80a|    |    |    |    |    |    |    |
[000091] 381.#378 I81  Def    BSFIT(A) rcx  |    |I81a|    |    |    |    |    |    |    |
[000092] 382.#379 I81  Use *  Keep     rcx  |    |I81a|    |    |    |    |    |    |    |
[000093] 385.#380 I82  Def    Alloc    rcx  |    |I82a|    |    |    |    |    |    |    |
[000213] 386.#381 rcx  Fixd   Keep     rcx  |    |I82a|    |    |    |    |    |    |    |
         386.#382 I82  Use *  Keep     rcx  |    |I82a|    |    |    |    |    |    |    |
         387.#383 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         387.#384 I83  Def    Alloc    rcx  |    |I83a|    |    |    |    |    |    |    |
[000094] 392.#385 rcx  Fixd   Keep     rcx  |    |I83a|    |    |    |    |    |    |    |
         392.#386 I83  Use *  Keep     rcx  |    |I83a|    |    |    |    |    |    |    |
         393.#387 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         393.#388 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         393.#389 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         393.#390 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         393.#391 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         393.#392 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         393.#393 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         393.#394 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         393.#395 I84  Def    Alloc    rax  |I84a|    |    |    |    |    |    |    |    |
[000095] 394.#396 I84  Use *  Keep     rax  |I84a|    |    |    |    |    |    |    |    |
[000089] 399.#397 I85  Def    Alloc    rcx  |    |I85a|    |    |    |    |    |    |    |
[000216] 400.#398 rcx  Fixd   Keep     rcx  |    |I85a|    |    |    |    |    |    |    |
         400.#399 I85  Use *  Keep     rcx  |    |I85a|    |    |    |    |    |    |    |
         401.#400 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         401.#401 I86  Def    Alloc    rcx  |    |I86a|    |    |    |    |    |    |    |
[000096] 403.#402 I87  Def    Alloc    rdx  |    |I86a|I87a|    |    |    |    |    |    |
[000217] 404.#403 rdx  Fixd   Keep     rdx  |    |I86a|I87a|    |    |    |    |    |    |
         404.#404 I87  Use *  Keep     rdx  |    |I86a|I87a|    |    |    |    |    |    |
         405.#405 rdx  Fixd   Keep     rdx  |    |I86a|    |    |    |    |    |    |    |
         405.#406 I88  Def    Alloc    rdx  |    |I86a|I88a|    |    |    |    |    |    |
[000097] 410.#407 rcx  Fixd   Keep     rcx  |    |I86a|I88a|    |    |    |    |    |    |
         410.#408 I86  Use *  Keep     rcx  |    |I86a|I88a|    |    |    |    |    |    |
         410.#409 rdx  Fixd   Keep     rdx  |    |I86a|I88a|    |    |    |    |    |    |
         410.#410 I88  Use *  Keep     rdx  |    |I86a|I88a|    |    |    |    |    |    |
         411.#411 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         411.#412 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         411.#413 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         411.#414 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         411.#415 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         411.#416 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         411.#417 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         411.#418 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         411.#419 I89  Def    Alloc    rax  |I89a|    |    |    |    |    |    |    |    |
[000098] 412.#420 I89  Use *  Keep     rax  |I89a|    |    |    |    |    |    |    |    |
[000099] 417.#421 I90  Def    Alloc    rcx  |    |I90a|    |    |    |    |    |    |    |
[000220] 418.#422 rcx  Fixd   Keep     rcx  |    |I90a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         418.#423 I90  Use *  Keep     rcx  |    |I90a|    |    |    |    |    |    |    |
         419.#424 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         419.#425 I91  Def    Alloc    rcx  |    |I91a|    |    |    |    |    |    |    |
[000100] 424.#426 rcx  Fixd   Keep     rcx  |    |I91a|    |    |    |    |    |    |    |
         424.#427 I91  Use *  Keep     rcx  |    |I91a|    |    |    |    |    |    |    |
         425.#428 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         425.#429 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         425.#430 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         425.#431 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         425.#432 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         425.#433 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         425.#434 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |

------------
REFPOSITIONS AFTER ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #72  @87  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #73  @88  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #74  @88  RefTypeUse <Ivl:14> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #75  @89  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #76  @89  RefTypeDef <Ivl:15> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #77  @94  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #78  @94  RefTypeUse <Ivl:15> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #79  @95  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #80  @95  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #81  @95  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #82  @95  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #83  @95  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #84  @95  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #85  @95  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #86  @106 RefTypeDef <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #87  @106 RefTypeUse <Ivl:16 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #88  @112 RefTypeDef <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #89  @112 RefTypeUse <Ivl:17 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #90  @115 RefTypeDef <Ivl:18> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #91  @116 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #92  @116 RefTypeUse <Ivl:18> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #93  @117 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #94  @117 RefTypeDef <Ivl:19> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #95  @119 RefTypeDef <Ivl:20> LCL_ADDR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #96  @120 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #97  @120 RefTypeUse <Ivl:20> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #98  @121 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #99  @121 RefTypeDef <Ivl:21> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #100 @126 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @126 RefTypeUse <Ivl:19> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @126 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @126 RefTypeUse <Ivl:21> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #104 @127 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #105 @127 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #106 @127 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #107 @127 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #108 @127 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #109 @127 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #110 @127 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #111 @127 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #112 @127 RefTypeDef <Ivl:22> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #113 @128 RefTypeUse <Ivl:22> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #114 @133 RefTypeDef <Ivl:23> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #115 @134 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #116 @134 RefTypeUse <Ivl:23> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #117 @135 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #118 @135 RefTypeDef <Ivl:24> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #119 @140 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #120 @140 RefTypeUse <Ivl:24> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #121 @141 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #122 @141 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #123 @141 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #124 @141 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #125 @141 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #126 @141 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #127 @141 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #128 @149 RefTypeDef <Ivl:25> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #129 @150 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #130 @150 RefTypeUse <Ivl:25> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #131 @151 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #132 @151 RefTypeDef <Ivl:26> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #133 @156 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @156 RefTypeUse <Ivl:26> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @157 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #136 @157 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #137 @157 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #138 @157 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #139 @157 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #140 @157 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #141 @157 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #142 @165 RefTypeDef <Ivl:27> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #143 @166 RefTypeUse <Ivl:27> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #144 @171 RefTypeDef <Ivl:28> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #145 @172 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @172 RefTypeUse <Ivl:28> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #147 @173 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #148 @173 RefTypeDef <Ivl:29> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #149 @175 RefTypeDef <Ivl:30> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #150 @176 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #151 @176 RefTypeUse <Ivl:30> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #152 @177 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #153 @177 RefTypeDef <Ivl:31> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #154 @178 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #155 @178 RefTypeUse <Ivl:29> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #156 @178 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #157 @178 RefTypeUse <Ivl:31> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @179 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #159 @179 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #160 @179 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #161 @179 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #162 @179 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #163 @179 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #164 @179 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #165 @179 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #166 @179 RefTypeDef <Ivl:32> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #167 @180 RefTypeUse <Ivl:32> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #168 @185 RefTypeDef <Ivl:33> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #169 @186 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #170 @186 RefTypeUse <Ivl:33> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #171 @187 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #172 @187 RefTypeDef <Ivl:34> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #173 @188 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #174 @188 RefTypeUse <Ivl:34> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #175 @189 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #176 @189 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #177 @189 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #178 @189 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #179 @189 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #180 @189 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #181 @189 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #182 @189 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #183 @189 RefTypeDef <Ivl:35> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #184 @190 RefTypeUse <Ivl:35> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #185 @193 RefTypeDef <Ivl:36> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #186 @194 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #187 @194 RefTypeUse <Ivl:36> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #188 @195 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #189 @195 RefTypeDef <Ivl:37> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #190 @197 RefTypeDef <Ivl:38> LCL_FLD BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #191 @198 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #192 @198 RefTypeUse <Ivl:38> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #193 @199 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #194 @199 RefTypeDef <Ivl:39> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #195 @200 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #196 @200 RefTypeUse <Ivl:37> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #197 @200 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @200 RefTypeUse <Ivl:39> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #199 @201 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #200 @201 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #201 @201 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #202 @201 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #203 @201 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #204 @201 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #205 @201 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #206 @205 RefTypeDef <Ivl:40> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #207 @206 RefTypeUse <Ivl:40> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #208 @211 RefTypeDef <Ivl:41> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #209 @212 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @212 RefTypeUse <Ivl:41> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #211 @213 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @213 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #213 @215 RefTypeDef <Ivl:43> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #214 @216 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @216 RefTypeUse <Ivl:43> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #216 @217 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @217 RefTypeDef <Ivl:44> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #218 @219 RefTypeDef <Ivl:45> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #219 @220 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @220 RefTypeUse <Ivl:45> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #221 @221 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @221 RefTypeDef <Ivl:46> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #223 @226 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @226 RefTypeUse <Ivl:42> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @226 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @226 RefTypeUse <Ivl:44> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @226 RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @226 RefTypeUse <Ivl:46> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @227 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #230 @227 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #231 @227 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #232 @227 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #233 @227 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #234 @227 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #235 @227 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #236 @227 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #237 @227 RefTypeDef <Ivl:47> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #238 @228 RefTypeUse <Ivl:47> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #239 @237 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #240 @238 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #241 @238 RefTypeUse <Ivl:48> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #242 @239 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @239 RefTypeDef <Ivl:49> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #244 @241 RefTypeDef <Ivl:50> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #245 @242 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @242 RefTypeUse <Ivl:50> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #247 @243 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @243 RefTypeDef <Ivl:51> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #249 @248 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #250 @248 RefTypeUse <Ivl:49> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #251 @248 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #252 @248 RefTypeUse <Ivl:51> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #253 @249 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #254 @249 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #255 @249 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #256 @249 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #257 @249 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #258 @249 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #259 @249 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #260 @249 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #261 @249 RefTypeDef <Ivl:52> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #262 @250 RefTypeUse <Ivl:52> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #263 @255 RefTypeDef <Ivl:53> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #264 @256 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #265 @256 RefTypeUse <Ivl:53> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #266 @257 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #267 @257 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #268 @262 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #269 @262 RefTypeUse <Ivl:54> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #270 @263 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #271 @263 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #272 @263 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #273 @263 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #274 @263 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #275 @263 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #276 @263 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #277 @271 RefTypeDef <Ivl:55> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #278 @272 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @272 RefTypeUse <Ivl:55> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #280 @273 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @273 RefTypeDef <Ivl:56> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #282 @275 RefTypeDef <Ivl:57> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #283 @276 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #284 @276 RefTypeUse <Ivl:57> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #285 @277 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #286 @277 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #287 @278 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #288 @278 RefTypeUse <Ivl:56> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #289 @278 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #290 @278 RefTypeUse <Ivl:58> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #291 @279 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #292 @279 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #293 @279 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #294 @279 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #295 @279 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #296 @279 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #297 @279 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #298 @279 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #299 @279 RefTypeDef <Ivl:59> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #300 @280 RefTypeUse <Ivl:59> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #301 @285 RefTypeDef <Ivl:60> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #302 @286 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #303 @286 RefTypeUse <Ivl:60> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #304 @287 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #305 @287 RefTypeDef <Ivl:61> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #306 @288 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @288 RefTypeUse <Ivl:61> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @289 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #309 @289 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #310 @289 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #311 @289 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #312 @289 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #313 @289 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #314 @289 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #315 @289 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #316 @289 RefTypeDef <Ivl:62> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #317 @290 RefTypeUse <Ivl:62> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #318 @293 RefTypeDef <Ivl:63> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #319 @294 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @294 RefTypeUse <Ivl:63> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #321 @295 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @295 RefTypeDef <Ivl:64> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #323 @297 RefTypeDef <Ivl:65> LCL_FLD BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #324 @298 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @298 RefTypeUse <Ivl:65> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #326 @299 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #327 @299 RefTypeDef <Ivl:66> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #328 @300 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #329 @300 RefTypeUse <Ivl:64> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #330 @300 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #331 @300 RefTypeUse <Ivl:66> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #332 @301 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #333 @301 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #334 @301 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #335 @301 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #336 @301 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #337 @301 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #338 @301 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #339 @305 RefTypeDef <Ivl:67> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #340 @306 RefTypeUse <Ivl:67> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #341 @315 RefTypeDef <Ivl:68> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #342 @317 RefTypeDef <Ivl:69> CNS_INT BB05 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #343 @318 RefTypeDef <Ivl:70 internal> INDEX_ADDR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #344 @318 RefTypeUse <Ivl:68> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #345 @318 RefTypeUse <Ivl:69> BB05 regmask=[rax] minReg=1 last delay wt=100.00>
<RefPosition #346 @318 RefTypeUse <Ivl:70 internal> INDEX_ADDR BB05 regmask=[rdx] minReg=1 last wt=400.00>
<RefPosition #347 @319 RefTypeDef <Ivl:71> INDEX_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #348 @320 RefTypeUse <Ivl:71> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #349 @325 RefTypeDef <Ivl:72> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #350 @326 RefTypeUse <Ivl:72> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #351 @329 RefTypeDef <Ivl:73> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #352 @330 RefTypeUse <Ivl:73> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #353 @339 RefTypeDef <Ivl:74> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #354 @340 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #355 @340 RefTypeUse <Ivl:74> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #356 @341 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #357 @341 RefTypeDef <Ivl:75> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #358 @342 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #359 @342 RefTypeUse <Ivl:75> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #360 @343 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #361 @343 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #362 @343 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #363 @343 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #364 @343 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #365 @343 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #366 @343 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #367 @343 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #368 @343 RefTypeDef <Ivl:76> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #369 @344 RefTypeUse <Ivl:76> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #370 @349 RefTypeDef <Ivl:77> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #371 @350 RefTypeUse <Ivl:77> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #372 @359 RefTypeDef <Ivl:78> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #373 @360 RefTypeUse <Ivl:78> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #374 @361 RefTypeDef <Ivl:79> CAST BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #375 @362 RefTypeUse <Ivl:79> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #376 @371 RefTypeDef <Ivl:80> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #377 @372 RefTypeUse <Ivl:80> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #378 @381 RefTypeDef <Ivl:81> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #379 @382 RefTypeUse <Ivl:81> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #380 @385 RefTypeDef <Ivl:82> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #381 @386 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #382 @386 RefTypeUse <Ivl:82> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #383 @387 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #384 @387 RefTypeDef <Ivl:83> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #385 @392 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #386 @392 RefTypeUse <Ivl:83> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #387 @393 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #388 @393 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #389 @393 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #390 @393 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #391 @393 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #392 @393 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #393 @393 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #394 @393 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #395 @393 RefTypeDef <Ivl:84> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #396 @394 RefTypeUse <Ivl:84> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #397 @399 RefTypeDef <Ivl:85> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #398 @400 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @400 RefTypeUse <Ivl:85> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #400 @401 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #401 @401 RefTypeDef <Ivl:86> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #402 @403 RefTypeDef <Ivl:87> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #403 @404 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #404 @404 RefTypeUse <Ivl:87> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #405 @405 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #406 @405 RefTypeDef <Ivl:88> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #407 @410 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #408 @410 RefTypeUse <Ivl:86> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #409 @410 RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #410 @410 RefTypeUse <Ivl:88> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #411 @411 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #412 @411 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #413 @411 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #414 @411 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #415 @411 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #416 @411 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #417 @411 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #418 @411 RefTypeFixedReg <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #419 @411 RefTypeDef <Ivl:89> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #420 @412 RefTypeUse <Ivl:89> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #421 @417 RefTypeDef <Ivl:90> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #422 @418 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #423 @418 RefTypeUse <Ivl:90> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #424 @419 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #425 @419 RefTypeDef <Ivl:91> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #426 @424 RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #427 @424 RefTypeUse <Ivl:91> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #428 @425 RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #429 @425 RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #430 @425 RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #431 @425 RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #432 @425 RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #433 @425 RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #434 @425 RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
Active intervals at end of allocation:

Trees after linear scan register allocator (LSRA)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N002 (  0,  0) [000000] -----------                            NOP       void   REG NA

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N006 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr REG NA
                                                            /--*  t103   long   
N008 (  5, 12) [000104] nc--G------                  t104 = *  IND       int    REG NA
N010 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0 REG NA
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N012 (  7, 14) [000106] ----G--N---                         *  CMP       void   REG NA
N014 (  9, 16) [000123] ----G------                            JCC       void   cond=UEQ REG NA

------------ BB03 [???..???), preds={BB02} succs={BB04}
N018 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}
N024 (???,???) [000124] -----------                            IL_OFFSET void   INLRT @ 0x000[E-] REG NA
N026 (  1,  1) [000001] -----------                            NO_OP     void   REG NA
N028 (???,???) [000125] -----------                            IL_OFFSET void   INLRT @ 0x001[E-] REG NA
N030 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0] rcx REG rcx
                                                            /--*  t4     long   
N032 (???,???) [000163] -----------                  t163 = *  PUTARG_REG long   REG rcx
N034 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t2     long   
N036 (???,???) [000164] -----------                  t164 = *  PUTARG_REG long   REG rdx
N038 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t3     int    
N040 (???,???) [000165] -----------                  t165 = *  PUTARG_REG int    REG r8
N042 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
                                                            /--*  t166   long   
N044 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t163   long   this in rcx
                                                            +--*  t164   long   arg1 in rdx
                                                            +--*  t165   int    arg2 in r8
                                                            +--*  t167   long   control expr
N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N048 (???,???) [000126] -----------                            IL_OFFSET void   INLRT @ 0x010[--] REG NA
N050 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
N052 (???,???) [000168] Dc---------                  t168 =    LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
                                                            /--*  t168   byref  
                                                            +--*  t6     struct 
N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N056 (???,???) [000127] -----------                            IL_OFFSET void   INLRT @ 0x011[E-] REG NA
N058 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0] rcx REG rcx
                                                            /--*  t10    long   
N060 (???,???) [000169] -----------                  t169 = *  PUTARG_REG long   REG rcx
N062 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t8     long   
N064 (???,???) [000170] -----------                  t170 = *  PUTARG_REG long   REG rdx
N066 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t9     int    
N068 (???,???) [000171] -----------                  t171 = *  PUTARG_REG int    REG r8
N070 (  3, 10) [000172] Hc---------                  t172 =    CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
                                                            /--*  t172   long   
N072 (  5, 12) [000173] nc--G------                  t173 = *  IND       long   REG NA
                                                            /--*  t169   long   this in rcx
                                                            +--*  t170   long   arg1 in rdx
                                                            +--*  t171   int    arg2 in r8
                                                            +--*  t173   long   control expr
N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N076 (???,???) [000128] -----------                            IL_OFFSET void   INLRT @ 0x020[--] REG NA
N078 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
N080 (???,???) [000174] Dc---------                  t174 =    LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
                                                            /--*  t174   byref  
                                                            +--*  t12    struct 
N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N084 (???,???) [000129] -----------                            IL_OFFSET void   INLRT @ 0x021[E-] REG NA
N086 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'
 REG rcx
                                                            /--*  t111   ref    
N088 (???,???) [000175] -----------                  t175 = *  PUTARG_REG ref    REG rcx
N090 (  3, 10) [000176] Hc---------                  t176 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                            /--*  t176   long   
N092 (  5, 12) [000177] nc--G------                  t177 = *  IND       long   REG NA
                                                            /--*  t175   ref    arg0 in rcx
                                                            +--*  t177   long   control expr
N094 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N096 (???,???) [000130] -----------                            IL_OFFSET void   INLRT @ 0x02B[E-] REG NA
N098 (  1,  1) [000016] -----------                            NO_OP     void   REG NA
N100 (???,???) [000131] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-] REG NA
N102 (  9,  6) [000017] -c---------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
N104 (???,???) [000178] Dc---------                  t178 =    LCL_ADDR  byref  V25 tmp15        [+0] NA REG NA
                                                            /--*  t178   byref  
                                                            +--*  t17    struct 
N106 ( 19, 13) [000112] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N108 (  9,  6) [000018] -c---------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
N110 (???,???) [000179] Dc---------                  t179 =    LCL_ADDR  byref  V26 tmp16        [+0] NA REG NA
                                                            /--*  t179   byref  
                                                            +--*  t18    struct 
N112 ( 19, 13) [000113] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N114 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0] rcx REG rcx
                                                            /--*  t114   long   
N116 (???,???) [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
N118 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0] rdx REG rdx
                                                            /--*  t115   long   
N120 (???,???) [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
N122 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn REG NA
                                                            /--*  t182   long   
N124 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                            /--*  t180   long   arg0 in rcx
                                                            +--*  t181   long   arg1 in rdx
                                                            +--*  t183   long   control expr
N126 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG rax
                                                            /--*  t19    int    
N128 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
N130 (???,???) [000132] -----------                            IL_OFFSET void   INLRT @ 0x033[--] REG NA
N132 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3          rcx REG rcx
                                                            /--*  t21    int    
N134 (???,???) [000184] -----------                  t184 = *  PUTARG_REG int    REG rcx
N136 (  3, 10) [000185] Hc---------                  t185 =    CNS_INT(h) long   0x7ffd0868fc18 ftn REG NA
                                                            /--*  t185   long   
N138 (  5, 12) [000186] nc--G------                  t186 = *  IND       long   REG NA
                                                            /--*  t184   int    arg0 in rcx
                                                            +--*  t186   long   control expr
N140 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
N142 (???,???) [000133] -----------                            IL_OFFSET void   INLRT @ 0x038[E-] REG NA
N144 (  1,  1) [000023] -----------                            NO_OP     void   REG NA
N146 (???,???) [000134] -----------                            IL_OFFSET void   INLRT @ 0x039[E-] REG NA
N148 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'
 REG rcx
                                                            /--*  t116   ref    
N150 (???,???) [000187] -----------                  t187 = *  PUTARG_REG ref    REG rcx
N152 (  3, 10) [000188] Hc---------                  t188 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                            /--*  t188   long   
N154 (  5, 12) [000189] nc--G------                  t189 = *  IND       long   REG NA
                                                            /--*  t187   ref    arg0 in rcx
                                                            +--*  t189   long   control expr
N156 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N158 (???,???) [000135] -----------                            IL_OFFSET void   INLRT @ 0x043[E-] REG NA
N160 (  1,  1) [000026] -----------                            NO_OP     void   REG NA
N162 (???,???) [000136] -----------                            IL_OFFSET void   INLRT @ 0x044[E-] REG NA
N164 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG rcx
                                                            /--*  t117   ref    
N166 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
N168 (???,???) [000137] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-] REG NA
N170 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class REG rcx
                                                            /--*  t30    long   
N172 (???,???) [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
N174 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3 REG rdx
                                                            /--*  t29    long   
N176 (???,???) [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                            /--*  t190   long   arg0 in rcx
                                                            +--*  t191   long   arg1 in rdx
N178 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
                                                            /--*  t31    ref    
N180 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
N182 (???,???) [000138] -----------                            IL_OFFSET void   INLRT @ 0x050[--] REG NA
N184 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field REG rcx
                                                            /--*  t35    long   
N186 (???,???) [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                            /--*  t192   long   arg0 in rcx
N188 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
                                                            /--*  t36    ref    
N190 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
N192 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t34    ref    
N194 (???,???) [000193] -----------                  t193 = *  PUTARG_REG ref    REG rcx
N196 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0] rdx REG rdx
                                                            /--*  t39    ref    
N198 (???,???) [000194] -----------                  t194 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t193   ref    arg0 in rcx
                                                            +--*  t194   ref    arg1 in rdx
N200 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
N202 (???,???) [000139] -----------                            IL_OFFSET void   INLRT @ 0x05B[--] REG NA
N204 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t33    ref    
N206 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
N208 (???,???) [000140] -----------                            IL_OFFSET void   INLRT @ 0x05C[E-] REG NA
N210 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
                                                            /--*  t41    ref    
N212 (???,???) [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
N214 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3          rdx REG rdx
                                                            /--*  t42    ref    
N216 (???,???) [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
N218 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1 REG r8
                                                            /--*  t43    int    
N220 (???,???) [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
N222 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn REG NA
                                                            /--*  t198   long   
N224 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                            /--*  t195   ref    arg0 in rcx
                                                            +--*  t196   ref    arg1 in rdx
                                                            +--*  t197   int    arg2 in r8
                                                            +--*  t199   long   control expr
N226 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[] REG rax
                                                            /--*  t44    ref    
N228 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
N230 (???,???) [000141] -----------                            IL_OFFSET void   INLRT @ 0x064[--] REG NA
N232 (  0,  0) [000047] -----------                            NOP       void   REG NA
N234 (???,???) [000142] -----------                            IL_OFFSET void   INLRT @ 0x065[E-] REG NA
N236 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
                                                            /--*  t48    ref    
N238 (???,???) [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
N240 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0 REG rdx
                                                            /--*  t49    int    
N242 (???,???) [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
N244 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn REG NA
                                                            /--*  t202   long   
N246 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                            /--*  t200   ref    this in rcx
                                                            +--*  t201   int    arg1 in rdx
                                                            +--*  t203   long   control expr
N248 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this REG rax
                                                            /--*  t50    int    
N250 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7          NA REG NA
N252 (???,???) [000143] -----------                            IL_OFFSET void   INLRT @ 0x06C[--] REG NA
N254 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7          rcx REG rcx
                                                            /--*  t52    int    
N256 (???,???) [000204] -----------                  t204 = *  PUTARG_REG int    REG rcx
N258 (  3, 10) [000205] Hc---------                  t205 =    CNS_INT(h) long   0x7ffd0868fc30 ftn REG NA
                                                            /--*  t205   long   
N260 (  5, 12) [000206] nc--G------                  t206 = *  IND       long   REG NA
                                                            /--*  t204   int    arg0 in rcx
                                                            +--*  t206   long   control expr
N262 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort) REG NA
N264 (???,???) [000144] -----------                            IL_OFFSET void   INLRT @ 0x071[E-] REG NA
N266 (  1,  1) [000054] -----------                            NO_OP     void   REG NA
N268 (???,???) [000145] -----------                            IL_OFFSET void   INLRT @ 0x072[E-] REG NA
N270 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class REG rcx
                                                            /--*  t56    long   
N272 (???,???) [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
N274 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5 REG rdx
                                                            /--*  t55    long   
N276 (???,???) [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                            /--*  t207   long   arg0 in rcx
                                                            +--*  t208   long   arg1 in rdx
N278 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
                                                            /--*  t57    ref    
N280 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8          NA REG NA
N282 (???,???) [000146] -----------                            IL_OFFSET void   INLRT @ 0x078[--] REG NA
N284 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field REG rcx
                                                            /--*  t61    long   
N286 (???,???) [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                            /--*  t209   long   arg0 in rcx
N288 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
                                                            /--*  t62    ref    
N290 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9          NA REG NA
N292 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8          rcx REG rcx
                                                            /--*  t60    ref    
N294 (???,???) [000210] -----------                  t210 = *  PUTARG_REG ref    REG rcx
N296 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0] rdx REG rdx
                                                            /--*  t65    ref    
N298 (???,???) [000211] -----------                  t211 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t210   ref    arg0 in rcx
                                                            +--*  t211   ref    arg1 in rdx
N300 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
N302 (???,???) [000147] -----------                            IL_OFFSET void   INLRT @ 0x083[--] REG NA
N304 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8          rcx REG rcx
                                                            /--*  t59    ref    
N306 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4          NA REG NA
N308 (???,???) [000148] -----------                            IL_OFFSET void   INLRT @ 0x085[E-] REG NA
N310 (  1,  1) [000067] -----------                            NO_OP     void   REG NA
N312 (???,???) [000149] -----------                            IL_OFFSET void   INLRT @ 0x086[E-] REG NA
N314 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4          rcx REG rcx
N316 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0 REG rax
                                                            /--*  t68    ref    
                                                            +--*  t69    int    
N318 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[] REG rcx
                                                            /--*  t70    byref  
N320 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
N322 (???,???) [000150] -----------                            IL_OFFSET void   INLRT @ 0x090[E-] REG NA
N324 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6          rcx REG rcx
                                                            /--*  t72    byref  
N326 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17         NA REG NA
N328 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17         rcx REG rcx
                                                            /--*  t119   long   
N330 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5          NA REG NA
N332 (???,???) [000151] -----------                            IL_OFFSET void   INLRT @ 0x095[E-] REG NA
N334 (  1,  1) [000075] -----------                            NO_OP     void   REG NA
N336 (???,???) [000152] -----------                            IL_OFFSET void   INLRT @ 0x096[E-] REG NA
N338 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5          rcx REG rcx
                                                            /--*  t76    long   
N340 (???,???) [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                            /--*  t212   long   arg0 in rcx
N342 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this REG rax
                                                            /--*  t77    ref    
N344 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10         NA REG NA
N346 (???,???) [000153] -----------                            IL_OFFSET void   INLRT @ 0x09D[--] REG NA
N348 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10         rcx REG rcx
                                                            /--*  t79    ref    
N350 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7          NA REG NA
N352 (???,???) [000154] -----------                            IL_OFFSET void   INLRT @ 0x09F[E-] REG NA
N354 (  1,  1) [000081] -----------                            NO_OP     void   REG NA
N356 (???,???) [000155] -----------                            IL_OFFSET void   INLRT @ 0x0A0[E-] REG NA
N358 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0 REG rcx
                                                            /--*  t82    int    
N360 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint REG rcx
                                                            /--*  t83    long   
N362 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
N364 (???,???) [000156] -----------                            IL_OFFSET void   INLRT @ 0x0A4[E-] REG NA
N366 (  1,  1) [000085] -----------                            NO_OP     void   REG NA
N368 (???,???) [000157] -----------                            IL_OFFSET void   INLRT @ 0x0A5[E-] REG NA
N370 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '
 REG rcx
                                                            /--*  t122   ref    
N372 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11         NA REG NA
N374 (  1,  1) [000087] -c---------                   t87 =    CNS_INT   int    1 REG NA
                                                            /--*  t87    int    
N376 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12         NA REG NA
N378 (???,???) [000158] -----------                            IL_OFFSET void   INLRT @ 0x0AF[--] REG NA
N380 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12         rcx REG rcx
                                                            /--*  t91    int    
N382 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8          NA REG NA
N384 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0] rcx REG rcx
                                                            /--*  t93    long   
N386 (???,???) [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
N388 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn REG NA
                                                            /--*  t214   long   
N390 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                            /--*  t213   long   this in rcx
                                                            +--*  t215   long   control expr
N392 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this REG rax
                                                            /--*  t94    ref    
N394 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13         NA REG NA
N396 (???,???) [000159] -----------                            IL_OFFSET void   INLRT @ 0x0B8[--] REG NA
N398 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11         rcx REG rcx
                                                            /--*  t89    ref    
N400 (???,???) [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
N402 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13         rdx REG rdx
                                                            /--*  t96    ref    
N404 (???,???) [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
N406 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn REG NA
                                                            /--*  t218   long   
N408 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                            /--*  t216   ref    arg0 in rcx
                                                            +--*  t217   ref    arg1 in rdx
                                                            +--*  t219   long   control expr
N410 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String REG rax
                                                            /--*  t97    ref    
N412 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14         NA REG NA
N414 (???,???) [000160] -----------                            IL_OFFSET void   INLRT @ 0x0BD[--] REG NA
N416 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14         rcx REG rcx
                                                            /--*  t99    ref    
N418 (???,???) [000220] -----------                  t220 = *  PUTARG_REG ref    REG rcx
N420 (  3, 10) [000221] Hc---------                  t221 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                            /--*  t221   long   
N422 (  5, 12) [000222] nc--G------                  t222 = *  IND       long   REG NA
                                                            /--*  t220   ref    arg0 in rcx
                                                            +--*  t222   long   control expr
N424 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N426 (???,???) [000161] -----------                            IL_OFFSET void   INLRT @ 0x0C2[E-] REG NA
N428 (  1,  1) [000101] -----------                            NO_OP     void   REG NA
N430 (???,???) [000162] -----------                            IL_OFFSET void   INLRT @ 0x0C3[E-] REG NA
N432 (  0,  0) [000102] -----------                            RETURN    void   REG NA

-------------------------------------------------------------------------------------------------------------------

Final allocation
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
           0.#0   BB1 PredBB0               |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
           4.#1   BB2 PredBB1               |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          16.#2   BB3 PredBB2               |    |    |    |    |    |    |    |    |    |
[000107]  19.#3   rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          19.#4   rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          19.#5   rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          19.#6   r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          19.#7   r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          19.#8   r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          19.#9   r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          20.#10  BB4 PredBB2               |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          22.#11  BB5 PredBB4               |    |    |    |    |    |    |    |    |    |
[000004]  31.#12  I0   Def    Alloc    rcx  |    |I0 a|    |    |    |    |    |    |    |
[000163]  32.#13  rcx  Fixd   Keep     rcx  |    |I0 a|    |    |    |    |    |    |    |
          32.#14  I0   Use *  Keep     rcx  |    |I0 i|    |    |    |    |    |    |    |
          33.#15  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          33.#16  I1   Def    Alloc    rcx  |    |I1 a|    |    |    |    |    |    |    |
[000002]  35.#17  C2   Def    Alloc    rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
[000164]  36.#18  rdx  Fixd   Keep     rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
          36.#19  C2   Use *  Keep     rdx  |    |I1 a|C2 i|    |    |    |    |    |    |
          37.#20  rdx  Fixd   Keep     rdx  |    |I1 a|    |    |    |    |    |    |    |
          37.#21  I3   Def    Alloc    rdx  |    |I1 a|I3 a|    |    |    |    |    |    |
[000003]  39.#22  C4   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
[000165]  40.#23  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
          40.#24  C4   Use *  Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 i|    |
          41.#25  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |    |    |
          41.#26  I5   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
[000005]  46.#27  rcx  Fixd   Keep     rcx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#28  I1   Use *  Keep     rcx  |    |I1 i|I3 a|    |    |    |    |I5 a|    |
          46.#29  rdx  Fixd   Keep     rdx  |    |    |I3 a|    |    |    |    |I5 a|    |
          46.#30  I3   Use *  Keep     rdx  |    |    |I3 i|    |    |    |    |I5 a|    |
          46.#31  r8   Fixd   Keep     r8   |    |    |    |    |    |    |    |I5 a|    |
          46.#32  I5   Use *  Keep     r8   |    |    |    |    |    |    |    |I5 i|    |
          47.#33  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          47.#34  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          47.#35  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          47.#36  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          47.#37  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          47.#38  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          47.#39  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000007]  54.#40  I6   Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
          54.#41  I6   Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000010]  59.#42  I7   Def    Alloc    rcx  |    |I7 a|    |    |    |    |    |    |    |
[000169]  60.#43  rcx  Fixd   Keep     rcx  |    |I7 a|    |    |    |    |    |    |    |
          60.#44  I7   Use *  Keep     rcx  |    |I7 i|    |    |    |    |    |    |    |
          61.#45  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          61.#46  I8   Def    Alloc    rcx  |    |I8 a|    |    |    |    |    |    |    |
[000008]  63.#47  C9   Def    Alloc    rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
[000170]  64.#48  rdx  Fixd   Keep     rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
          64.#49  C9   Use *  Keep     rdx  |    |I8 a|C9 i|    |    |    |    |    |    |
          65.#50  rdx  Fixd   Keep     rdx  |    |I8 a|    |    |    |    |    |    |    |
          65.#51  I10  Def    Alloc    rdx  |    |I8 a|I10a|    |    |    |    |    |    |
[000009]  67.#52  C11  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
[000171]  68.#53  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
          68.#54  C11  Use *  Keep     r8   |    |I8 a|I10a|    |    |    |    |C11i|    |
          69.#55  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |    |    |
          69.#56  I12  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
[000011]  74.#57  rcx  Fixd   Keep     rcx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#58  I8   Use *  Keep     rcx  |    |I8 i|I10a|    |    |    |    |I12a|    |
          74.#59  rdx  Fixd   Keep     rdx  |    |    |I10a|    |    |    |    |I12a|    |
          74.#60  I10  Use *  Keep     rdx  |    |    |I10i|    |    |    |    |I12a|    |
          74.#61  r8   Fixd   Keep     r8   |    |    |    |    |    |    |    |I12a|    |
          74.#62  I12  Use *  Keep     r8   |    |    |    |    |    |    |    |I12i|    |
          75.#63  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          75.#64  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          75.#65  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          75.#66  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          75.#67  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          75.#68  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          75.#69  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000013]  82.#70  I13  Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
          82.#71  I13  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000111]  87.#72  C14  Def    Alloc    rcx  |    |C14a|    |    |    |    |    |    |    |
[000175]  88.#73  rcx  Fixd   Keep     rcx  |    |C14a|    |    |    |    |    |    |    |
          88.#74  C14  Use *  Keep     rcx  |    |C14i|    |    |    |    |    |    |    |
          89.#75  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          89.#76  I15  Def    Alloc    rcx  |    |I15a|    |    |    |    |    |    |    |
[000015]  94.#77  rcx  Fixd   Keep     rcx  |    |I15a|    |    |    |    |    |    |    |
          94.#78  I15  Use *  Keep     rcx  |    |I15i|    |    |    |    |    |    |    |
          95.#79  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          95.#80  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          95.#81  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          95.#82  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          95.#83  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          95.#84  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          95.#85  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000112] 106.#86  I16  Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
         106.#87  I16  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000113] 112.#88  I17  Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
         112.#89  I17  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000114] 115.#90  I18  Def    Alloc    rcx  |    |I18a|    |    |    |    |    |    |    |
[000180] 116.#91  rcx  Fixd   Keep     rcx  |    |I18a|    |    |    |    |    |    |    |
         116.#92  I18  Use *  Keep     rcx  |    |I18i|    |    |    |    |    |    |    |
         117.#93  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         117.#94  I19  Def    Alloc    rcx  |    |I19a|    |    |    |    |    |    |    |
[000115] 119.#95  I20  Def    Alloc    rdx  |    |I19a|I20a|    |    |    |    |    |    |
[000181] 120.#96  rdx  Fixd   Keep     rdx  |    |I19a|I20a|    |    |    |    |    |    |
         120.#97  I20  Use *  Keep     rdx  |    |I19a|I20i|    |    |    |    |    |    |
         121.#98  rdx  Fixd   Keep     rdx  |    |I19a|    |    |    |    |    |    |    |
         121.#99  I21  Def    Alloc    rdx  |    |I19a|I21a|    |    |    |    |    |    |
[000019] 126.#100 rcx  Fixd   Keep     rcx  |    |I19a|I21a|    |    |    |    |    |    |
         126.#101 I19  Use *  Keep     rcx  |    |I19i|I21a|    |    |    |    |    |    |
         126.#102 rdx  Fixd   Keep     rdx  |    |    |I21a|    |    |    |    |    |    |
         126.#103 I21  Use *  Keep     rdx  |    |    |I21i|    |    |    |    |    |    |
         127.#104 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         127.#105 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         127.#106 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         127.#107 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         127.#108 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         127.#109 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         127.#110 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         127.#111 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         127.#112 I22  Def    Alloc    rax  |I22a|    |    |    |    |    |    |    |    |
[000020] 128.#113 I22  Use *  Keep     rax  |I22i|    |    |    |    |    |    |    |    |
[000021] 133.#114 I23  Def    Alloc    rcx  |    |I23a|    |    |    |    |    |    |    |
[000184] 134.#115 rcx  Fixd   Keep     rcx  |    |I23a|    |    |    |    |    |    |    |
         134.#116 I23  Use *  Keep     rcx  |    |I23i|    |    |    |    |    |    |    |
         135.#117 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         135.#118 I24  Def    Alloc    rcx  |    |I24a|    |    |    |    |    |    |    |
[000022] 140.#119 rcx  Fixd   Keep     rcx  |    |I24a|    |    |    |    |    |    |    |
         140.#120 I24  Use *  Keep     rcx  |    |I24i|    |    |    |    |    |    |    |
         141.#121 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         141.#122 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         141.#123 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         141.#124 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         141.#125 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         141.#126 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         141.#127 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000116] 149.#128 C25  Def    Alloc    rcx  |    |C25a|    |    |    |    |    |    |    |
[000187] 150.#129 rcx  Fixd   Keep     rcx  |    |C25a|    |    |    |    |    |    |    |
         150.#130 C25  Use *  Keep     rcx  |    |C25i|    |    |    |    |    |    |    |
         151.#131 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         151.#132 I26  Def    Alloc    rcx  |    |I26a|    |    |    |    |    |    |    |
[000025] 156.#133 rcx  Fixd   Keep     rcx  |    |I26a|    |    |    |    |    |    |    |
         156.#134 I26  Use *  Keep     rcx  |    |I26i|    |    |    |    |    |    |    |
         157.#135 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         157.#136 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         157.#137 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         157.#138 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         157.#139 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         157.#140 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         157.#141 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000117] 165.#142 C27  Def    Alloc    rcx  |    |C27a|    |    |    |    |    |    |    |
[000028] 166.#143 C27  Use *  Keep     rcx  |    |C27i|    |    |    |    |    |    |    |
[000030] 171.#144 C28  Def    Alloc    rcx  |    |C28a|    |    |    |    |    |    |    |
[000190] 172.#145 rcx  Fixd   Keep     rcx  |    |C28a|    |    |    |    |    |    |    |
         172.#146 C28  Use *  Keep     rcx  |    |C28i|    |    |    |    |    |    |    |
         173.#147 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         173.#148 I29  Def    Alloc    rcx  |    |I29a|    |    |    |    |    |    |    |
[000029] 175.#149 C30  Def    Alloc    rdx  |    |I29a|C30a|    |    |    |    |    |    |
[000191] 176.#150 rdx  Fixd   Keep     rdx  |    |I29a|C30a|    |    |    |    |    |    |
         176.#151 C30  Use *  Keep     rdx  |    |I29a|C30i|    |    |    |    |    |    |
         177.#152 rdx  Fixd   Keep     rdx  |    |I29a|    |    |    |    |    |    |    |
         177.#153 I31  Def    Alloc    rdx  |    |I29a|I31a|    |    |    |    |    |    |
[000031] 178.#154 rcx  Fixd   Keep     rcx  |    |I29a|I31a|    |    |    |    |    |    |
         178.#155 I29  Use *  Keep     rcx  |    |I29i|I31a|    |    |    |    |    |    |
         178.#156 rdx  Fixd   Keep     rdx  |    |    |I31a|    |    |    |    |    |    |
         178.#157 I31  Use *  Keep     rdx  |    |    |I31i|    |    |    |    |    |    |
         179.#158 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         179.#159 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         179.#160 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         179.#161 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         179.#162 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         179.#163 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         179.#164 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         179.#165 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         179.#166 I32  Def    Alloc    rax  |I32a|    |    |    |    |    |    |    |    |
[000032] 180.#167 I32  Use *  Keep     rax  |I32i|    |    |    |    |    |    |    |    |
[000035] 185.#168 C33  Def    Alloc    rcx  |    |C33a|    |    |    |    |    |    |    |
[000192] 186.#169 rcx  Fixd   Keep     rcx  |    |C33a|    |    |    |    |    |    |    |
         186.#170 C33  Use *  Keep     rcx  |    |C33i|    |    |    |    |    |    |    |
         187.#171 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         187.#172 I34  Def    Alloc    rcx  |    |I34a|    |    |    |    |    |    |    |
[000036] 188.#173 rcx  Fixd   Keep     rcx  |    |I34a|    |    |    |    |    |    |    |
         188.#174 I34  Use *  Keep     rcx  |    |I34i|    |    |    |    |    |    |    |
         189.#175 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         189.#176 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         189.#177 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         189.#178 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         189.#179 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         189.#180 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         189.#181 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         189.#182 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         189.#183 I35  Def    Alloc    rax  |I35a|    |    |    |    |    |    |    |    |
[000038] 190.#184 I35  Use *  Keep     rax  |I35i|    |    |    |    |    |    |    |    |
[000034] 193.#185 I36  Def    Alloc    rcx  |    |I36a|    |    |    |    |    |    |    |
[000193] 194.#186 rcx  Fixd   Keep     rcx  |    |I36a|    |    |    |    |    |    |    |
         194.#187 I36  Use *  Keep     rcx  |    |I36i|    |    |    |    |    |    |    |
         195.#188 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         195.#189 I37  Def    Alloc    rcx  |    |I37a|    |    |    |    |    |    |    |
[000039] 197.#190 I38  Def    Alloc    rdx  |    |I37a|I38a|    |    |    |    |    |    |
[000194] 198.#191 rdx  Fixd   Keep     rdx  |    |I37a|I38a|    |    |    |    |    |    |
         198.#192 I38  Use *  Keep     rdx  |    |I37a|I38i|    |    |    |    |    |    |
         199.#193 rdx  Fixd   Keep     rdx  |    |I37a|    |    |    |    |    |    |    |
         199.#194 I39  Def    Alloc    rdx  |    |I37a|I39a|    |    |    |    |    |    |
[000037] 200.#195 rcx  Fixd   Keep     rcx  |    |I37a|I39a|    |    |    |    |    |    |
         200.#196 I37  Use *  Keep     rcx  |    |I37i|I39a|    |    |    |    |    |    |
         200.#197 rdx  Fixd   Keep     rdx  |    |    |I39a|    |    |    |    |    |    |
         200.#198 I39  Use *  Keep     rdx  |    |    |I39i|    |    |    |    |    |    |
         201.#199 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         201.#200 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         201.#201 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         201.#202 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         201.#203 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         201.#204 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         201.#205 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000033] 205.#206 I40  Def    Alloc    rcx  |    |I40a|    |    |    |    |    |    |    |
[000040] 206.#207 I40  Use *  Keep     rcx  |    |I40i|    |    |    |    |    |    |    |
[000041] 211.#208 I41  Def    Alloc    rcx  |    |I41a|    |    |    |    |    |    |    |
[000195] 212.#209 rcx  Fixd   Keep     rcx  |    |I41a|    |    |    |    |    |    |    |
         212.#210 I41  Use *  Keep     rcx  |    |I41i|    |    |    |    |    |    |    |
         213.#211 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         213.#212 I42  Def    Alloc    rcx  |    |I42a|    |    |    |    |    |    |    |
[000042] 215.#213 I43  Def    Alloc    rdx  |    |I42a|I43a|    |    |    |    |    |    |
[000196] 216.#214 rdx  Fixd   Keep     rdx  |    |I42a|I43a|    |    |    |    |    |    |
         216.#215 I43  Use *  Keep     rdx  |    |I42a|I43i|    |    |    |    |    |    |
         217.#216 rdx  Fixd   Keep     rdx  |    |I42a|    |    |    |    |    |    |    |
         217.#217 I44  Def    Alloc    rdx  |    |I42a|I44a|    |    |    |    |    |    |
[000043] 219.#218 C45  Def    Alloc    r8   |    |I42a|I44a|    |    |    |    |C45a|    |
[000197] 220.#219 r8   Fixd   Keep     r8   |    |I42a|I44a|    |    |    |    |C45a|    |
         220.#220 C45  Use *  Keep     r8   |    |I42a|I44a|    |    |    |    |C45i|    |
         221.#221 r8   Fixd   Keep     r8   |    |I42a|I44a|    |    |    |    |    |    |
         221.#222 I46  Def    Alloc    r8   |    |I42a|I44a|    |    |    |    |I46a|    |
[000044] 226.#223 rcx  Fixd   Keep     rcx  |    |I42a|I44a|    |    |    |    |I46a|    |
         226.#224 I42  Use *  Keep     rcx  |    |I42i|I44a|    |    |    |    |I46a|    |
         226.#225 rdx  Fixd   Keep     rdx  |    |    |I44a|    |    |    |    |I46a|    |
         226.#226 I44  Use *  Keep     rdx  |    |    |I44i|    |    |    |    |I46a|    |
         226.#227 r8   Fixd   Keep     r8   |    |    |    |    |    |    |    |I46a|    |
         226.#228 I46  Use *  Keep     r8   |    |    |    |    |    |    |    |I46i|    |
         227.#229 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         227.#230 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         227.#231 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         227.#232 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         227.#233 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         227.#234 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         227.#235 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         227.#236 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         227.#237 I47  Def    Alloc    rax  |I47a|    |    |    |    |    |    |    |    |
[000045] 228.#238 I47  Use *  Keep     rax  |I47i|    |    |    |    |    |    |    |    |
[000048] 237.#239 I48  Def    Alloc    rcx  |    |I48a|    |    |    |    |    |    |    |
[000200] 238.#240 rcx  Fixd   Keep     rcx  |    |I48a|    |    |    |    |    |    |    |
         238.#241 I48  Use *  Keep     rcx  |    |I48i|    |    |    |    |    |    |    |
         239.#242 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         239.#243 I49  Def    Alloc    rcx  |    |I49a|    |    |    |    |    |    |    |
[000049] 241.#244 C50  Def    Alloc    rdx  |    |I49a|C50a|    |    |    |    |    |    |
[000201] 242.#245 rdx  Fixd   Keep     rdx  |    |I49a|C50a|    |    |    |    |    |    |
         242.#246 C50  Use *  Keep     rdx  |    |I49a|C50i|    |    |    |    |    |    |
         243.#247 rdx  Fixd   Keep     rdx  |    |I49a|    |    |    |    |    |    |    |
         243.#248 I51  Def    Alloc    rdx  |    |I49a|I51a|    |    |    |    |    |    |
[000050] 248.#249 rcx  Fixd   Keep     rcx  |    |I49a|I51a|    |    |    |    |    |    |
         248.#250 I49  Use *  Keep     rcx  |    |I49i|I51a|    |    |    |    |    |    |
         248.#251 rdx  Fixd   Keep     rdx  |    |    |I51a|    |    |    |    |    |    |
         248.#252 I51  Use *  Keep     rdx  |    |    |I51i|    |    |    |    |    |    |
         249.#253 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         249.#254 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         249.#255 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         249.#256 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         249.#257 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         249.#258 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         249.#259 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         249.#260 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         249.#261 I52  Def    Alloc    rax  |I52a|    |    |    |    |    |    |    |    |
[000051] 250.#262 I52  Use *  Keep     rax  |I52i|    |    |    |    |    |    |    |    |
[000052] 255.#263 I53  Def    Alloc    rcx  |    |I53a|    |    |    |    |    |    |    |
[000204] 256.#264 rcx  Fixd   Keep     rcx  |    |I53a|    |    |    |    |    |    |    |
         256.#265 I53  Use *  Keep     rcx  |    |I53i|    |    |    |    |    |    |    |
         257.#266 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         257.#267 I54  Def    Alloc    rcx  |    |I54a|    |    |    |    |    |    |    |
[000053] 262.#268 rcx  Fixd   Keep     rcx  |    |I54a|    |    |    |    |    |    |    |
         262.#269 I54  Use *  Keep     rcx  |    |I54i|    |    |    |    |    |    |    |
         263.#270 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         263.#271 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         263.#272 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         263.#273 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         263.#274 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         263.#275 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         263.#276 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000056] 271.#277 C55  Def    Alloc    rcx  |    |C55a|    |    |    |    |    |    |    |
[000207] 272.#278 rcx  Fixd   Keep     rcx  |    |C55a|    |    |    |    |    |    |    |
         272.#279 C55  Use *  Keep     rcx  |    |C55i|    |    |    |    |    |    |    |
         273.#280 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         273.#281 I56  Def    Alloc    rcx  |    |I56a|    |    |    |    |    |    |    |
[000055] 275.#282 C57  Def    Alloc    rdx  |    |I56a|C57a|    |    |    |    |    |    |
[000208] 276.#283 rdx  Fixd   Keep     rdx  |    |I56a|C57a|    |    |    |    |    |    |
         276.#284 C57  Use *  Keep     rdx  |    |I56a|C57i|    |    |    |    |    |    |
         277.#285 rdx  Fixd   Keep     rdx  |    |I56a|    |    |    |    |    |    |    |
         277.#286 I58  Def    Alloc    rdx  |    |I56a|I58a|    |    |    |    |    |    |
[000057] 278.#287 rcx  Fixd   Keep     rcx  |    |I56a|I58a|    |    |    |    |    |    |
         278.#288 I56  Use *  Keep     rcx  |    |I56i|I58a|    |    |    |    |    |    |
         278.#289 rdx  Fixd   Keep     rdx  |    |    |I58a|    |    |    |    |    |    |
         278.#290 I58  Use *  Keep     rdx  |    |    |I58i|    |    |    |    |    |    |
         279.#291 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         279.#292 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         279.#293 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         279.#294 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         279.#295 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         279.#296 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         279.#297 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         279.#298 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         279.#299 I59  Def    Alloc    rax  |I59a|    |    |    |    |    |    |    |    |
[000058] 280.#300 I59  Use *  Keep     rax  |I59i|    |    |    |    |    |    |    |    |
[000061] 285.#301 C60  Def    Alloc    rcx  |    |C60a|    |    |    |    |    |    |    |
[000209] 286.#302 rcx  Fixd   Keep     rcx  |    |C60a|    |    |    |    |    |    |    |
         286.#303 C60  Use *  Keep     rcx  |    |C60i|    |    |    |    |    |    |    |
         287.#304 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         287.#305 I61  Def    Alloc    rcx  |    |I61a|    |    |    |    |    |    |    |
[000062] 288.#306 rcx  Fixd   Keep     rcx  |    |I61a|    |    |    |    |    |    |    |
         288.#307 I61  Use *  Keep     rcx  |    |I61i|    |    |    |    |    |    |    |
         289.#308 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         289.#309 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         289.#310 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         289.#311 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         289.#312 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         289.#313 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         289.#314 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         289.#315 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         289.#316 I62  Def    Alloc    rax  |I62a|    |    |    |    |    |    |    |    |
[000064] 290.#317 I62  Use *  Keep     rax  |I62i|    |    |    |    |    |    |    |    |
[000060] 293.#318 I63  Def    Alloc    rcx  |    |I63a|    |    |    |    |    |    |    |
[000210] 294.#319 rcx  Fixd   Keep     rcx  |    |I63a|    |    |    |    |    |    |    |
         294.#320 I63  Use *  Keep     rcx  |    |I63i|    |    |    |    |    |    |    |
         295.#321 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         295.#322 I64  Def    Alloc    rcx  |    |I64a|    |    |    |    |    |    |    |
[000065] 297.#323 I65  Def    Alloc    rdx  |    |I64a|I65a|    |    |    |    |    |    |
[000211] 298.#324 rdx  Fixd   Keep     rdx  |    |I64a|I65a|    |    |    |    |    |    |
         298.#325 I65  Use *  Keep     rdx  |    |I64a|I65i|    |    |    |    |    |    |
         299.#326 rdx  Fixd   Keep     rdx  |    |I64a|    |    |    |    |    |    |    |
         299.#327 I66  Def    Alloc    rdx  |    |I64a|I66a|    |    |    |    |    |    |
[000063] 300.#328 rcx  Fixd   Keep     rcx  |    |I64a|I66a|    |    |    |    |    |    |
         300.#329 I64  Use *  Keep     rcx  |    |I64i|I66a|    |    |    |    |    |    |
         300.#330 rdx  Fixd   Keep     rdx  |    |    |I66a|    |    |    |    |    |    |
         300.#331 I66  Use *  Keep     rdx  |    |    |I66i|    |    |    |    |    |    |
         301.#332 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         301.#333 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         301.#334 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         301.#335 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         301.#336 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         301.#337 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         301.#338 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000059] 305.#339 I67  Def    Alloc    rcx  |    |I67a|    |    |    |    |    |    |    |
[000066] 306.#340 I67  Use *  Keep     rcx  |    |I67i|    |    |    |    |    |    |    |
[000068] 315.#341 I68  Def    Alloc    rcx  |    |I68a|    |    |    |    |    |    |    |
[000069] 317.#342 C69  Def    Alloc    rax  |C69a|I68a|    |    |    |    |    |    |    |
[000070] 318.#343 I70  Def    Alloc    rdx  |C69a|I68a|I70a|    |    |    |    |    |    |
         318.#344 I68  Use *  Keep     rcx  |C69a|I68i|I70a|    |    |    |    |    |    |
         318.#345 C69  Use *D Keep     rax  |C69i|    |I70a|    |    |    |    |    |    |
         318.#346 I70  Use *  Keep     rdx  |    |    |I70i|    |    |    |    |    |    |
         319.#347 I71  Def    Alloc    rcx  |    |I71a|    |    |    |    |    |    |    |
[000071] 320.#348 I71  Use *  Keep     rcx  |    |I71i|    |    |    |    |    |    |    |
[000072] 325.#349 I72  Def    Alloc    rcx  |    |I72a|    |    |    |    |    |    |    |
[000118] 326.#350 I72  Use *  Keep     rcx  |    |I72i|    |    |    |    |    |    |    |
[000119] 329.#351 I73  Def    Alloc    rcx  |    |I73a|    |    |    |    |    |    |    |
[000074] 330.#352 I73  Use *  Keep     rcx  |    |I73i|    |    |    |    |    |    |    |
[000076] 339.#353 I74  Def    Alloc    rcx  |    |I74a|    |    |    |    |    |    |    |
[000212] 340.#354 rcx  Fixd   Keep     rcx  |    |I74a|    |    |    |    |    |    |    |
         340.#355 I74  Use *  Keep     rcx  |    |I74i|    |    |    |    |    |    |    |
         341.#356 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         341.#357 I75  Def    Alloc    rcx  |    |I75a|    |    |    |    |    |    |    |
[000077] 342.#358 rcx  Fixd   Keep     rcx  |    |I75a|    |    |    |    |    |    |    |
         342.#359 I75  Use *  Keep     rcx  |    |I75i|    |    |    |    |    |    |    |
         343.#360 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         343.#361 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         343.#362 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         343.#363 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         343.#364 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         343.#365 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         343.#366 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         343.#367 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         343.#368 I76  Def    Alloc    rax  |I76a|    |    |    |    |    |    |    |    |
[000078] 344.#369 I76  Use *  Keep     rax  |I76i|    |    |    |    |    |    |    |    |
[000079] 349.#370 I77  Def    Alloc    rcx  |    |I77a|    |    |    |    |    |    |    |
[000080] 350.#371 I77  Use *  Keep     rcx  |    |I77i|    |    |    |    |    |    |    |
[000082] 359.#372 C78  Def    Alloc    rcx  |    |C78a|    |    |    |    |    |    |    |
[000083] 360.#373 C78  Use *  Keep     rcx  |    |C78i|    |    |    |    |    |    |    |
         361.#374 I79  Def    Alloc    rcx  |    |I79a|    |    |    |    |    |    |    |
[000084] 362.#375 I79  Use *  Keep     rcx  |    |I79i|    |    |    |    |    |    |    |
[000122] 371.#376 C80  Def    Alloc    rcx  |    |C80a|    |    |    |    |    |    |    |
[000088] 372.#377 C80  Use *  Keep     rcx  |    |C80i|    |    |    |    |    |    |    |
[000091] 381.#378 I81  Def    Alloc    rcx  |    |I81a|    |    |    |    |    |    |    |
[000092] 382.#379 I81  Use *  Keep     rcx  |    |I81i|    |    |    |    |    |    |    |
[000093] 385.#380 I82  Def    Alloc    rcx  |    |I82a|    |    |    |    |    |    |    |
[000213] 386.#381 rcx  Fixd   Keep     rcx  |    |I82a|    |    |    |    |    |    |    |
         386.#382 I82  Use *  Keep     rcx  |    |I82i|    |    |    |    |    |    |    |
         387.#383 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         387.#384 I83  Def    Alloc    rcx  |    |I83a|    |    |    |    |    |    |    |
[000094] 392.#385 rcx  Fixd   Keep     rcx  |    |I83a|    |    |    |    |    |    |    |
         392.#386 I83  Use *  Keep     rcx  |    |I83i|    |    |    |    |    |    |    |
         393.#387 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         393.#388 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         393.#389 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         393.#390 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         393.#391 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         393.#392 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         393.#393 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         393.#394 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         393.#395 I84  Def    Alloc    rax  |I84a|    |    |    |    |    |    |    |    |
[000095] 394.#396 I84  Use *  Keep     rax  |I84i|    |    |    |    |    |    |    |    |
[000089] 399.#397 I85  Def    Alloc    rcx  |    |I85a|    |    |    |    |    |    |    |
[000216] 400.#398 rcx  Fixd   Keep     rcx  |    |I85a|    |    |    |    |    |    |    |
         400.#399 I85  Use *  Keep     rcx  |    |I85i|    |    |    |    |    |    |    |
         401.#400 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         401.#401 I86  Def    Alloc    rcx  |    |I86a|    |    |    |    |    |    |    |
[000096] 403.#402 I87  Def    Alloc    rdx  |    |I86a|I87a|    |    |    |    |    |    |
[000217] 404.#403 rdx  Fixd   Keep     rdx  |    |I86a|I87a|    |    |    |    |    |    |
         404.#404 I87  Use *  Keep     rdx  |    |I86a|I87i|    |    |    |    |    |    |
         405.#405 rdx  Fixd   Keep     rdx  |    |I86a|    |    |    |    |    |    |    |
         405.#406 I88  Def    Alloc    rdx  |    |I86a|I88a|    |    |    |    |    |    |
[000097] 410.#407 rcx  Fixd   Keep     rcx  |    |I86a|I88a|    |    |    |    |    |    |
         410.#408 I86  Use *  Keep     rcx  |    |I86i|I88a|    |    |    |    |    |    |
         410.#409 rdx  Fixd   Keep     rdx  |    |    |I88a|    |    |    |    |    |    |
         410.#410 I88  Use *  Keep     rdx  |    |    |I88i|    |    |    |    |    |    |
         411.#411 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         411.#412 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         411.#413 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         411.#414 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         411.#415 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         411.#416 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         411.#417 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         411.#418 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         411.#419 I89  Def    Alloc    rax  |I89a|    |    |    |    |    |    |    |    |
[000098] 412.#420 I89  Use *  Keep     rax  |I89i|    |    |    |    |    |    |    |    |
[000099] 417.#421 I90  Def    Alloc    rcx  |    |I90a|    |    |    |    |    |    |    |
[000220] 418.#422 rcx  Fixd   Keep     rcx  |    |I90a|    |    |    |    |    |    |    |
         418.#423 I90  Use *  Keep     rcx  |    |I90i|    |    |    |    |    |    |    |
         419.#424 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         419.#425 I91  Def    Alloc    rcx  |    |I91a|    |    |    |    |    |    |    |
[000100] 424.#426 rcx  Fixd   Keep     rcx  |    |I91a|    |    |    |    |    |    |    |
         424.#427 I91  Use *  Keep     rcx  |    |I91i|    |    |    |    |    |    |    |
         425.#428 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         425.#429 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         425.#430 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         425.#431 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         425.#432 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         425.#433 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         425.#434 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |

Recording the maximum number of concurrent spills:

----------
LSRA Stats
----------
Register selection order: ABCDEFGHIJKLMNOPQ
Total Tracked Vars:  0
Total Reg Cand Vars: 0
Total number of Intervals: 91
Total number of RefPositions: 434
Total Number of spill temps created: 0
..........
BB05 [  100.00]: COVERS = 1, BEST_FIT = 11, REG_ORDER = 6
..........
Total SpillCount : 0   Weighted: 0.000000
Total CopyReg : 0   Weighted: 0.000000
Total ResolutionMovs : 0   Weighted: 0.000000
Total SplitEdges : 0   Weighted: 0.000000
..........
Total COVERS [# 4] : 1   Weighted: 100.000000
Total BEST_FIT [#11] : 11   Weighted: 1100.000000
Total REG_ORDER [#13] : 6   Weighted: 600.000000

TUPLE STYLE DUMP WITH REGISTER ASSIGNMENTS
Incoming Parameters: 
BB01 [???..???), preds={} succs={BB02}
=====
  N002.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N006.                    CNS_INT(h) 0x7ffd08511d48 global ptr
  N008.                    IND      
  N010.                    CNS_INT   0
  N012.                    CMP      
  N014.                    JCC       cond=UEQ

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N018.                    CALL help

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..0C4) (return), preds={BB04} succs={}
=====
  N024.                    IL_OFFSET INLRT @ 0x000[E-]
  N026.                    NO_OP    
  N028.                    IL_OFFSET INLRT @ 0x001[E-]
  N030. rcx             =  LCL_ADDR  V11 tmp1         [+0] rcx
  N032. rcx             =  PUTARG_REG; rcx
  N034. rdx             =  CNS_INT(h) 0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N036. rdx             =  PUTARG_REG; rdx
  N038. r8              =  CNS_INT   0xF00
  N040. r8              =  PUTARG_REG; r8
  N042.                    CNS_INT(h) 0x7ffd08526a78 ftn
  N044.                    IND      
  N046.                    CALL     ; rcx,rdx,r8
  N048.                    IL_OFFSET INLRT @ 0x010[--]
  N050.                    V11 MEM
  N052.                    LCL_ADDR  V01 loc0         [+0] NA
  N054.                    STORE_BLK
  N056.                    IL_OFFSET INLRT @ 0x011[E-]
  N058. rcx             =  LCL_ADDR  V12 tmp2         [+0] rcx
  N060. rcx             =  PUTARG_REG; rcx
  N062. rdx             =  CNS_INT(h) 0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N064. rdx             =  PUTARG_REG; rdx
  N066. r8              =  CNS_INT   0xF00
  N068. r8              =  PUTARG_REG; r8
  N070.                    CNS_INT(h) 0x7ffd08526a78 ftn
  N072.                    IND      
  N074.                    CALL     ; rcx,rdx,r8
  N076.                    IL_OFFSET INLRT @ 0x020[--]
  N078.                    V12 MEM
  N080.                    LCL_ADDR  V02 loc1         [+0] NA
  N082.                    STORE_BLK
  N084.                    IL_OFFSET INLRT @ 0x021[E-]
  N086. rcx             =  CNS_INT(h)  'Ascii------'

  N088. rcx             =  PUTARG_REG; rcx
  N090.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N092.                    IND      
  N094.                    CALL     ; rcx
  N096.                    IL_OFFSET INLRT @ 0x02B[E-]
  N098.                    NO_OP    
  N100.                    IL_OFFSET INLRT @ 0x02C[E-]
  N102.                    V01 MEM
  N104.                    LCL_ADDR  V25 tmp15        [+0] NA
  N106.                    STORE_BLK
  N108.                    V02 MEM
  N110.                    LCL_ADDR  V26 tmp16        [+0] NA
  N112.                    STORE_BLK
  N114. rcx             =  LCL_ADDR  V25 tmp15        [+0] rcx
  N116. rcx             =  PUTARG_REG; rcx
  N118. rdx             =  LCL_ADDR  V26 tmp16        [+0] rdx
  N120. rdx             =  PUTARG_REG; rdx
  N122.                    CNS_INT(h) 0x7ffd085b6cb8 ftn
  N124.                    IND      
  N126. rax             =  CALL     ; rcx,rdx
  N128.                    V13 MEM; rax
  N130.                    IL_OFFSET INLRT @ 0x033[--]
  N132. rcx             =  V13 MEM
  N134. rcx             =  PUTARG_REG; rcx
  N136.                    CNS_INT(h) 0x7ffd0868fc18 ftn
  N138.                    IND      
  N140.                    CALL     ; rcx
  N142.                    IL_OFFSET INLRT @ 0x038[E-]
  N144.                    NO_OP    
  N146.                    IL_OFFSET INLRT @ 0x039[E-]
  N148. rcx             =  CNS_INT(h)  'String------'

  N150. rcx             =  PUTARG_REG; rcx
  N152.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N154.                    IND      
  N156.                    CALL     ; rcx
  N158.                    IL_OFFSET INLRT @ 0x043[E-]
  N160.                    NO_OP    
  N162.                    IL_OFFSET INLRT @ 0x044[E-]
  N164. rcx             =  CNS_INT(h)  'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

  N166.                    V03 MEM; rcx
  N168.                    IL_OFFSET INLRT @ 0x04A[E-]
  N170. rcx             =  CNS_INT(h) 0x7ffd086d1a48 class
  N172. rcx             =  PUTARG_REG; rcx
  N174. rdx             =  CNS_INT   3
  N176. rdx             =  PUTARG_REG; rdx
  N178. rax             =  CALL help; rcx,rdx
  N180.                    V14 MEM; rax
  N182.                    IL_OFFSET INLRT @ 0x050[--]
  N184. rcx             =  CNS_INT(h) 0x7ffd086d21c8 field
  N186. rcx             =  PUTARG_REG; rcx
  N188. rax             =  CALL help; rcx
  N190.                    V15 MEM; rax
  N192. rcx             =  V14 MEM
  N194. rcx             =  PUTARG_REG; rcx
  N196. rdx             =  V15 MEM
  N198. rdx             =  PUTARG_REG; rdx
  N200.                    CALL     ; rcx,rdx
  N202.                    IL_OFFSET INLRT @ 0x05B[--]
  N204. rcx             =  V14 MEM
  N206.                    V04 MEM; rcx
  N208.                    IL_OFFSET INLRT @ 0x05C[E-]
  N210. rcx             =  V03 MEM
  N212. rcx             =  PUTARG_REG; rcx
  N214. rdx             =  V04 MEM
  N216. rdx             =  PUTARG_REG; rdx
  N218. r8              =  CNS_INT   1
  N220. r8              =  PUTARG_REG; r8
  N222.                    CNS_INT(h) 0x7ffd08524cd8 ftn
  N224.                    IND      
  N226. rax             =  CALL     ; rcx,rdx,r8
  N228.                    V16 MEM; rax
  N230.                    IL_OFFSET INLRT @ 0x064[--]
  N232.                    NOP      
  N234.                    IL_OFFSET INLRT @ 0x065[E-]
  N236. rcx             =  V03 MEM
  N238. rcx             =  PUTARG_REG; rcx
  N240. rdx             =  CNS_INT   0
  N242. rdx             =  PUTARG_REG; rdx
  N244.                    CNS_INT(h) 0x7ffd08305ef0 ftn
  N246.                    IND      
  N248. rax             =  CALL nullcheck; rcx,rdx
  N250.                    V17 MEM; rax
  N252.                    IL_OFFSET INLRT @ 0x06C[--]
  N254. rcx             =  V17 MEM
  N256. rcx             =  PUTARG_REG; rcx
  N258.                    CNS_INT(h) 0x7ffd0868fc30 ftn
  N260.                    IND      
  N262.                    CALL     ; rcx
  N264.                    IL_OFFSET INLRT @ 0x071[E-]
  N266.                    NO_OP    
  N268.                    IL_OFFSET INLRT @ 0x072[E-]
  N270. rcx             =  CNS_INT(h) 0x7ffd086d1e30 class
  N272. rcx             =  PUTARG_REG; rcx
  N274. rdx             =  CNS_INT   5
  N276. rdx             =  PUTARG_REG; rdx
  N278. rax             =  CALL help; rcx,rdx
  N280.                    V18 MEM; rax
  N282.                    IL_OFFSET INLRT @ 0x078[--]
  N284. rcx             =  CNS_INT(h) 0x7ffd086d2198 field
  N286. rcx             =  PUTARG_REG; rcx
  N288. rax             =  CALL help; rcx
  N290.                    V19 MEM; rax
  N292. rcx             =  V18 MEM
  N294. rcx             =  PUTARG_REG; rcx
  N296. rdx             =  V19 MEM
  N298. rdx             =  PUTARG_REG; rdx
  N300.                    CALL     ; rcx,rdx
  N302.                    IL_OFFSET INLRT @ 0x083[--]
  N304. rcx             =  V18 MEM
  N306.                    V05 MEM; rcx
  N308.                    IL_OFFSET INLRT @ 0x085[E-]
  N310.                    NO_OP    
  N312.                    IL_OFFSET INLRT @ 0x086[E-]
  N314. rcx             =  V05 MEM
  N316. rax             =  CNS_INT   0
  N318. rcx             =  INDEX_ADDR; rcx,rax
  N320.                    V07 MEM; rcx
  N322.                    IL_OFFSET INLRT @ 0x090[E-]
  N324. rcx             =  V07 MEM
  N326.                    V27 MEM; rcx
  N328. rcx             =  V27 MEM
  N330.                    V06 MEM; rcx
  N332.                    IL_OFFSET INLRT @ 0x095[E-]
  N334.                    NO_OP    
  N336.                    IL_OFFSET INLRT @ 0x096[E-]
  N338. rcx             =  V06 MEM
  N340. rcx             =  PUTARG_REG; rcx
  N342. rax             =  CALL     ; rcx
  N344.                    V20 MEM; rax
  N346.                    IL_OFFSET INLRT @ 0x09D[--]
  N348. rcx             =  V20 MEM
  N350.                    V08 MEM; rcx
  N352.                    IL_OFFSET INLRT @ 0x09F[E-]
  N354.                    NO_OP    
  N356.                    IL_OFFSET INLRT @ 0x0A0[E-]
  N358. rcx             =  CNS_INT   0
  N360. rcx             =  CAST     ; rcx
  N362.                    V07 MEM; rcx
  N364.                    IL_OFFSET INLRT @ 0x0A4[E-]
  N366.                    NO_OP    
  N368.                    IL_OFFSET INLRT @ 0x0A5[E-]
  N370. rcx             =  CNS_INT(h)  'Main Vector512: '

  N372.                    V21 MEM; rcx
  N374.                    CNS_INT   1
  N376.                    V22 MEM
  N378.                    IL_OFFSET INLRT @ 0x0AF[--]
  N380. rcx             =  V22 MEM
  N382.                    V09 MEM; rcx
  N384. rcx             =  LCL_ADDR  V09 loc8         [+0] rcx
  N386. rcx             =  PUTARG_REG; rcx
  N388.                    CNS_INT(h) 0x7ffd0813c7c8 ftn
  N390.                    IND      
  N392. rax             =  CALL     ; rcx
  N394.                    V23 MEM; rax
  N396.                    IL_OFFSET INLRT @ 0x0B8[--]
  N398. rcx             =  V21 MEM
  N400. rcx             =  PUTARG_REG; rcx
  N402. rdx             =  V23 MEM
  N404. rdx             =  PUTARG_REG; rdx
  N406.                    CNS_INT(h) 0x7ffd08306028 ftn
  N408.                    IND      
  N410. rax             =  CALL     ; rcx,rdx
  N412.                    V24 MEM; rax
  N414.                    IL_OFFSET INLRT @ 0x0BD[--]
  N416. rcx             =  V24 MEM
  N418. rcx             =  PUTARG_REG; rcx
  N420.                    CNS_INT(h) 0x7ffd0868fd38 ftn
  N422.                    IND      
  N424.                    CALL     ; rcx
  N426.                    IL_OFFSET INLRT @ 0x0C2[E-]
  N428.                    NO_OP    
  N430.                    IL_OFFSET INLRT @ 0x0C3[E-]
  N432.                    RETURN   




*************** Finishing PHASE Linear scan register alloc
Trees after Linear scan register alloc

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N002 (  0,  0) [000000] -----------                            NOP       void   REG NA

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N006 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr REG NA
                                                            /--*  t103   long   
N008 (  5, 12) [000104] nc--G------                  t104 = *  IND       int    REG NA
N010 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0 REG NA
                                                            /--*  t104   int    
                                                            +--*  t105   int    
N012 (  7, 14) [000106] ----G--N---                         *  CMP       void   REG NA
N014 (  9, 16) [000123] ----G------                            JCC       void   cond=UEQ REG NA

------------ BB03 [???..???), preds={BB02} succs={BB04}
N018 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..0C4) (return), preds={BB04} succs={}
N024 (???,???) [000124] -----------                            IL_OFFSET void   INLRT @ 0x000[E-] REG NA
N026 (  1,  1) [000001] -----------                            NO_OP     void   REG NA
N028 (???,???) [000125] -----------                            IL_OFFSET void   INLRT @ 0x001[E-] REG NA
N030 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0] rcx REG rcx
                                                            /--*  t4     long   
N032 (???,???) [000163] -----------                  t163 = *  PUTARG_REG long   REG rcx
N034 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t2     long   
N036 (???,???) [000164] -----------                  t164 = *  PUTARG_REG long   REG rdx
N038 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t3     int    
N040 (???,???) [000165] -----------                  t165 = *  PUTARG_REG int    REG r8
N042 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
                                                            /--*  t166   long   
N044 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t163   long   this in rcx
                                                            +--*  t164   long   arg1 in rdx
                                                            +--*  t165   int    arg2 in r8
                                                            +--*  t167   long   control expr
N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N048 (???,???) [000126] -----------                            IL_OFFSET void   INLRT @ 0x010[--] REG NA
N050 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
N052 (???,???) [000168] Dc---------                  t168 =    LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
                                                            /--*  t168   byref  
                                                            +--*  t6     struct 
N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N056 (???,???) [000127] -----------                            IL_OFFSET void   INLRT @ 0x011[E-] REG NA
N058 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0] rcx REG rcx
                                                            /--*  t10    long   
N060 (???,???) [000169] -----------                  t169 = *  PUTARG_REG long   REG rcx
N062 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t8     long   
N064 (???,???) [000170] -----------                  t170 = *  PUTARG_REG long   REG rdx
N066 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t9     int    
N068 (???,???) [000171] -----------                  t171 = *  PUTARG_REG int    REG r8
N070 (  3, 10) [000172] Hc---------                  t172 =    CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
                                                            /--*  t172   long   
N072 (  5, 12) [000173] nc--G------                  t173 = *  IND       long   REG NA
                                                            /--*  t169   long   this in rcx
                                                            +--*  t170   long   arg1 in rdx
                                                            +--*  t171   int    arg2 in r8
                                                            +--*  t173   long   control expr
N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N076 (???,???) [000128] -----------                            IL_OFFSET void   INLRT @ 0x020[--] REG NA
N078 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
N080 (???,???) [000174] Dc---------                  t174 =    LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
                                                            /--*  t174   byref  
                                                            +--*  t12    struct 
N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N084 (???,???) [000129] -----------                            IL_OFFSET void   INLRT @ 0x021[E-] REG NA
N086 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'
 REG rcx
                                                            /--*  t111   ref    
N088 (???,???) [000175] -----------                  t175 = *  PUTARG_REG ref    REG rcx
N090 (  3, 10) [000176] Hc---------                  t176 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                            /--*  t176   long   
N092 (  5, 12) [000177] nc--G------                  t177 = *  IND       long   REG NA
                                                            /--*  t175   ref    arg0 in rcx
                                                            +--*  t177   long   control expr
N094 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N096 (???,???) [000130] -----------                            IL_OFFSET void   INLRT @ 0x02B[E-] REG NA
N098 (  1,  1) [000016] -----------                            NO_OP     void   REG NA
N100 (???,???) [000131] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-] REG NA
N102 (  9,  6) [000017] -c---------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
N104 (???,???) [000178] Dc---------                  t178 =    LCL_ADDR  byref  V25 tmp15        [+0] NA REG NA
                                                            /--*  t178   byref  
                                                            +--*  t17    struct 
N106 ( 19, 13) [000112] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N108 (  9,  6) [000018] -c---------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
N110 (???,???) [000179] Dc---------                  t179 =    LCL_ADDR  byref  V26 tmp16        [+0] NA REG NA
                                                            /--*  t179   byref  
                                                            +--*  t18    struct 
N112 ( 19, 13) [000113] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N114 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0] rcx REG rcx
                                                            /--*  t114   long   
N116 (???,???) [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
N118 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0] rdx REG rdx
                                                            /--*  t115   long   
N120 (???,???) [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
N122 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn REG NA
                                                            /--*  t182   long   
N124 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                            /--*  t180   long   arg0 in rcx
                                                            +--*  t181   long   arg1 in rdx
                                                            +--*  t183   long   control expr
N126 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG rax
                                                            /--*  t19    int    
N128 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
N130 (???,???) [000132] -----------                            IL_OFFSET void   INLRT @ 0x033[--] REG NA
N132 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3          rcx REG rcx
                                                            /--*  t21    int    
N134 (???,???) [000184] -----------                  t184 = *  PUTARG_REG int    REG rcx
N136 (  3, 10) [000185] Hc---------                  t185 =    CNS_INT(h) long   0x7ffd0868fc18 ftn REG NA
                                                            /--*  t185   long   
N138 (  5, 12) [000186] nc--G------                  t186 = *  IND       long   REG NA
                                                            /--*  t184   int    arg0 in rcx
                                                            +--*  t186   long   control expr
N140 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
N142 (???,???) [000133] -----------                            IL_OFFSET void   INLRT @ 0x038[E-] REG NA
N144 (  1,  1) [000023] -----------                            NO_OP     void   REG NA
N146 (???,???) [000134] -----------                            IL_OFFSET void   INLRT @ 0x039[E-] REG NA
N148 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'
 REG rcx
                                                            /--*  t116   ref    
N150 (???,???) [000187] -----------                  t187 = *  PUTARG_REG ref    REG rcx
N152 (  3, 10) [000188] Hc---------                  t188 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                            /--*  t188   long   
N154 (  5, 12) [000189] nc--G------                  t189 = *  IND       long   REG NA
                                                            /--*  t187   ref    arg0 in rcx
                                                            +--*  t189   long   control expr
N156 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N158 (???,???) [000135] -----------                            IL_OFFSET void   INLRT @ 0x043[E-] REG NA
N160 (  1,  1) [000026] -----------                            NO_OP     void   REG NA
N162 (???,???) [000136] -----------                            IL_OFFSET void   INLRT @ 0x044[E-] REG NA
N164 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG rcx
                                                            /--*  t117   ref    
N166 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
N168 (???,???) [000137] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-] REG NA
N170 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class REG rcx
                                                            /--*  t30    long   
N172 (???,???) [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
N174 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3 REG rdx
                                                            /--*  t29    long   
N176 (???,???) [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                            /--*  t190   long   arg0 in rcx
                                                            +--*  t191   long   arg1 in rdx
N178 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
                                                            /--*  t31    ref    
N180 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
N182 (???,???) [000138] -----------                            IL_OFFSET void   INLRT @ 0x050[--] REG NA
N184 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field REG rcx
                                                            /--*  t35    long   
N186 (???,???) [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                            /--*  t192   long   arg0 in rcx
N188 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
                                                            /--*  t36    ref    
N190 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
N192 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t34    ref    
N194 (???,???) [000193] -----------                  t193 = *  PUTARG_REG ref    REG rcx
N196 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0] rdx REG rdx
                                                            /--*  t39    ref    
N198 (???,???) [000194] -----------                  t194 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t193   ref    arg0 in rcx
                                                            +--*  t194   ref    arg1 in rdx
N200 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
N202 (???,???) [000139] -----------                            IL_OFFSET void   INLRT @ 0x05B[--] REG NA
N204 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t33    ref    
N206 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
N208 (???,???) [000140] -----------                            IL_OFFSET void   INLRT @ 0x05C[E-] REG NA
N210 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
                                                            /--*  t41    ref    
N212 (???,???) [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
N214 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3          rdx REG rdx
                                                            /--*  t42    ref    
N216 (???,???) [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
N218 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1 REG r8
                                                            /--*  t43    int    
N220 (???,???) [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
N222 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn REG NA
                                                            /--*  t198   long   
N224 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                            /--*  t195   ref    arg0 in rcx
                                                            +--*  t196   ref    arg1 in rdx
                                                            +--*  t197   int    arg2 in r8
                                                            +--*  t199   long   control expr
N226 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[] REG rax
                                                            /--*  t44    ref    
N228 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
N230 (???,???) [000141] -----------                            IL_OFFSET void   INLRT @ 0x064[--] REG NA
N232 (  0,  0) [000047] -----------                            NOP       void   REG NA
N234 (???,???) [000142] -----------                            IL_OFFSET void   INLRT @ 0x065[E-] REG NA
N236 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
                                                            /--*  t48    ref    
N238 (???,???) [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
N240 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0 REG rdx
                                                            /--*  t49    int    
N242 (???,???) [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
N244 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn REG NA
                                                            /--*  t202   long   
N246 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                            /--*  t200   ref    this in rcx
                                                            +--*  t201   int    arg1 in rdx
                                                            +--*  t203   long   control expr
N248 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this REG rax
                                                            /--*  t50    int    
N250 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7          NA REG NA
N252 (???,???) [000143] -----------                            IL_OFFSET void   INLRT @ 0x06C[--] REG NA
N254 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7          rcx REG rcx
                                                            /--*  t52    int    
N256 (???,???) [000204] -----------                  t204 = *  PUTARG_REG int    REG rcx
N258 (  3, 10) [000205] Hc---------                  t205 =    CNS_INT(h) long   0x7ffd0868fc30 ftn REG NA
                                                            /--*  t205   long   
N260 (  5, 12) [000206] nc--G------                  t206 = *  IND       long   REG NA
                                                            /--*  t204   int    arg0 in rcx
                                                            +--*  t206   long   control expr
N262 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort) REG NA
N264 (???,???) [000144] -----------                            IL_OFFSET void   INLRT @ 0x071[E-] REG NA
N266 (  1,  1) [000054] -----------                            NO_OP     void   REG NA
N268 (???,???) [000145] -----------                            IL_OFFSET void   INLRT @ 0x072[E-] REG NA
N270 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class REG rcx
                                                            /--*  t56    long   
N272 (???,???) [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
N274 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5 REG rdx
                                                            /--*  t55    long   
N276 (???,???) [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                            /--*  t207   long   arg0 in rcx
                                                            +--*  t208   long   arg1 in rdx
N278 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
                                                            /--*  t57    ref    
N280 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8          NA REG NA
N282 (???,???) [000146] -----------                            IL_OFFSET void   INLRT @ 0x078[--] REG NA
N284 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field REG rcx
                                                            /--*  t61    long   
N286 (???,???) [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                            /--*  t209   long   arg0 in rcx
N288 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
                                                            /--*  t62    ref    
N290 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9          NA REG NA
N292 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8          rcx REG rcx
                                                            /--*  t60    ref    
N294 (???,???) [000210] -----------                  t210 = *  PUTARG_REG ref    REG rcx
N296 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0] rdx REG rdx
                                                            /--*  t65    ref    
N298 (???,???) [000211] -----------                  t211 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t210   ref    arg0 in rcx
                                                            +--*  t211   ref    arg1 in rdx
N300 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
N302 (???,???) [000147] -----------                            IL_OFFSET void   INLRT @ 0x083[--] REG NA
N304 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8          rcx REG rcx
                                                            /--*  t59    ref    
N306 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4          NA REG NA
N308 (???,???) [000148] -----------                            IL_OFFSET void   INLRT @ 0x085[E-] REG NA
N310 (  1,  1) [000067] -----------                            NO_OP     void   REG NA
N312 (???,???) [000149] -----------                            IL_OFFSET void   INLRT @ 0x086[E-] REG NA
N314 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4          rcx REG rcx
N316 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0 REG rax
                                                            /--*  t68    ref    
                                                            +--*  t69    int    
N318 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[] REG rcx
                                                            /--*  t70    byref  
N320 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
N322 (???,???) [000150] -----------                            IL_OFFSET void   INLRT @ 0x090[E-] REG NA
N324 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6          rcx REG rcx
                                                            /--*  t72    byref  
N326 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17         NA REG NA
N328 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17         rcx REG rcx
                                                            /--*  t119   long   
N330 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5          NA REG NA
N332 (???,???) [000151] -----------                            IL_OFFSET void   INLRT @ 0x095[E-] REG NA
N334 (  1,  1) [000075] -----------                            NO_OP     void   REG NA
N336 (???,???) [000152] -----------                            IL_OFFSET void   INLRT @ 0x096[E-] REG NA
N338 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5          rcx REG rcx
                                                            /--*  t76    long   
N340 (???,???) [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                            /--*  t212   long   arg0 in rcx
N342 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this REG rax
                                                            /--*  t77    ref    
N344 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10         NA REG NA
N346 (???,???) [000153] -----------                            IL_OFFSET void   INLRT @ 0x09D[--] REG NA
N348 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10         rcx REG rcx
                                                            /--*  t79    ref    
N350 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7          NA REG NA
N352 (???,???) [000154] -----------                            IL_OFFSET void   INLRT @ 0x09F[E-] REG NA
N354 (  1,  1) [000081] -----------                            NO_OP     void   REG NA
N356 (???,???) [000155] -----------                            IL_OFFSET void   INLRT @ 0x0A0[E-] REG NA
N358 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0 REG rcx
                                                            /--*  t82    int    
N360 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint REG rcx
                                                            /--*  t83    long   
N362 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
N364 (???,???) [000156] -----------                            IL_OFFSET void   INLRT @ 0x0A4[E-] REG NA
N366 (  1,  1) [000085] -----------                            NO_OP     void   REG NA
N368 (???,???) [000157] -----------                            IL_OFFSET void   INLRT @ 0x0A5[E-] REG NA
N370 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '
 REG rcx
                                                            /--*  t122   ref    
N372 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11         NA REG NA
N374 (  1,  1) [000087] -c---------                   t87 =    CNS_INT   int    1 REG NA
                                                            /--*  t87    int    
N376 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12         NA REG NA
N378 (???,???) [000158] -----------                            IL_OFFSET void   INLRT @ 0x0AF[--] REG NA
N380 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12         rcx REG rcx
                                                            /--*  t91    int    
N382 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8          NA REG NA
N384 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0] rcx REG rcx
                                                            /--*  t93    long   
N386 (???,???) [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
N388 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn REG NA
                                                            /--*  t214   long   
N390 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                            /--*  t213   long   this in rcx
                                                            +--*  t215   long   control expr
N392 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this REG rax
                                                            /--*  t94    ref    
N394 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13         NA REG NA
N396 (???,???) [000159] -----------                            IL_OFFSET void   INLRT @ 0x0B8[--] REG NA
N398 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11         rcx REG rcx
                                                            /--*  t89    ref    
N400 (???,???) [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
N402 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13         rdx REG rdx
                                                            /--*  t96    ref    
N404 (???,???) [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
N406 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn REG NA
                                                            /--*  t218   long   
N408 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                            /--*  t216   ref    arg0 in rcx
                                                            +--*  t217   ref    arg1 in rdx
                                                            +--*  t219   long   control expr
N410 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String REG rax
                                                            /--*  t97    ref    
N412 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14         NA REG NA
N414 (???,???) [000160] -----------                            IL_OFFSET void   INLRT @ 0x0BD[--] REG NA
N416 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14         rcx REG rcx
                                                            /--*  t99    ref    
N418 (???,???) [000220] -----------                  t220 = *  PUTARG_REG ref    REG rcx
N420 (  3, 10) [000221] Hc---------                  t221 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                            /--*  t221   long   
N422 (  5, 12) [000222] nc--G------                  t222 = *  IND       long   REG NA
                                                            /--*  t220   ref    arg0 in rcx
                                                            +--*  t222   long   control expr
N424 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N426 (???,???) [000161] -----------                            IL_OFFSET void   INLRT @ 0x0C2[E-] REG NA
N428 (  1,  1) [000101] -----------                            NO_OP     void   REG NA
N430 (???,???) [000162] -----------                            IL_OFFSET void   INLRT @ 0x0C3[E-] REG NA
N432 (  0,  0) [000102] -----------                            RETURN    void   REG NA

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Place 'align' instructions

*************** Finishing PHASE Place 'align' instructions [no changes]
*************** In genGenerateCode()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Generate code
*************** In fgDebugCheckBBlist
Finalizing stack frame
must init V01 because it has a GC ref
must init V02 because it has a GC ref
must init V03 because it has a GC ref
must init V04 because it has a GC ref
must init V05 because it has a GC ref
must init V06 because compInitMem is set and it is not a temp
must init V07 because it has a GC ref
must init V08 because it has a GC ref
must init V09 because compInitMem is set and it is not a temp
must init V11 because it has a GC ref
must init V12 because it has a GC ref
must init V14 because it has a GC ref
must init V15 because it has a GC ref
must init V16 because it has a GC ref
must init V18 because it has a GC ref
must init V19 because it has a GC ref
must init V20 because it has a GC ref
must init V21 because it has a GC ref
must init V23 because it has a GC ref
must init V24 because it has a GC ref
must init V25 because it has a GC ref
must init V26 because it has a GC ref
Modified regs: [rax rcx rdx r8-r11 mm0]
Callee-saved registers pushed: 0 []
*************** In lvaAssignFrameOffsets(FINAL_FRAME_LAYOUT)
Assign V01 loc0, size=16, stkOffs=-0x20
Assign V02 loc1, size=16, stkOffs=-0x30
Assign V03 loc2, size=8, stkOffs=-0x38
Assign V04 loc3, size=8, stkOffs=-0x40
Assign V05 loc4, size=8, stkOffs=-0x48
Assign V06 loc5, size=8, stkOffs=-0x50
Assign V07 loc6, size=8, stkOffs=-0x58
Assign V08 loc7, size=8, stkOffs=-0x60
Assign V09 loc8, size=8, stkOffs=-0x68
Assign V11 tmp1, size=16, stkOffs=-0x78
Assign V12 tmp2, size=16, stkOffs=-0x88
Assign V13 tmp3, size=4, stkOffs=-0x8c
Pad V14 tmp4, size=8, stkOffs=-0x90, pad=4
Assign V14 tmp4, size=8, stkOffs=-0x98
Assign V15 tmp5, size=8, stkOffs=-0xa0
Assign V16 tmp6, size=8, stkOffs=-0xa8
Assign V17 tmp7, size=4, stkOffs=-0xac
Pad V18 tmp8, size=8, stkOffs=-0xb0, pad=4
Assign V18 tmp8, size=8, stkOffs=-0xb8
Assign V19 tmp9, size=8, stkOffs=-0xc0
Assign V20 tmp10, size=8, stkOffs=-0xc8
Assign V21 tmp11, size=8, stkOffs=-0xd0
Assign V22 tmp12, size=4, stkOffs=-0xd4
Pad V23 tmp13, size=8, stkOffs=-0xd8, pad=4
Assign V23 tmp13, size=8, stkOffs=-0xe0
Assign V24 tmp14, size=8, stkOffs=-0xe8
Assign V25 tmp15, size=16, stkOffs=-0xf8
Assign V26 tmp16, size=16, stkOffs=-0x108
Assign V27 tmp17, size=8, stkOffs=-0x110
Assign V10 OutArgs, size=32, stkOffs=-0x130
--- delta bump 8 for RA
--- delta bump 8 for FP
--- delta bump 0 for FP frame
--- virtual stack offset to actual stack offset delta is 16
-- V00 was 0, now 16
-- V01 was -32, now -16
-- V02 was -48, now -32
-- V03 was -56, now -40
-- V04 was -64, now -48
-- V05 was -72, now -56
-- V06 was -80, now -64
-- V07 was -88, now -72
-- V08 was -96, now -80
-- V09 was -104, now -88
-- V10 was -304, now -288
-- V11 was -120, now -104
-- V12 was -136, now -120
-- V13 was -140, now -124
-- V14 was -152, now -136
-- V15 was -160, now -144
-- V16 was -168, now -152
-- V17 was -172, now -156
-- V18 was -184, now -168
-- V19 was -192, now -176
-- V20 was -200, now -184
-- V21 was -208, now -192
-- V22 was -212, now -196
-- V23 was -224, now -208
-- V24 was -232, now -216
-- V25 was -248, now -232
-- V26 was -264, now -248
-- V27 was -272, now -256
; Final local variable assignments
;
;  V00 arg0         [V00    ] (  1,  1   )     ref  ->  [rbp+10H]   do-not-enreg[] class-hnd <System.String[]>
;  V01 loc0         [V01    ] (  1,  1   )  struct (16) [rbp-10H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1         [V02    ] (  1,  1   )  struct (16) [rbp-20H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2         [V03    ] (  1,  1   )     ref  ->  [rbp-28H]   do-not-enreg[] must-init class-hnd exact <System.String>
;  V04 loc3         [V04    ] (  1,  1   )     ref  ->  [rbp-30H]   do-not-enreg[] must-init class-hnd exact <ushort[]>
;  V05 loc4         [V05    ] (  1,  1   )     ref  ->  [rbp-38H]   do-not-enreg[] must-init class-hnd exact <byte[]>
;  V06 loc5         [V06    ] (  1,  1   )    long  ->  [rbp-40H]   do-not-enreg[] must-init
;  V07 loc6         [V07    ] (  1,  1   )   byref  ->  [rbp-48H]   do-not-enreg[] must-init pinned
;  V08 loc7         [V08    ] (  1,  1   )     ref  ->  [rbp-50H]   do-not-enreg[] must-init class-hnd exact <System.String>
;  V09 loc8         [V09    ] (  1,  1   )    bool  ->  [rbp-58H]   do-not-enreg[X] must-init addr-exposed ld-addr-op
;  V10 OutArgs      [V10    ] (  1,  1   )  struct (32) [rsp+00H]   do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
;  V11 tmp1         [V11    ] (  1,  1   )  struct (16) [rbp-68H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V12 tmp2         [V12    ] (  1,  1   )  struct (16) [rbp-78H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V13 tmp3         [V13    ] (  1,  1   )     int  ->  [rbp-7CH]   do-not-enreg[] "impSpillStackEnsure"
;  V14 tmp4         [V14    ] (  1,  1   )     ref  ->  [rbp-88H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <ushort[]>
;  V15 tmp5         [V15    ] (  1,  1   )  struct ( 8) [rbp-90H]   do-not-enreg[S] must-init "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V16 tmp6         [V16    ] (  1,  1   )     ref  ->  [rbp-98H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String[]>
;  V17 tmp7         [V17    ] (  1,  1   )     int  ->  [rbp-9CH]   do-not-enreg[] "impSpillStackEnsure"
;  V18 tmp8         [V18    ] (  1,  1   )     ref  ->  [rbp-A8H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <byte[]>
;  V19 tmp9         [V19    ] (  1,  1   )  struct ( 8) [rbp-B0H]   do-not-enreg[S] must-init "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V20 tmp10        [V20    ] (  1,  1   )     ref  ->  [rbp-B8H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V21 tmp11        [V21    ] (  1,  1   )     ref  ->  [rbp-C0H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V22 tmp12        [V22    ] (  1,  1   )     int  ->  [rbp-C4H]   do-not-enreg[] "impSpillStackEnsure"
;  V23 tmp13        [V23    ] (  1,  1   )     ref  ->  [rbp-D0H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V24 tmp14        [V24    ] (  1,  1   )     ref  ->  [rbp-D8H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V25 tmp15        [V25    ] (  1,  1   )  struct (16) [rbp-E8H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V26 tmp16        [V26    ] (  1,  1   )  struct (16) [rbp-F8H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V27 tmp17        [V27    ] (  1,  1   )    long  ->  [rbp-100H]   do-not-enreg[] "Cast away GC"
;
; Lcl frame size = 288
Created:
      G_M16158_IG02:        ; offs=000000H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mark labels for codegen
  BB01 : first block
  BB04 : branch target
*************** After genMarkLabelsForCodegen()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal label hascall LIR 
BB02 [0003]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0004]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0002]  2       BB02,BB03             1       [???..???)                                     i internal label hascall LIR 
BB05 [0001]  1       BB04                  1       [000..0C4)        (return)                     i hascall gcsafe idxlen newobj LIR 
-----------------------------------------------------------------------------------------------------------------------------------------
Setting stack level from -572662307 to 0

=============== Generating BB01 [???..???), preds={} succs={BB02} flags=0x00000001.00020031: i internal label hascall LIR 
BB01 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M16158_BB01:
Label: G_M16158_IG02, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB01, IL range [???..???)
Scope info: ignoring block beginning
Generating: N002 (  0,  0) [000000] -----------                            NOP       void   REG NA
Scope info: ignoring block end

Variable Live Range History Dump for BB01
..None..

=============== Generating BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04} flags=0x00000000.00000021: internal LIR 
BB02 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M16158_BB02:

Scope info: begin block BB02, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP (G_M16158_IG02,ins#0,ofs#0) label
Generating: N006 (  3, 10) [000103] Hc---------                  t103 =    CNS_INT(h) long   0x7ffd08511d48 global ptr REG NA
                                                                        /--*  t103   long   
Generating: N008 (  5, 12) [000104] nc--G------                  t104 = *  IND       int    REG NA
Generating: N010 (  1,  1) [000105] -c---------                  t105 =    CNS_INT   int    0 REG NA
                                                                        /--*  t104   int    
                                                                        +--*  t105   int    
Generating: N012 (  7, 14) [000106] ----G--N---                         *  CMP       void   REG NA
Mapped BB02 to G_M16158_IG02
IN0001:        cmp      dword ptr [(reloc 0x7ffd08511d48)], 0
Generating: N014 (  9, 16) [000123] ----G------                            JCC       void   cond=UEQ REG NA
IN0002:        je       L_M16158_BB04
Scope info: ignoring block end

Variable Live Range History Dump for BB02
..None..

=============== Generating BB03 [???..???), preds={BB02} succs={BB04} flags=0x00000000.00000021: internal LIR 
BB03 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M16158_BB03:
Adding label due to BB weight difference: BBJ_COND BB02 with weight 100 different from BB03 with weight 50
Saved:
      G_M16158_IG02:        ; offs=000000H, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0003], byref
Created:
      G_M16158_IG03:        ; offs=00000DH, size=0000H, bbWeight=0.50, gcrefRegs=0000 {}
Label: G_M16158_IG03, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB03, IL range [???..???)
Scope info: ignoring block beginning
genIPmappingAdd: ignoring duplicate IL offset 0xffffffff
Generating: N018 ( 14,  5) [000107] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Mapped BB03 to G_M16158_IG03
IN0003:        call     CORINFO_HELP_DBG_IS_JUST_MY_CODE
Scope info: ignoring block end

Variable Live Range History Dump for BB03
..None..

=============== Generating BB04 [???..???), preds={BB02,BB03} succs={BB05} flags=0x00000001.00020031: i internal label hascall LIR 
BB04 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M16158_BB04:
Saved:
      G_M16158_IG03:        ; offs=00000DH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0004], byref
Created:
      G_M16158_IG04:        ; offs=000012H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Label: G_M16158_IG04, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB04, IL range [???..???)
Scope info: ignoring block beginning
genIPmappingAdd: ignoring duplicate IL offset 0xffffffff
Scope info: ignoring block end

Variable Live Range History Dump for BB04
..None..

=============== Generating BB05 [000..0C4) (return), preds={BB04} succs={} flags=0x00000001.02600011: i hascall gcsafe idxlen newobj LIR 
BB05 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M16158_BB05:

Scope info: begin block BB05, IL range [000..0C4)
Scope info: opening scope, LVnum=0 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=8 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=7 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=6 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=5 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=4 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=3 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=2 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=1 [000..0C4)
New debug range: first
Scope info: opening scope, LVnum=9 [000..0C4)
New debug range: first
Added IP mapping: 0x0000 STACK_EMPTY (G_M16158_IG04,ins#0,ofs#0) label
Generating: N024 (???,???) [000124] -----------                            IL_OFFSET void   INLRT @ 0x000[E-] REG NA
Generating: N026 (  1,  1) [000001] -----------                            NO_OP     void   REG NA
Mapped BB05 to G_M16158_IG04
IN0004:        nop      
Added IP mapping: 0x0001 STACK_EMPTY (G_M16158_IG04,ins#1,ofs#1)
Generating: N028 (???,???) [000125] -----------                            IL_OFFSET void   INLRT @ 0x001[E-] REG NA
Generating: N030 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0] rcx REG rcx
IN0005:        lea      rcx, [V11 rbp-68H]
                                                                        /--*  t4     long   
Generating: N032 (???,???) [000163] -----------                  t163 = *  PUTARG_REG long   REG rcx
Generating: N034 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
IN0006:        mov      rdx, 0x29BCA452DD0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
                                                                        /--*  t2     long   
Generating: N036 (???,???) [000164] -----------                  t164 = *  PUTARG_REG long   REG rdx
Generating: N038 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00 REG r8
IN0007:        mov      r8d, 0xF00
                                                                        /--*  t3     int    
Generating: N040 (???,???) [000165] -----------                  t165 = *  PUTARG_REG int    REG r8
Generating: N042 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
                                                                        /--*  t166   long   
Generating: N044 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                                        /--*  t163   long   this in rcx
                                                                        +--*  t164   long   arg1 in rdx
                                                                        +--*  t165   int    arg2 in r8
                                                                        +--*  t167   long   control expr
Generating: N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x000B CALL_INSTRUCTION (G_M16158_IG04,ins#4,ofs#21)
IN0008:        call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
Added IP mapping: 0x0010 (G_M16158_IG04,ins#5,ofs#27)
Generating: N048 (???,???) [000126] -----------                            IL_OFFSET void   INLRT @ 0x010[--] REG NA
Generating: N050 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
Generating: N052 (???,???) [000168] Dc---------                  t168 =    LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
                                                                        /--*  t168   byref  
                                                                        +--*  t6     struct 
Generating: N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M16158_IG04:        ; offs=000012H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
Created:
      G_M16158_IG05:        ; offs=00002DH, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB05 to G_M16158_IG05
IN0009:        vmovdqu32 xmm0, xmmword ptr [V11 rbp-68H]
IN000a:        vmovdqu32 xmmword ptr [V01 rbp-10H], xmm0
Enable GC
Added IP mapping: 0x0011 STACK_EMPTY (G_M16158_IG05,ins#2,ofs#20)
Generating: N056 (???,???) [000127] -----------                            IL_OFFSET void   INLRT @ 0x011[E-] REG NA
Generating: N058 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0] rcx REG rcx
Saved:
      G_M16158_IG05:        ; offs=00002DH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Created:
      G_M16158_IG06:        ; offs=000041H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mapped BB05 to G_M16158_IG06
IN000b:        lea      rcx, [V12 rbp-78H]
                                                                        /--*  t10    long   
Generating: N060 (???,???) [000169] -----------                  t169 = *  PUTARG_REG long   REG rcx
Generating: N062 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x29bca452dd0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
IN000c:        mov      rdx, 0x29BCA452DD0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
                                                                        /--*  t8     long   
Generating: N064 (???,???) [000170] -----------                  t170 = *  PUTARG_REG long   REG rdx
Generating: N066 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00 REG r8
IN000d:        mov      r8d, 0xF00
                                                                        /--*  t9     int    
Generating: N068 (???,???) [000171] -----------                  t171 = *  PUTARG_REG int    REG r8
Generating: N070 (  3, 10) [000172] Hc---------                  t172 =    CNS_INT(h) long   0x7ffd08526a78 ftn REG NA
                                                                        /--*  t172   long   
Generating: N072 (  5, 12) [000173] nc--G------                  t173 = *  IND       long   REG NA
                                                                        /--*  t169   long   this in rcx
                                                                        +--*  t170   long   arg1 in rdx
                                                                        +--*  t171   int    arg2 in r8
                                                                        +--*  t173   long   control expr
Generating: N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x001B CALL_INSTRUCTION (G_M16158_IG06,ins#3,ofs#20)
IN000e:        call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
Added IP mapping: 0x0020 (G_M16158_IG06,ins#4,ofs#26)
Generating: N076 (???,???) [000128] -----------                            IL_OFFSET void   INLRT @ 0x020[--] REG NA
Generating: N078 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
Generating: N080 (???,???) [000174] Dc---------                  t174 =    LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
                                                                        /--*  t174   byref  
                                                                        +--*  t12    struct 
Generating: N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M16158_IG06:        ; offs=000041H, size=001AH, bbWeight=1, BB05 [0001], extend
Created:
      G_M16158_IG07:        ; offs=00005BH, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB05 to G_M16158_IG07
IN000f:        vmovdqu32 xmm0, xmmword ptr [V12 rbp-78H]
IN0010:        vmovdqu32 xmmword ptr [V02 rbp-20H], xmm0
Enable GC
Added IP mapping: 0x0021 STACK_EMPTY (G_M16158_IG07,ins#2,ofs#20)
Generating: N084 (???,???) [000129] -----------                            IL_OFFSET void   INLRT @ 0x021[E-] REG NA
Generating: N086 (  3, 10) [000111] H----------                  t111 =    CNS_INT(h) ref     'Ascii------'
 REG rcx
Saved:
      G_M16158_IG07:        ; offs=00005BH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Created:
      G_M16158_IG08:        ; offs=00006FH, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mapped BB05 to G_M16158_IG08
IN0011:        mov      rcx, 0x29B80301760      ; 'Ascii------'

							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t111   ref    
Generating: N088 (???,???) [000175] -----------                  t175 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N090 (  3, 10) [000176] Hc---------                  t176 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                                        /--*  t176   long   
Generating: N092 (  5, 12) [000177] nc--G------                  t177 = *  IND       long   REG NA
                                                                        /--*  t175   ref    arg0 in rcx
                                                                        +--*  t177   long   control expr
Generating: N094 ( 17, 16) [000015] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
							GC regs: 0002 {rcx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0026 CALL_INSTRUCTION (G_M16158_IG08,ins#1,ofs#10)
IN0012:        call     [System.Console:WriteLine(System.String)]
Added IP mapping: 0x002B STACK_EMPTY (G_M16158_IG08,ins#2,ofs#16)
Generating: N096 (???,???) [000130] -----------                            IL_OFFSET void   INLRT @ 0x02B[E-] REG NA
Generating: N098 (  1,  1) [000016] -----------                            NO_OP     void   REG NA
IN0013:        nop      
Added IP mapping: 0x002C STACK_EMPTY (G_M16158_IG08,ins#3,ofs#17)
Generating: N100 (???,???) [000131] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-] REG NA
Generating: N102 (  9,  6) [000017] -c---------                   t17 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
Generating: N104 (???,???) [000178] Dc---------                  t178 =    LCL_ADDR  byref  V25 tmp15        [+0] NA REG NA
                                                                        /--*  t178   byref  
                                                                        +--*  t17    struct 
Generating: N106 ( 19, 13) [000112] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M16158_IG08:        ; offs=00006FH, size=0011H, bbWeight=1, BB05 [0001], extend
Created:
      G_M16158_IG09:        ; offs=000080H, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB05 to G_M16158_IG09
IN0014:        vmovdqu32 xmm0, xmmword ptr [V01 rbp-10H]
IN0015:        vmovdqu32 xmmword ptr [V25 rbp-E8H], xmm0
Enable GC
Generating: N108 (  9,  6) [000018] -c---------                   t18 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
Generating: N110 (???,???) [000179] Dc---------                  t179 =    LCL_ADDR  byref  V26 tmp16        [+0] NA REG NA
                                                                        /--*  t179   byref  
                                                                        +--*  t18    struct 
Generating: N112 ( 19, 13) [000113] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M16158_IG09:        ; offs=000080H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Created:
      G_M16158_IG10:        ; offs=000094H, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB05 to G_M16158_IG10
IN0016:        vmovdqu32 xmm0, xmmword ptr [V02 rbp-20H]
IN0017:        vmovdqu32 xmmword ptr [V26 rbp-F8H], xmm0
Enable GC
Generating: N114 (  3,  3) [000114] -----------                  t114 =    LCL_ADDR  long   V25 tmp15        [+0] rcx REG rcx
Saved:
      G_M16158_IG10:        ; offs=000094H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Created:
      G_M16158_IG11:        ; offs=0000A8H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mapped BB05 to G_M16158_IG11
IN0018:        lea      rcx, [V25 rbp-E8H]
                                                                        /--*  t114   long   
Generating: N116 (???,???) [000180] -----------                  t180 = *  PUTARG_REG long   REG rcx
Generating: N118 (  3,  3) [000115] -----------                  t115 =    LCL_ADDR  long   V26 tmp16        [+0] rdx REG rdx
IN0019:        lea      rdx, [V26 rbp-F8H]
                                                                        /--*  t115   long   
Generating: N120 (???,???) [000181] -----------                  t181 = *  PUTARG_REG long   REG rdx
Generating: N122 (  3, 10) [000182] Hc---------                  t182 =    CNS_INT(h) long   0x7ffd085b6cb8 ftn REG NA
                                                                        /--*  t182   long   
Generating: N124 (  5, 12) [000183] nc--G------                  t183 = *  IND       long   REG NA
                                                                        /--*  t180   long   arg0 in rcx
                                                                        +--*  t181   long   arg1 in rdx
                                                                        +--*  t183   long   control expr
Generating: N126 ( 64, 39) [000019] --CXG------                   t19 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x002E CALL_INSTRUCTION (G_M16158_IG11,ins#2,ofs#14)
IN001a:        call     [System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool]
                                                                        /--*  t19    int    
Generating: N128 ( 68, 42) [000020] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
IN001b:        mov      dword ptr [V13 rbp-7CH], eax
Added IP mapping: 0x0033 (G_M16158_IG11,ins#4,ofs#23)
Generating: N130 (???,???) [000132] -----------                            IL_OFFSET void   INLRT @ 0x033[--] REG NA
Generating: N132 (  3,  2) [000021] -----------                   t21 =    LCL_VAR   int    V13 tmp3          rcx REG rcx
IN001c:        mov      ecx, dword ptr [V13 rbp-7CH]
                                                                        /--*  t21    int    
Generating: N134 (???,???) [000184] -----------                  t184 = *  PUTARG_REG int    REG rcx
Generating: N136 (  3, 10) [000185] Hc---------                  t185 =    CNS_INT(h) long   0x7ffd0868fc18 ftn REG NA
                                                                        /--*  t185   long   
Generating: N138 (  5, 12) [000186] nc--G------                  t186 = *  IND       long   REG NA
                                                                        /--*  t184   int    arg0 in rcx
                                                                        +--*  t186   long   control expr
Generating: N140 ( 17,  8) [000022] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0033 CALL_INSTRUCTION (G_M16158_IG11,ins#5,ofs#26)
IN001d:        call     [System.Console:WriteLine(bool)]
Added IP mapping: 0x0038 STACK_EMPTY (G_M16158_IG11,ins#6,ofs#32)
Generating: N142 (???,???) [000133] -----------                            IL_OFFSET void   INLRT @ 0x038[E-] REG NA
Generating: N144 (  1,  1) [000023] -----------                            NO_OP     void   REG NA
IN001e:        nop      
Added IP mapping: 0x0039 STACK_EMPTY (G_M16158_IG11,ins#7,ofs#33)
Generating: N146 (???,???) [000134] -----------                            IL_OFFSET void   INLRT @ 0x039[E-] REG NA
Generating: N148 (  3, 10) [000116] H----------                  t116 =    CNS_INT(h) ref     'String------'
 REG rcx
IN001f:        mov      rcx, 0x29B80301790      ; 'String------'

							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t116   ref    
Generating: N150 (???,???) [000187] -----------                  t187 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N152 (  3, 10) [000188] Hc---------                  t188 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                                        /--*  t188   long   
Generating: N154 (  5, 12) [000189] nc--G------                  t189 = *  IND       long   REG NA
                                                                        /--*  t187   ref    arg0 in rcx
                                                                        +--*  t189   long   control expr
Generating: N156 ( 17, 16) [000025] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
							GC regs: 0002 {rcx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x003E CALL_INSTRUCTION (G_M16158_IG11,ins#8,ofs#43)
IN0020:        call     [System.Console:WriteLine(System.String)]
Added IP mapping: 0x0043 STACK_EMPTY (G_M16158_IG11,ins#9,ofs#49)
Generating: N158 (???,???) [000135] -----------                            IL_OFFSET void   INLRT @ 0x043[E-] REG NA
Generating: N160 (  1,  1) [000026] -----------                            NO_OP     void   REG NA
IN0021:        nop      
Added IP mapping: 0x0044 STACK_EMPTY (G_M16158_IG11,ins#10,ofs#50)
Generating: N162 (???,???) [000136] -----------                            IL_OFFSET void   INLRT @ 0x044[E-] REG NA
Generating: N164 (  3, 10) [000117] H----------                  t117 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG rcx
IN0022:        mov      rcx, 0x29B803017C0      ; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t117   ref    
Generating: N166 (  7, 13) [000028] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
							GC regs: 0002 {rcx} => 0000 {}
IN0023:        mov      gword ptr [V03 rbp-28H], rcx
Added IP mapping: 0x004A STACK_EMPTY (G_M16158_IG11,ins#12,ofs#64)
Generating: N168 (???,???) [000137] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-] REG NA
Generating: N170 (  3, 10) [000030] H----------                   t30 =    CNS_INT(h) long   0x7ffd086d1a48 class REG rcx
IN0024:        mov      rcx, 0x7FFD086D1A48      ; ushort[]
                                                                        /--*  t30    long   
Generating: N172 (???,???) [000190] -----------                  t190 = *  PUTARG_REG long   REG rcx
Generating: N174 (  1,  1) [000029] -----------                   t29 =    CNS_INT   long   3 REG rdx
IN0025:        mov      edx, 3
                                                                        /--*  t29    long   
Generating: N176 (???,???) [000191] -----------                  t191 = *  PUTARG_REG long   REG rdx
                                                                        /--*  t190   long   arg0 in rcx
                                                                        +--*  t191   long   arg1 in rdx
Generating: N178 ( 18, 18) [000031] --CXG------                   t31 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN0026:        call     CORINFO_HELP_NEWARR_1_VC
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t31    ref    
Generating: N180 ( 22, 21) [000032] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN0027:        mov      gword ptr [V14 rbp-88H], rax
Added IP mapping: 0x0050 (G_M16158_IG11,ins#16,ofs#91)
Generating: N182 (???,???) [000138] -----------                            IL_OFFSET void   INLRT @ 0x050[--] REG NA
Generating: N184 (  3, 10) [000035] H----------                   t35 =    CNS_INT(h) long   0x7ffd086d21c8 field REG rcx
IN0028:        mov      rcx, 0x7FFD086D21C8      ; <PrivateImplementationDetails>:8EF6341A03FE4690DA03E4B9770B67F1FB07C68BBE1CE709341225060715D4A5
                                                                        /--*  t35    long   
Generating: N186 (???,???) [000192] -----------                  t192 = *  PUTARG_REG long   REG rcx
                                                                        /--*  t192   long   arg0 in rcx
Generating: N188 ( 17, 16) [000036] --CXG------                   t36 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN0029:        call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t36    ref    
Generating: N190 ( 27, 23) [000038] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN002a:        mov      gword ptr [V15 rbp-90H], rax
Generating: N192 (  3,  2) [000034] -----------                   t34 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
IN002b:        mov      rcx, gword ptr [V14 rbp-88H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t34    ref    
Generating: N194 (???,???) [000193] -----------                  t193 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N196 (  3,  4) [000039] -----------                   t39 =    LCL_FLD   ref    V15 tmp5         [+0] rdx REG rdx
IN002c:        mov      rdx, gword ptr [V15 rbp-90H]
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t39    ref    
Generating: N198 (???,???) [000194] -----------                  t194 = *  PUTARG_REG ref    REG rdx
							GC regs: 0006 {rcx rdx} => 0002 {rcx}
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t193   ref    arg0 in rcx
                                                                        +--*  t194   ref    arg1 in rdx
Generating: N200 ( 20, 13) [000037] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
							GC regs: 0006 {rcx rdx} => 0004 {rdx}
							GC regs: 0004 {rdx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0056 CALL_INSTRUCTION (G_M16158_IG11,ins#21,ofs#127)
IN002d:        call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
Added IP mapping: 0x005B (G_M16158_IG11,ins#22,ofs#132)
Generating: N202 (???,???) [000139] -----------                            IL_OFFSET void   INLRT @ 0x05B[--] REG NA
Generating: N204 (  3,  2) [000033] -----------                   t33 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
IN002e:        mov      rcx, gword ptr [V14 rbp-88H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t33    ref    
Generating: N206 (  7,  5) [000040] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
							GC regs: 0002 {rcx} => 0000 {}
IN002f:        mov      gword ptr [V04 rbp-30H], rcx
Added IP mapping: 0x005C STACK_EMPTY (G_M16158_IG11,ins#24,ofs#143)
Generating: N208 (???,???) [000140] -----------                            IL_OFFSET void   INLRT @ 0x05C[E-] REG NA
Generating: N210 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
IN0030:        mov      rcx, gword ptr [V03 rbp-28H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t41    ref    
Generating: N212 (???,???) [000195] -----------                  t195 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N214 (  3,  2) [000042] -----------                   t42 =    LCL_VAR   ref    V04 loc3          rdx REG rdx
IN0031:        mov      rdx, gword ptr [V04 rbp-30H]
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t42    ref    
Generating: N216 (???,???) [000196] -----------                  t196 = *  PUTARG_REG ref    REG rdx
							GC regs: 0006 {rcx rdx} => 0002 {rcx}
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
Generating: N218 (  1,  1) [000043] -----------                   t43 =    CNS_INT   int    1 REG r8
IN0032:        mov      r8d, 1
                                                                        /--*  t43    int    
Generating: N220 (???,???) [000197] -----------                  t197 = *  PUTARG_REG int    REG r8
Generating: N222 (  3, 10) [000198] Hc---------                  t198 =    CNS_INT(h) long   0x7ffd08524cd8 ftn REG NA
                                                                        /--*  t198   long   
Generating: N224 (  5, 12) [000199] nc--G------                  t199 = *  IND       long   REG NA
                                                                        /--*  t195   ref    arg0 in rcx
                                                                        +--*  t196   ref    arg1 in rdx
                                                                        +--*  t197   int    arg2 in r8
                                                                        +--*  t199   long   control expr
Generating: N226 ( 21, 13) [000044] --CXG------                   t44 = *  CALL      ref    System.Text.Program:Split(System.String,ushort[],int):System.String[] REG rax
							GC regs: 0006 {rcx rdx} => 0004 {rdx}
							GC regs: 0004 {rdx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x005F CALL_INSTRUCTION (G_M16158_IG11,ins#27,ofs#157)
IN0033:        call     [System.Text.Program:Split(System.String,ushort[],int):System.String[]]
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t44    ref    
Generating: N228 ( 25, 16) [000045] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN0034:        mov      gword ptr [V16 rbp-98H], rax
Added IP mapping: 0x0064 (G_M16158_IG11,ins#29,ofs#170)
Generating: N230 (???,???) [000141] -----------                            IL_OFFSET void   INLRT @ 0x064[--] REG NA
Generating: N232 (  0,  0) [000047] -----------                            NOP       void   REG NA
IN0035:        nop      
Added IP mapping: 0x0065 STACK_EMPTY (G_M16158_IG11,ins#30,ofs#171)
Generating: N234 (???,???) [000142] -----------                            IL_OFFSET void   INLRT @ 0x065[E-] REG NA
Generating: N236 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
IN0036:        mov      rcx, gword ptr [V03 rbp-28H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t48    ref    
Generating: N238 (???,???) [000200] -----------                  t200 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N240 (  1,  1) [000049] -----------                   t49 =    CNS_INT   int    0 REG rdx
IN0037:        xor      edx, edx
                                                                        /--*  t49    int    
Generating: N242 (???,???) [000201] -----------                  t201 = *  PUTARG_REG int    REG rdx
Generating: N244 (  3, 10) [000202] Hc---------                  t202 =    CNS_INT(h) long   0x7ffd08305ef0 ftn REG NA
                                                                        /--*  t202   long   
Generating: N246 (  5, 12) [000203] nc--G------                  t203 = *  IND       long   REG NA
                                                                        /--*  t200   ref    this in rcx
                                                                        +--*  t201   int    arg1 in rdx
                                                                        +--*  t203   long   control expr
Generating: N248 ( 18, 10) [000050] --CXG------                   t50 = *  CALL nullcheck int    System.String:get_Chars(int):ushort:this REG rax
							GC regs: 0002 {rcx} => 0000 {}
IN0038:        cmp      dword ptr [rcx], ecx
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0067 CALL_INSTRUCTION (G_M16158_IG11,ins#33,ofs#179)
IN0039:        call     [System.String:get_Chars(int):ushort:this]
                                                                        /--*  t50    int    
Generating: N250 ( 22, 13) [000051] DA-XG------                         *  STORE_LCL_VAR int    V17 tmp7          NA REG NA
IN003a:        mov      dword ptr [V17 rbp-9CH], eax
Added IP mapping: 0x006C (G_M16158_IG11,ins#35,ofs#191)
Generating: N252 (???,???) [000143] -----------                            IL_OFFSET void   INLRT @ 0x06C[--] REG NA
Generating: N254 (  3,  2) [000052] -----------                   t52 =    LCL_VAR   int    V17 tmp7          rcx REG rcx
IN003b:        mov      ecx, dword ptr [V17 rbp-9CH]
                                                                        /--*  t52    int    
Generating: N256 (???,???) [000204] -----------                  t204 = *  PUTARG_REG int    REG rcx
Generating: N258 (  3, 10) [000205] Hc---------                  t205 =    CNS_INT(h) long   0x7ffd0868fc30 ftn REG NA
                                                                        /--*  t205   long   
Generating: N260 (  5, 12) [000206] nc--G------                  t206 = *  IND       long   REG NA
                                                                        /--*  t204   int    arg0 in rcx
                                                                        +--*  t206   long   control expr
Generating: N262 ( 17,  8) [000053] --CXG------                         *  CALL      void   System.Console:WriteLine(ushort) REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x006C CALL_INSTRUCTION (G_M16158_IG11,ins#36,ofs#197)
IN003c:        call     [System.Console:WriteLine(ushort)]
Added IP mapping: 0x0071 STACK_EMPTY (G_M16158_IG11,ins#37,ofs#203)
Generating: N264 (???,???) [000144] -----------                            IL_OFFSET void   INLRT @ 0x071[E-] REG NA
Generating: N266 (  1,  1) [000054] -----------                            NO_OP     void   REG NA
IN003d:        nop      
Added IP mapping: 0x0072 STACK_EMPTY (G_M16158_IG11,ins#38,ofs#204)
Generating: N268 (???,???) [000145] -----------                            IL_OFFSET void   INLRT @ 0x072[E-] REG NA
Generating: N270 (  3, 10) [000056] H----------                   t56 =    CNS_INT(h) long   0x7ffd086d1e30 class REG rcx
IN003e:        mov      rcx, 0x7FFD086D1E30      ; byte[]
                                                                        /--*  t56    long   
Generating: N272 (???,???) [000207] -----------                  t207 = *  PUTARG_REG long   REG rcx
Generating: N274 (  1,  1) [000055] -----------                   t55 =    CNS_INT   long   5 REG rdx
IN003f:        mov      edx, 5
                                                                        /--*  t55    long   
Generating: N276 (???,???) [000208] -----------                  t208 = *  PUTARG_REG long   REG rdx
                                                                        /--*  t207   long   arg0 in rcx
                                                                        +--*  t208   long   arg1 in rdx
Generating: N278 ( 18, 18) [000057] --CXG------                   t57 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN0040:        call     CORINFO_HELP_NEWARR_1_VC
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t57    ref    
Generating: N280 ( 22, 21) [000058] DA-XG------                         *  STORE_LCL_VAR ref    V18 tmp8          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN0041:        mov      gword ptr [V18 rbp-A8H], rax
Added IP mapping: 0x0078 (G_M16158_IG11,ins#42,ofs#231)
Generating: N282 (???,???) [000146] -----------                            IL_OFFSET void   INLRT @ 0x078[--] REG NA
Generating: N284 (  3, 10) [000061] H----------                   t61 =    CNS_INT(h) long   0x7ffd086d2198 field REG rcx
IN0042:        mov      rcx, 0x7FFD086D2198      ; <PrivateImplementationDetails>:7879981D4F226A8F0191D36730C07205D7A5FF1C780FCA9B2F905F25264CF636
                                                                        /--*  t61    long   
Generating: N286 (???,???) [000209] -----------                  t209 = *  PUTARG_REG long   REG rcx
                                                                        /--*  t209   long   arg0 in rcx
Generating: N288 ( 17, 16) [000062] --CXG------                   t62 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN0043:        call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t62    ref    
Generating: N290 ( 27, 23) [000064] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V19 tmp9          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN0044:        mov      gword ptr [V19 rbp-B0H], rax
Generating: N292 (  3,  2) [000060] -----------                   t60 =    LCL_VAR   ref    V18 tmp8          rcx REG rcx
IN0045:        mov      rcx, gword ptr [V18 rbp-A8H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t60    ref    
Generating: N294 (???,???) [000210] -----------                  t210 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N296 (  3,  4) [000065] -----------                   t65 =    LCL_FLD   ref    V19 tmp9         [+0] rdx REG rdx
IN0046:        mov      rdx, gword ptr [V19 rbp-B0H]
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t65    ref    
Generating: N298 (???,???) [000211] -----------                  t211 = *  PUTARG_REG ref    REG rdx
							GC regs: 0006 {rcx rdx} => 0002 {rcx}
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t210   ref    arg0 in rcx
                                                                        +--*  t211   ref    arg1 in rdx
Generating: N300 ( 20, 13) [000063] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
							GC regs: 0006 {rcx rdx} => 0004 {rdx}
							GC regs: 0004 {rdx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x007E CALL_INSTRUCTION (G_M16158_IG11,ins#47,ofs#267)
IN0047:        call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
Added IP mapping: 0x0083 (G_M16158_IG11,ins#48,ofs#272)
Generating: N302 (???,???) [000147] -----------                            IL_OFFSET void   INLRT @ 0x083[--] REG NA
Generating: N304 (  3,  2) [000059] -----------                   t59 =    LCL_VAR   ref    V18 tmp8          rcx REG rcx
IN0048:        mov      rcx, gword ptr [V18 rbp-A8H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t59    ref    
Generating: N306 (  7,  5) [000066] DA---------                         *  STORE_LCL_VAR ref    V05 loc4          NA REG NA
							GC regs: 0002 {rcx} => 0000 {}
IN0049:        mov      gword ptr [V05 rbp-38H], rcx
Added IP mapping: 0x0085 STACK_EMPTY (G_M16158_IG11,ins#50,ofs#283)
Generating: N308 (???,???) [000148] -----------                            IL_OFFSET void   INLRT @ 0x085[E-] REG NA
Generating: N310 (  1,  1) [000067] -----------                            NO_OP     void   REG NA
IN004a:        nop      
Added IP mapping: 0x0086 STACK_EMPTY (G_M16158_IG11,ins#51,ofs#284)
Generating: N312 (???,???) [000149] -----------                            IL_OFFSET void   INLRT @ 0x086[E-] REG NA
Generating: N314 (  3,  2) [000068] -----------                   t68 =    LCL_VAR   ref    V05 loc4          rcx REG rcx
IN004b:        mov      rcx, gword ptr [V05 rbp-38H]
							GC regs: 0000 {} => 0002 {rcx}
Generating: N316 (  1,  1) [000069] -----------                   t69 =    CNS_INT   int    0 REG rax
IN004c:        xor      eax, eax
                                                                        /--*  t68    ref    
                                                                        +--*  t69    int    
Generating: N318 ( 10, 12) [000070] ---XG------                   t70 = *  INDEX_ADDR byref byte[] REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
IN004d:        cmp      eax, dword ptr [rcx+08H]
New Basic Block BB06 [0005] created.
Mark BB06 as label: codegen temp block
IN004e:        jb       L_M16158_BB06
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN004f:        call     CORINFO_HELP_RNGCHKFAIL

      L_M16158_BB06:
Saved:
      G_M16158_IG11:        ; offs=0000A8H, size=0130H, bbWeight=1, BB05 [0001], extend
Created:
      G_M16158_IG12:        ; offs=0001D8H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Label: G_M16158_IG12, GCvars=0000000000000000 {}, gcrefRegs=0002 {rcx}, byrefRegs=0000 {}
Mapped BB05 to G_M16158_IG12
IN0050:        mov      edx, eax
IN0051:        lea      rcx, bword ptr [rcx+rdx+10H]
							GC regs: 0002 {rcx} => 0000 {}
							Byref regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t70    byref  
Generating: N320 ( 14, 15) [000071] DA-XG------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
							Byref regs: 0002 {rcx} => 0000 {}
IN0052:        mov      bword ptr [V07 rbp-48H], rcx
Added IP mapping: 0x0090 STACK_EMPTY (G_M16158_IG12,ins#3,ofs#11)
Generating: N322 (???,???) [000150] -----------                            IL_OFFSET void   INLRT @ 0x090[E-] REG NA
Generating: N324 (  3,  2) [000072] -----------                   t72 =    LCL_VAR   byref  V07 loc6          rcx REG rcx
IN0053:        mov      rcx, bword ptr [V07 rbp-48H]
							Byref regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t72    byref  
Generating: N326 (  7,  5) [000118] DA---------                         *  STORE_LCL_VAR long   V27 tmp17         NA REG NA
							Byref regs: 0002 {rcx} => 0000 {}
IN0054:        mov      qword ptr [V27 rbp-100H], rcx
Generating: N328 (  3,  2) [000119] -----------                  t119 =    LCL_VAR   long   V27 tmp17         rcx REG rcx
IN0055:        mov      rcx, qword ptr [V27 rbp-100H]
                                                                        /--*  t119   long   
Generating: N330 ( 14, 10) [000074] DA---------                         *  STORE_LCL_VAR long   V06 loc5          NA REG NA
IN0056:        mov      qword ptr [V06 rbp-40H], rcx
Added IP mapping: 0x0095 STACK_EMPTY (G_M16158_IG12,ins#7,ofs#33)
Generating: N332 (???,???) [000151] -----------                            IL_OFFSET void   INLRT @ 0x095[E-] REG NA
Generating: N334 (  1,  1) [000075] -----------                            NO_OP     void   REG NA
IN0057:        nop      
Added IP mapping: 0x0096 STACK_EMPTY (G_M16158_IG12,ins#8,ofs#34)
Generating: N336 (???,???) [000152] -----------                            IL_OFFSET void   INLRT @ 0x096[E-] REG NA
Generating: N338 (  3,  2) [000076] -----------                   t76 =    LCL_VAR   long   V06 loc5          rcx REG rcx
IN0058:        mov      rcx, qword ptr [V06 rbp-40H]
                                                                        /--*  t76    long   
Generating: N340 (???,???) [000212] -----------                  t212 = *  PUTARG_REG long   REG rcx
                                                                        /--*  t212   long   arg0 in rcx
Generating: N342 ( 17,  8) [000077] --CXG------                   t77 = *  CALL      ref    System.String:.ctor(ulong):this REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0098 CALL_INSTRUCTION (G_M16158_IG12,ins#9,ofs#38)
IN0059:        call     System.String:.ctor(ulong):this
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t77    ref    
Generating: N344 ( 21, 11) [000078] DA-XG------                         *  STORE_LCL_VAR ref    V20 tmp10         NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN005a:        mov      gword ptr [V20 rbp-B8H], rax
Added IP mapping: 0x009D (G_M16158_IG12,ins#11,ofs#50)
Generating: N346 (???,???) [000153] -----------                            IL_OFFSET void   INLRT @ 0x09D[--] REG NA
Generating: N348 (  3,  2) [000079] -----------                   t79 =    LCL_VAR   ref    V20 tmp10         rcx REG rcx
IN005b:        mov      rcx, gword ptr [V20 rbp-B8H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t79    ref    
Generating: N350 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V08 loc7          NA REG NA
							GC regs: 0002 {rcx} => 0000 {}
IN005c:        mov      gword ptr [V08 rbp-50H], rcx
Added IP mapping: 0x009F STACK_EMPTY (G_M16158_IG12,ins#13,ofs#61)
Generating: N352 (???,???) [000154] -----------                            IL_OFFSET void   INLRT @ 0x09F[E-] REG NA
Generating: N354 (  1,  1) [000081] -----------                            NO_OP     void   REG NA
IN005d:        nop      
Added IP mapping: 0x00A0 STACK_EMPTY (G_M16158_IG12,ins#14,ofs#62)
Generating: N356 (???,???) [000155] -----------                            IL_OFFSET void   INLRT @ 0x0A0[E-] REG NA
Generating: N358 (  1,  1) [000082] -----------                   t82 =    CNS_INT   int    0 REG rcx
IN005e:        xor      ecx, ecx
                                                                        /--*  t82    int    
Generating: N360 (  2,  3) [000083] ---------U-                   t83 = *  CAST      long <- ulong <- uint REG rcx
IN005f:        mov      ecx, ecx
                                                                        /--*  t83    long   
Generating: N362 (  6,  6) [000084] DA---------                         *  STORE_LCL_VAR byref  V07 loc6          NA REG NA
IN0060:        mov      bword ptr [V07 rbp-48H], rcx
Added IP mapping: 0x00A4 STACK_EMPTY (G_M16158_IG12,ins#17,ofs#70)
Generating: N364 (???,???) [000156] -----------                            IL_OFFSET void   INLRT @ 0x0A4[E-] REG NA
Generating: N366 (  1,  1) [000085] -----------                            NO_OP     void   REG NA
IN0061:        nop      
Added IP mapping: 0x00A5 STACK_EMPTY (G_M16158_IG12,ins#18,ofs#71)
Generating: N368 (???,???) [000157] -----------                            IL_OFFSET void   INLRT @ 0x0A5[E-] REG NA
Generating: N370 (  3, 10) [000122] H----------                  t122 =    CNS_INT(h) ref     'Main Vector512: '
 REG rcx
IN0062:        mov      rcx, 0x29B80301940      ; 'Main Vector512: '

							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t122   ref    
Generating: N372 (  7, 13) [000088] DA---------                         *  STORE_LCL_VAR ref    V21 tmp11         NA REG NA
							GC regs: 0002 {rcx} => 0000 {}
IN0063:        mov      gword ptr [V21 rbp-C0H], rcx
Generating: N374 (  1,  1) [000087] -c---------                   t87 =    CNS_INT   int    1 REG NA
                                                                        /--*  t87    int    
Generating: N376 (  5,  4) [000090] DA---------                         *  STORE_LCL_VAR int    V22 tmp12         NA REG NA
IN0064:        mov      dword ptr [V22 rbp-C4H], 1
Added IP mapping: 0x00AF (G_M16158_IG12,ins#21,ofs#98)
Generating: N378 (???,???) [000158] -----------                            IL_OFFSET void   INLRT @ 0x0AF[--] REG NA
Generating: N380 (  3,  2) [000091] -----------                   t91 =    LCL_VAR   int    V22 tmp12         rcx REG rcx
IN0065:        mov      ecx, dword ptr [V22 rbp-C4H]
                                                                        /--*  t91    int    
Generating: N382 (  7,  5) [000092] DA--G------                         *  STORE_LCL_VAR int   (AX) V09 loc8          NA REG NA
IN0066:        mov      dword ptr [V09 rbp-58H], ecx
Generating: N384 (  3,  3) [000093] -----------                   t93 =    LCL_ADDR  long   V09 loc8         [+0] rcx REG rcx
IN0067:        lea      rcx, [V09 rbp-58H]
                                                                        /--*  t93    long   
Generating: N386 (???,???) [000213] -----------                  t213 = *  PUTARG_REG long   REG rcx
Generating: N388 (  3, 10) [000214] Hc---------                  t214 =    CNS_INT(h) long   0x7ffd0813c7c8 ftn REG NA
                                                                        /--*  t214   long   
Generating: N390 (  5, 12) [000215] nc--G------                  t215 = *  IND       long   REG NA
                                                                        /--*  t213   long   this in rcx
                                                                        +--*  t215   long   control expr
Generating: N392 ( 17,  9) [000094] --CXG------                   t94 = *  CALL      ref    System.Boolean:ToString():System.String:this REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x00B3 CALL_INSTRUCTION (G_M16158_IG12,ins#24,ofs#111)
IN0068:        call     [System.Boolean:ToString():System.String:this]
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t94    ref    
Generating: N394 ( 21, 12) [000095] DA-XG------                         *  STORE_LCL_VAR ref    V23 tmp13         NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN0069:        mov      gword ptr [V23 rbp-D0H], rax
Added IP mapping: 0x00B8 (G_M16158_IG12,ins#26,ofs#124)
Generating: N396 (???,???) [000159] -----------                            IL_OFFSET void   INLRT @ 0x0B8[--] REG NA
Generating: N398 (  3,  2) [000089] -----------                   t89 =    LCL_VAR   ref    V21 tmp11         rcx REG rcx
IN006a:        mov      rcx, gword ptr [V21 rbp-C0H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t89    ref    
Generating: N400 (???,???) [000216] -----------                  t216 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N402 (  3,  2) [000096] -----------                   t96 =    LCL_VAR   ref    V23 tmp13         rdx REG rdx
IN006b:        mov      rdx, gword ptr [V23 rbp-D0H]
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t96    ref    
Generating: N404 (???,???) [000217] -----------                  t217 = *  PUTARG_REG ref    REG rdx
							GC regs: 0006 {rcx rdx} => 0002 {rcx}
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
Generating: N406 (  3, 10) [000218] Hc---------                  t218 =    CNS_INT(h) long   0x7ffd08306028 ftn REG NA
                                                                        /--*  t218   long   
Generating: N408 (  5, 12) [000219] nc--G------                  t219 = *  IND       long   REG NA
                                                                        /--*  t216   ref    arg0 in rcx
                                                                        +--*  t217   ref    arg1 in rdx
                                                                        +--*  t219   long   control expr
Generating: N410 ( 20, 11) [000097] --CXG------                   t97 = *  CALL      ref    System.String:Concat(System.String,System.String):System.String REG rax
							GC regs: 0006 {rcx rdx} => 0004 {rdx}
							GC regs: 0004 {rdx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x00B8 CALL_INSTRUCTION (G_M16158_IG12,ins#28,ofs#138)
IN006c:        call     [System.String:Concat(System.String,System.String):System.String]
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t97    ref    
Generating: N412 ( 24, 14) [000098] DA-XG------                         *  STORE_LCL_VAR ref    V24 tmp14         NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN006d:        mov      gword ptr [V24 rbp-D8H], rax
Added IP mapping: 0x00BD (G_M16158_IG12,ins#30,ofs#151)
Generating: N414 (???,???) [000160] -----------                            IL_OFFSET void   INLRT @ 0x0BD[--] REG NA
Generating: N416 (  3,  2) [000099] -----------                   t99 =    LCL_VAR   ref    V24 tmp14         rcx REG rcx
IN006e:        mov      rcx, gword ptr [V24 rbp-D8H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t99    ref    
Generating: N418 (???,???) [000220] -----------                  t220 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N420 (  3, 10) [000221] Hc---------                  t221 =    CNS_INT(h) long   0x7ffd0868fd38 ftn REG NA
                                                                        /--*  t221   long   
Generating: N422 (  5, 12) [000222] nc--G------                  t222 = *  IND       long   REG NA
                                                                        /--*  t220   ref    arg0 in rcx
                                                                        +--*  t222   long   control expr
Generating: N424 ( 17,  8) [000100] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
							GC regs: 0002 {rcx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x00BD CALL_INSTRUCTION (G_M16158_IG12,ins#31,ofs#158)
IN006f:        call     [System.Console:WriteLine(System.String)]
Added IP mapping: 0x00C2 STACK_EMPTY (G_M16158_IG12,ins#32,ofs#164)
Generating: N426 (???,???) [000161] -----------                            IL_OFFSET void   INLRT @ 0x0C2[E-] REG NA
Generating: N428 (  1,  1) [000101] -----------                            NO_OP     void   REG NA
IN0070:        nop      
Added IP mapping: 0x00C3 STACK_EMPTY (G_M16158_IG12,ins#33,ofs#165)
Generating: N430 (???,???) [000162] -----------                            IL_OFFSET void   INLRT @ 0x0C3[E-] REG NA
Generating: N432 (  0,  0) [000102] -----------                            RETURN    void   REG NA
IN0071:        nop      
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Added IP mapping: EPILOG (G_M16158_IG12,ins#34,ofs#166) label
Reserving epilog IG for block BB05
Saved:
      G_M16158_IG12:        ; offs=0001D8H, size=00A6H, bbWeight=1, gcrefRegs=0002 {rcx}, byrefRegs=0000 {}, BB05 [0001], byref
Created:
      G_M16158_IG13:        ; offs=00027EH, size=0000H, bbWeight=1, gcrefRegs=0000 {}
*************** After placeholder IG creation
G_M16158_IG01:        ; func=00, offs=000000H, size=0000H, bbWeight=1, gcrefRegs=0000 {} <-- Prolog IG
G_M16158_IG02:        ; offs=000000H, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0003], byref
G_M16158_IG03:        ; offs=00000DH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0004], byref
G_M16158_IG04:        ; offs=000012H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
G_M16158_IG05:        ; offs=00002DH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG06:        ; offs=000041H, size=001AH, bbWeight=1, BB05 [0001], extend
G_M16158_IG07:        ; offs=00005BH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG08:        ; offs=00006FH, size=0011H, bbWeight=1, BB05 [0001], extend
G_M16158_IG09:        ; offs=000080H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG10:        ; offs=000094H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG11:        ; offs=0000A8H, size=0130H, bbWeight=1, BB05 [0001], extend
G_M16158_IG12:        ; offs=0001D8H, size=00A6H, bbWeight=1, gcrefRegs=0002 {rcx}, byrefRegs=0000 {}, BB05 [0001], byref
G_M16158_IG13:        ; epilog placeholder, next placeholder=<END>, BB05 [0001], epilog, extend <-- First placeholder <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=0000 {}, PrevByrefRegs=0000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=0002 {rcx}, InitByrefRegs=0000 {}

Variable Live Range History Dump for BB05
V00 arg0: rbp[16] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V01 loc0: rbp[-16] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V02 loc1: rbp[-32] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V03 loc2: rbp[-40] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V04 loc3: rbp[-48] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V05 loc4: rbp[-56] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V06 loc5: rbp[-64] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V07 loc6: rbp[-72] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V08 loc7: rbp[-80] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
V09 loc8: rbp[-88] (1 slot) [(G_M16158_IG04,ins#0,ofs#0), (G_M16158_IG12,ins#34,ofs#166)]
Liveness not changing: 0000000000000000 {}

# compCycleEstimate =    598, compSizeEstimate =   466 System.Text.Program:Main(System.String[])
; Final local variable assignments
;
;  V00 arg0         [V00    ] (  1,  1   )     ref  ->  [rbp+10H]   do-not-enreg[] class-hnd <System.String[]>
;  V01 loc0         [V01    ] (  1,  1   )  struct (16) [rbp-10H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1         [V02    ] (  1,  1   )  struct (16) [rbp-20H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2         [V03    ] (  1,  1   )     ref  ->  [rbp-28H]   do-not-enreg[] must-init class-hnd exact <System.String>
;  V04 loc3         [V04    ] (  1,  1   )     ref  ->  [rbp-30H]   do-not-enreg[] must-init class-hnd exact <ushort[]>
;  V05 loc4         [V05    ] (  1,  1   )     ref  ->  [rbp-38H]   do-not-enreg[] must-init class-hnd exact <byte[]>
;  V06 loc5         [V06    ] (  1,  1   )    long  ->  [rbp-40H]   do-not-enreg[] must-init
;  V07 loc6         [V07    ] (  1,  1   )   byref  ->  [rbp-48H]   do-not-enreg[] must-init pinned
;  V08 loc7         [V08    ] (  1,  1   )     ref  ->  [rbp-50H]   do-not-enreg[] must-init class-hnd exact <System.String>
;  V09 loc8         [V09    ] (  1,  1   )    bool  ->  [rbp-58H]   do-not-enreg[X] must-init addr-exposed ld-addr-op
;  V10 OutArgs      [V10    ] (  1,  1   )  struct (32) [rsp+00H]   do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
;  V11 tmp1         [V11    ] (  1,  1   )  struct (16) [rbp-68H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V12 tmp2         [V12    ] (  1,  1   )  struct (16) [rbp-78H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V13 tmp3         [V13    ] (  1,  1   )     int  ->  [rbp-7CH]   do-not-enreg[] "impSpillStackEnsure"
;  V14 tmp4         [V14    ] (  1,  1   )     ref  ->  [rbp-88H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <ushort[]>
;  V15 tmp5         [V15    ] (  1,  1   )  struct ( 8) [rbp-90H]   do-not-enreg[S] must-init "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V16 tmp6         [V16    ] (  1,  1   )     ref  ->  [rbp-98H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String[]>
;  V17 tmp7         [V17    ] (  1,  1   )     int  ->  [rbp-9CH]   do-not-enreg[] "impSpillStackEnsure"
;  V18 tmp8         [V18    ] (  1,  1   )     ref  ->  [rbp-A8H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <byte[]>
;  V19 tmp9         [V19    ] (  1,  1   )  struct ( 8) [rbp-B0H]   do-not-enreg[S] must-init "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V20 tmp10        [V20    ] (  1,  1   )     ref  ->  [rbp-B8H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V21 tmp11        [V21    ] (  1,  1   )     ref  ->  [rbp-C0H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V22 tmp12        [V22    ] (  1,  1   )     int  ->  [rbp-C4H]   do-not-enreg[] "impSpillStackEnsure"
;  V23 tmp13        [V23    ] (  1,  1   )     ref  ->  [rbp-D0H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V24 tmp14        [V24    ] (  1,  1   )     ref  ->  [rbp-D8H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String>
;  V25 tmp15        [V25    ] (  1,  1   )  struct (16) [rbp-E8H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V26 tmp16        [V26    ] (  1,  1   )  struct (16) [rbp-F8H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V27 tmp17        [V27    ] (  1,  1   )    long  ->  [rbp-100H]   do-not-enreg[] "Cast away GC"
;
; Lcl frame size = 288
*************** Before prolog / epilog generation
G_M16158_IG01:        ; func=00, offs=000000H, size=0000H, bbWeight=1, gcrefRegs=0000 {} <-- Prolog IG
G_M16158_IG02:        ; offs=000000H, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0003], byref
G_M16158_IG03:        ; offs=00000DH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0004], byref
G_M16158_IG04:        ; offs=000012H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
G_M16158_IG05:        ; offs=00002DH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG06:        ; offs=000041H, size=001AH, bbWeight=1, BB05 [0001], extend
G_M16158_IG07:        ; offs=00005BH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG08:        ; offs=00006FH, size=0011H, bbWeight=1, BB05 [0001], extend
G_M16158_IG09:        ; offs=000080H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG10:        ; offs=000094H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG11:        ; offs=0000A8H, size=0130H, bbWeight=1, BB05 [0001], extend
G_M16158_IG12:        ; offs=0001D8H, size=00A6H, bbWeight=1, gcrefRegs=0002 {rcx}, byrefRegs=0000 {}, BB05 [0001], byref
G_M16158_IG13:        ; epilog placeholder, next placeholder=<END>, BB05 [0001], epilog, extend <-- First placeholder <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=0000 {}, PrevByrefRegs=0000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=0002 {rcx}, InitByrefRegs=0000 {}
*************** In genFnProlog()
Added IP mapping to front: PROLOG (G_M16158_IG01,ins#0,ofs#0) label

__prolog:
New debug range: first
Found 56 lvMustInit int-sized stack slots, frame offsets 248 through 0
IN0072:        push     rbp
IN0073:        sub      rsp, 288
IN0074:        vzeroupper 
IN0075:        lea      rbp, [rsp+120H]
IN0076:        xor      rax, rax
IN0077:        mov      qword ptr [rbp-F8H], rax
IN0078:        vxorps   xmm4, xmm4, xmm4
IN0079:        mov      rax, -240
IN007a:        vmovdqa32 xmmword ptr [rax+rbp], xmm4
IN007b:        vmovdqa32 xmmword ptr [rbp+rax+10H], xmm4
IN007c:        vmovdqa32 xmmword ptr [rbp+rax+20H], xmm4
IN007d:        add      rax, 48
IN007e:        jne      SHORT  -5 instr
*************** In genFnPrologCalleeRegArgs() for int regs
IN007f:        mov      gword ptr [V00 rbp+10H], rcx
*************** In genEnregisterIncomingStackArgs()
Closing debug range.

Saved:
      G_M16158_IG01:        ; offs=000000H, size=004DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc
*************** In genFnEpilog()

__epilog:
gcVarPtrSetCur=0000000000000000 {}, gcRegGCrefSetCur=0002 {rcx}, gcRegByrefSetCur=0000 {}
IN0080:        add      rsp, 288
IN0081:        pop      rbp
IN0082:        ret      
Saved:
      G_M16158_IG13:        ; offs=00027EH, size=0009H, bbWeight=1, epilog, nogc, extend
0 prologs, 1 epilogs, 0 funclet prologs, 0 funclet epilogs
*************** After prolog / epilog generation
G_M16158_IG01:        ; func=00, offs=000000H, size=004DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG
G_M16158_IG02:        ; offs=00004DH, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0003], byref
G_M16158_IG03:        ; offs=00005AH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0004], byref
G_M16158_IG04:        ; offs=00005FH, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
G_M16158_IG05:        ; offs=00007AH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG06:        ; offs=00008EH, size=001AH, bbWeight=1, BB05 [0001], extend
G_M16158_IG07:        ; offs=0000A8H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG08:        ; offs=0000BCH, size=0011H, bbWeight=1, BB05 [0001], extend
G_M16158_IG09:        ; offs=0000CDH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG10:        ; offs=0000E1H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M16158_IG11:        ; offs=0000F5H, size=0130H, bbWeight=1, BB05 [0001], extend
G_M16158_IG12:        ; offs=000225H, size=00A6H, bbWeight=1, gcrefRegs=0002 {rcx}, byrefRegs=0000 {}, BB05 [0001], byref
G_M16158_IG13:        ; offs=0002CBH, size=0009H, bbWeight=1, epilog, nogc, extend
*************** In emitJumpDistBind()
Emitter Jump List:
IG01 IN007e jne[2]
IG02 IN0002  je[6] -> IG04
IG11 IN004e  jb[6] -> IG12
  total jump count: 3
Adjusted offset of BB02 from 004D to 004D
Binding: IN0002: 000000 je       L_M16158_BB04
Binding L_M16158_BB04 to G_M16158_IG04
Estimate of fwd jump [801E1154/002]: 0054 -> 005F = 0009
Shrinking jump [801E1154/002]
Adjusted offset of BB03 from 005A to 0056
Adjusted offset of BB04 from 005F to 005B
Adjusted offset of BB05 from 007A to 0076
Adjusted offset of BB06 from 008E to 008A
Adjusted offset of BB07 from 00A8 to 00A4
Adjusted offset of BB08 from 00BC to 00B8
Adjusted offset of BB09 from 00CD to 00C9
Adjusted offset of BB10 from 00E1 to 00DD
Adjusted offset of BB11 from 00F5 to 00F1
Binding: IN004e: 000000 jb       L_M16158_BB06
Binding L_M16158_BB06 to G_M16158_IG12
Estimate of fwd jump [801E41E8/078]: 0216 -> 0221 = 0009
Shrinking jump [801E41E8/078]
Adjusted offset of BB12 from 0225 to 021D
Adjusted offset of BB13 from 02CB to 02C3
Total shrinkage =   8, min extra jump size = 4294967295

*************** Finishing PHASE Generate code

*************** Starting PHASE Emit code

Hot  code size = 0x2CC bytes
Cold code size = 0x0 bytes
reserveUnwindInfo(isFunclet=false, isColdCode=false, unwindSize=0xa)
*************** In emitEndCodeGen()
Converting emitMaxStackDepth from bytes (0) to elements (0)

***************************************************************************
Instructions as they come out of the scheduler


G_M16158_IG01:        ; offs=000000H, size=004DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG
IN0072: 000000 push     rbp
IN0073: 000001 sub      rsp, 288
IN0074: 000008 vzeroupper 
IN0075: 00000B lea      rbp, [rsp+120H]
IN0076: 000013 xor      eax, eax
IN0077: 000015 mov      qword ptr [rbp-F8H], rax
IN0078: 00001C vxorps   xmm4, xmm4, xmm4
IN0079: 000022 mov      rax, -240
IN007a: 00002C vmovdqa32 xmmword ptr [rax+rbp], xmm4
IN007b: 000033 vmovdqa32 xmmword ptr [rbp+rax+10H], xmm4
IN007c: 00003B vmovdqa32 xmmword ptr [rbp+rax+20H], xmm4
IN007d: 000043 add      rax, 48
IN007e: 000047 jne      SHORT  -5 instr
IN007f: 000049 mov      gword ptr [rbp+10H], rcx
						;; size=77 bbWeight=1 PerfScore 12.83
G_M16158_IG02:        ; offs=00004DH, size=0009H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0003], byref, isz
recordRelocation: 00007FFD08315C6F (rw: 0000029B80293797) => 00007FFD08511D48, type 16 (IMAGE_REL_BASED_DISP32), delta -1
IN0001: 00004D cmp      dword ptr [(reloc 0x7ffd08511d48)], 0
IN0002: 000054 je       SHORT G_M16158_IG04
						;; size=9 bbWeight=1 PerfScore 4.00
G_M16158_IG03:        ; offs=000056H, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0004], byref
recordRelocation: 00007FFD08315C77 (rw: 0000029B8029379F) => 00007FFD66B86D30, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0003: 000056 call     CORINFO_HELP_DBG_IS_JUST_MY_CODE
                            ; gcr arg pop 0
						;; size=5 bbWeight=0.50 PerfScore 0.50
G_M16158_IG04:        ; offs=00005BH, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
IN0004: 00005B nop      
IN0005: 00005C lea      rcx, [rbp-68H]
IN0006: 000060 mov      rdx, 0x29BCA452DD0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN0007: 00006A mov      r8d, 0xF00
recordRelocation: 00007FFD08315C92 (rw: 0000029B802937BA) => 00007FFD08526A78, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0008: 000070 call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
                            ; gcr arg pop 0
						;; size=27 bbWeight=1 PerfScore 4.25
G_M16158_IG05:        ; offs=000076H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
IN0009: 000076 vmovdqu32 xmm0, xmmword ptr [rbp-68H]
IN000a: 000080 vmovdqu32 xmmword ptr [rbp-10H], xmm0 (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 0 by 3 => 3
						;; size=17 bbWeight=1 PerfScore 4.00
G_M16158_IG06:        ; offs=00008AH, size=001AH, bbWeight=1, BB05 [0001], extend
Block predicted offs = 0000008A, actual = 00000087 -> size adj = 3
IN000b: 000087 lea      rcx, [rbp-78H]
IN000c: 00008B mov      rdx, 0x29BCA452DD0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN000d: 000095 mov      r8d, 0xF00
recordRelocation: 00007FFD08315CBD (rw: 0000029B802937E5) => 00007FFD08526A78, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN000e: 00009B call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
                            ; gcr arg pop 0
						;; size=26 bbWeight=1 PerfScore 4.00
G_M16158_IG07:        ; offs=0000A4H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Block predicted offs = 000000A4, actual = 000000A1 -> size adj = 3
IN000f: 0000A1 vmovdqu32 xmm0, xmmword ptr [rbp-78H]
IN0010: 0000AB vmovdqu32 xmmword ptr [rbp-20H], xmm0 (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 3 by 3 => 6
						;; size=17 bbWeight=1 PerfScore 4.00
G_M16158_IG08:        ; offs=0000B8H, size=0011H, bbWeight=1, BB05 [0001], extend
Block predicted offs = 000000B8, actual = 000000B2 -> size adj = 6
IN0011: 0000B2 mov      rcx, 0x29B80301760      ; 'Ascii------'

                            ; gcrRegs +[rcx]
recordRelocation: 00007FFD08315CDE (rw: 0000029B80293806) => 00007FFD0868FD38, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0012: 0000BC call     [System.Console:WriteLine(System.String)]
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0013: 0000C2 nop      
						;; size=17 bbWeight=1 PerfScore 3.50
G_M16158_IG09:        ; offs=0000C9H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Block predicted offs = 000000C9, actual = 000000C3 -> size adj = 6
IN0014: 0000C3 vmovdqu32 xmm0, xmmword ptr [rbp-10H] (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 6 by 3 => 9
IN0015: 0000CA vmovdqu32 xmmword ptr [rbp-E8H], xmm0
						;; size=17 bbWeight=1 PerfScore 4.00
G_M16158_IG10:        ; offs=0000DDH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Block predicted offs = 000000DD, actual = 000000D4 -> size adj = 9
IN0016: 0000D4 vmovdqu32 xmm0, xmmword ptr [rbp-20H] (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 9 by 3 => 12
IN0017: 0000DB vmovdqu32 xmmword ptr [rbp-F8H], xmm0
						;; size=17 bbWeight=1 PerfScore 4.00
G_M16158_IG11:        ; offs=0000F1H, size=012CH, bbWeight=1, BB05 [0001], isz, extend
Block predicted offs = 000000F1, actual = 000000E5 -> size adj = 12
IN0018: 0000E5 lea      rcx, [rbp-E8H]
IN0019: 0000EC lea      rdx, [rbp-F8H]
recordRelocation: 00007FFD08315D15 (rw: 0000029B8029383D) => 00007FFD085B6CB8, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN001a: 0000F3 call     [System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool]
                            ; gcr arg pop 0
IN001b: 0000F9 mov      dword ptr [rbp-7CH], eax
IN001c: 0000FC mov      ecx, dword ptr [rbp-7CH]
recordRelocation: 00007FFD08315D21 (rw: 0000029B80293849) => 00007FFD0868FC18, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN001d: 0000FF call     [System.Console:WriteLine(bool)]
                            ; gcr arg pop 0
IN001e: 000105 nop      
IN001f: 000106 mov      rcx, 0x29B80301790      ; 'String------'

                            ; gcrRegs +[rcx]
recordRelocation: 00007FFD08315D32 (rw: 0000029B8029385A) => 00007FFD0868FD38, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0020: 000110 call     [System.Console:WriteLine(System.String)]
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0021: 000116 nop      
IN0022: 000117 mov      rcx, 0x29B803017C0      ; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                            ; gcrRegs +[rcx]
IN0023: 000121 mov      gword ptr [rbp-28H], rcx
IN0024: 000125 mov      rcx, 0x7FFD086D1A48      ; ushort[]
                            ; gcrRegs -[rcx]
IN0025: 00012F mov      edx, 3
recordRelocation: 00007FFD08315D55 (rw: 0000029B8029387D) => 00007FFD66FF5AC0, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0026: 000134 call     CORINFO_HELP_NEWARR_1_VC
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0027: 000139 mov      gword ptr [rbp-88H], rax
IN0028: 000140 mov      rcx, 0x7FFD086D21C8      ; <PrivateImplementationDetails>:8EF6341A03FE4690DA03E4B9770B67F1FB07C68BBE1CE709341225060715D4A5
recordRelocation: 00007FFD08315D6B (rw: 0000029B80293893) => 00007FFD66B94030, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0029: 00014A call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                            ; gcr arg pop 0
IN002a: 00014F mov      gword ptr [rbp-90H], rax
IN002b: 000156 mov      rcx, gword ptr [rbp-88H]
                            ; gcrRegs +[rcx]
IN002c: 00015D mov      rdx, gword ptr [rbp-90H]
                            ; gcrRegs +[rdx]
recordRelocation: 00007FFD08315D85 (rw: 0000029B802938AD) => 00007FFD67202850, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN002d: 000164 call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN002e: 000169 mov      rcx, gword ptr [rbp-88H]
                            ; gcrRegs +[rcx]
IN002f: 000170 mov      gword ptr [rbp-30H], rcx
IN0030: 000174 mov      rcx, gword ptr [rbp-28H]
IN0031: 000178 mov      rdx, gword ptr [rbp-30H]
                            ; gcrRegs +[rdx]
IN0032: 00017C mov      r8d, 1
recordRelocation: 00007FFD08315DA4 (rw: 0000029B802938CC) => 00007FFD08524CD8, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0033: 000182 call     [System.Text.Program:Split(System.String,ushort[],int):System.String[]]
                            ; gcrRegs -[rcx rdx] +[rax]
                            ; gcr arg pop 0
IN0034: 000188 mov      gword ptr [rbp-98H], rax
IN0035: 00018F nop      
IN0036: 000190 mov      rcx, gword ptr [rbp-28H]
                            ; gcrRegs +[rcx]
IN0037: 000194 xor      edx, edx
IN0038: 000196 cmp      dword ptr [rcx], ecx
recordRelocation: 00007FFD08315DBA (rw: 0000029B802938E2) => 00007FFD08305EF0, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0039: 000198 call     [System.String:get_Chars(int):ushort:this]
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN003a: 00019E mov      dword ptr [rbp-9CH], eax
IN003b: 0001A4 mov      ecx, dword ptr [rbp-9CH]
recordRelocation: 00007FFD08315DCC (rw: 0000029B802938F4) => 00007FFD0868FC30, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN003c: 0001AA call     [System.Console:WriteLine(ushort)]
                            ; gcr arg pop 0
IN003d: 0001B0 nop      
IN003e: 0001B1 mov      rcx, 0x7FFD086D1E30      ; byte[]
IN003f: 0001BB mov      edx, 5
recordRelocation: 00007FFD08315DE1 (rw: 0000029B80293909) => 00007FFD66FF5AC0, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0040: 0001C0 call     CORINFO_HELP_NEWARR_1_VC
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0041: 0001C5 mov      gword ptr [rbp-A8H], rax
IN0042: 0001CC mov      rcx, 0x7FFD086D2198      ; <PrivateImplementationDetails>:7879981D4F226A8F0191D36730C07205D7A5FF1C780FCA9B2F905F25264CF636
recordRelocation: 00007FFD08315DF7 (rw: 0000029B8029391F) => 00007FFD66B94030, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0043: 0001D6 call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                            ; gcr arg pop 0
IN0044: 0001DB mov      gword ptr [rbp-B0H], rax
IN0045: 0001E2 mov      rcx, gword ptr [rbp-A8H]
                            ; gcrRegs +[rcx]
IN0046: 0001E9 mov      rdx, gword ptr [rbp-B0H]
                            ; gcrRegs +[rdx]
recordRelocation: 00007FFD08315E11 (rw: 0000029B80293939) => 00007FFD67202850, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0047: 0001F0 call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN0048: 0001F5 mov      rcx, gword ptr [rbp-A8H]
                            ; gcrRegs +[rcx]
IN0049: 0001FC mov      gword ptr [rbp-38H], rcx
IN004a: 000200 nop      
IN004b: 000201 mov      rcx, gword ptr [rbp-38H]
IN004c: 000205 xor      eax, eax
IN004d: 000207 cmp      eax, dword ptr [rcx+08H]
IN004e: 00020A jb       SHORT G_M16158_IG12
recordRelocation: 00007FFD08315E2D (rw: 0000029B80293955) => 00007FFD66B9B2B0, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN004f: 00020C call     CORINFO_HELP_RNGCHKFAIL
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
						;; size=300 bbWeight=1 PerfScore 59.00
G_M16158_IG12:        ; offs=00021DH, size=00A6H, bbWeight=1, gcrefRegs=0002 {rcx}, byrefRegs=0000 {}, BB05 [0001], byref
Block predicted offs = 0000021D, actual = 00000211 -> size adj = 12
                            ; gcrRegs +[rcx]
IN0050: 000211 mov      edx, eax
IN0051: 000213 lea      rcx, bword ptr [rcx+rdx+10H]
                            ; gcrRegs -[rcx]
                            ; byrRegs +[rcx]
IN0052: 000218 mov      bword ptr [rbp-48H], rcx
IN0053: 00021C mov      rcx, bword ptr [rbp-48H]
IN0054: 000220 mov      qword ptr [rbp-100H], rcx
IN0055: 000227 mov      rcx, qword ptr [rbp-100H]
                            ; byrRegs -[rcx]
IN0056: 00022E mov      qword ptr [rbp-40H], rcx
IN0057: 000232 nop      
IN0058: 000233 mov      rcx, qword ptr [rbp-40H]
recordRelocation: 00007FFD08315E58 (rw: 0000029B80293980) => 00007FFD08301968, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0059: 000237 call     System.String:.ctor(ulong):this
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN005a: 00023C mov      gword ptr [rbp-B8H], rax
IN005b: 000243 mov      rcx, gword ptr [rbp-B8H]
                            ; gcrRegs +[rcx]
IN005c: 00024A mov      gword ptr [rbp-50H], rcx
IN005d: 00024E nop      
IN005e: 00024F xor      ecx, ecx
                            ; gcrRegs -[rcx]
IN005f: 000251 mov      ecx, ecx
IN0060: 000253 mov      bword ptr [rbp-48H], rcx
IN0061: 000257 nop      
IN0062: 000258 mov      rcx, 0x29B80301940      ; 'Main Vector512: '

                            ; gcrRegs +[rcx]
IN0063: 000262 mov      gword ptr [rbp-C0H], rcx
IN0064: 000269 mov      dword ptr [rbp-C4H], 1
IN0065: 000273 mov      ecx, dword ptr [rbp-C4H]
                            ; gcrRegs -[rcx]
IN0066: 000279 mov      dword ptr [rbp-58H], ecx
IN0067: 00027C lea      rcx, [rbp-58H]
recordRelocation: 00007FFD08315EA2 (rw: 0000029B802939CA) => 00007FFD0813C7C8, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0068: 000280 call     [System.Boolean:ToString():System.String:this]
                            ; gcr arg pop 0
IN0069: 000286 mov      gword ptr [rbp-D0H], rax
IN006a: 00028D mov      rcx, gword ptr [rbp-C0H]
                            ; gcrRegs +[rcx]
IN006b: 000294 mov      rdx, gword ptr [rbp-D0H]
                            ; gcrRegs +[rdx]
recordRelocation: 00007FFD08315EBD (rw: 0000029B802939E5) => 00007FFD08306028, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN006c: 00029B call     [System.String:Concat(System.String,System.String):System.String]
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN006d: 0002A1 mov      gword ptr [rbp-D8H], rax
IN006e: 0002A8 mov      rcx, gword ptr [rbp-D8H]
                            ; gcrRegs +[rcx]
recordRelocation: 00007FFD08315ED1 (rw: 0000029B802939F9) => 00007FFD0868FD38, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN006f: 0002AF call     [System.Console:WriteLine(System.String)]
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0070: 0002B5 nop      
IN0071: 0002B6 nop      
						;; size=166 bbWeight=1 PerfScore 32.75
G_M16158_IG13:        ; offs=0002C3H, size=0009H, bbWeight=1, epilog, nogc, extend
Block predicted offs = 000002C3, actual = 000002B7 -> size adj = 12
IN0080: 0002B7 add      rsp, 288
IN0081: 0002BE pop      rbp
IN0082: 0002BF ret      
						;; size=9 bbWeight=1 PerfScore 1.75Allocated method code size =  716 , actual size =  704, unused size =   12

; Total bytes of code 704, prolog size 77, PerfScore 210.18, instruction count 130, allocated bytes for code 716 (MethodHash=4a0bc0e1) for method System.Text.Program:Main(System.String[]) (MinOpts)
; ============================================================

*************** After end code gen, before unwindEmit()
G_M16158_IG01:        ; func=00, offs=000000H, size=004DH, bbWeight=1, PerfScore 12.83, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG

IN0072: 000000 push     rbp
IN0073: 000001 sub      rsp, 288
IN0074: 000008 vzeroupper 
IN0075: 00000B lea      rbp, [rsp+120H]
IN0076: 000013 xor      eax, eax
IN0077: 000015 mov      qword ptr [rbp-F8H], rax
IN0078: 00001C vxorps   xmm4, xmm4, xmm4
IN0079: 000022 mov      rax, -240
IN007a: 00002C vmovdqa32 xmmword ptr [rax+rbp], xmm4
IN007b: 000033 vmovdqa32 xmmword ptr [rbp+rax+10H], xmm4
IN007c: 00003B vmovdqa32 xmmword ptr [rbp+rax+20H], xmm4
IN007d: 000043 add      rax, 48
IN007e: 000047 jne      SHORT  -5 instr
IN007f: 000049 mov      gword ptr [V00 rbp+10H], rcx

G_M16158_IG02:        ; offs=00004DH, size=0009H, bbWeight=1, PerfScore 4.00, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0003], byref, isz

IN0001: 00004D cmp      dword ptr [(reloc 0x7ffd08511d48)], 0
IN0002: 000054 je       SHORT G_M16158_IG04

G_M16158_IG03:        ; offs=000056H, size=0005H, bbWeight=0.50, PerfScore 0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0004], byref

IN0003: 000056 call     CORINFO_HELP_DBG_IS_JUST_MY_CODE

G_M16158_IG04:        ; offs=00005BH, size=001BH, bbWeight=1, PerfScore 4.25, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref

IN0004: 00005B nop      
IN0005: 00005C lea      rcx, [V11 rbp-68H]
IN0006: 000060 mov      rdx, 0x29BCA452DD0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN0007: 00006A mov      r8d, 0xF00
IN0008: 000070 call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]

G_M16158_IG05:        ; offs=000076H, size=0011H, bbWeight=1, PerfScore 4.00, BB05 [0001], nogc, isz, extend

IN0009: 000076 vmovdqu32 xmm0, xmmword ptr [V11 rbp-68H]
IN000a: 000080 vmovdqu32 xmmword ptr [V01 rbp-10H], xmm0

G_M16158_IG06:        ; offs=000087H, size=001AH, bbWeight=1, PerfScore 4.00, BB05 [0001], extend

IN000b: 000087 lea      rcx, [V12 rbp-78H]
IN000c: 00008B mov      rdx, 0x29BCA452DD0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN000d: 000095 mov      r8d, 0xF00
IN000e: 00009B call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]

G_M16158_IG07:        ; offs=0000A1H, size=0011H, bbWeight=1, PerfScore 4.00, BB05 [0001], nogc, isz, extend

IN000f: 0000A1 vmovdqu32 xmm0, xmmword ptr [V12 rbp-78H]
IN0010: 0000AB vmovdqu32 xmmword ptr [V02 rbp-20H], xmm0

G_M16158_IG08:        ; offs=0000B2H, size=0011H, bbWeight=1, PerfScore 3.50, BB05 [0001], extend

IN0011: 0000B2 mov      rcx, 0x29B80301760      ; 'Ascii------'

IN0012: 0000BC call     [System.Console:WriteLine(System.String)]
IN0013: 0000C2 nop      

G_M16158_IG09:        ; offs=0000C3H, size=0011H, bbWeight=1, PerfScore 4.00, BB05 [0001], nogc, isz, extend

IN0014: 0000C3 vmovdqu32 xmm0, xmmword ptr [V01 rbp-10H]
IN0015: 0000CA vmovdqu32 xmmword ptr [V25 rbp-E8H], xmm0

G_M16158_IG10:        ; offs=0000D4H, size=0011H, bbWeight=1, PerfScore 4.00, BB05 [0001], nogc, isz, extend

IN0016: 0000D4 vmovdqu32 xmm0, xmmword ptr [V02 rbp-20H]
IN0017: 0000DB vmovdqu32 xmmword ptr [V26 rbp-F8H], xmm0

G_M16158_IG11:        ; offs=0000E5H, size=012CH, bbWeight=1, PerfScore 59.00, BB05 [0001], isz, extend

IN0018: 0000E5 lea      rcx, [V25 rbp-E8H]
IN0019: 0000EC lea      rdx, [V26 rbp-F8H]
IN001a: 0000F3 call     [System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool]
IN001b: 0000F9 mov      dword ptr [V13 rbp-7CH], eax
IN001c: 0000FC mov      ecx, dword ptr [V13 rbp-7CH]
IN001d: 0000FF call     [System.Console:WriteLine(bool)]
IN001e: 000105 nop      
IN001f: 000106 mov      rcx, 0x29B80301790      ; 'String------'

IN0020: 000110 call     [System.Console:WriteLine(System.String)]
IN0021: 000116 nop      
IN0022: 000117 mov      rcx, 0x29B803017C0      ; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

IN0023: 000121 mov      gword ptr [V03 rbp-28H], rcx
IN0024: 000125 mov      rcx, 0x7FFD086D1A48      ; ushort[]
IN0025: 00012F mov      edx, 3
IN0026: 000134 call     CORINFO_HELP_NEWARR_1_VC
IN0027: 000139 mov      gword ptr [V14 rbp-88H], rax
IN0028: 000140 mov      rcx, 0x7FFD086D21C8      ; <PrivateImplementationDetails>:8EF6341A03FE4690DA03E4B9770B67F1FB07C68BBE1CE709341225060715D4A5
IN0029: 00014A call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
IN002a: 00014F mov      gword ptr [V15 rbp-90H], rax
IN002b: 000156 mov      rcx, gword ptr [V14 rbp-88H]
IN002c: 00015D mov      rdx, gword ptr [V15 rbp-90H]
IN002d: 000164 call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
IN002e: 000169 mov      rcx, gword ptr [V14 rbp-88H]
IN002f: 000170 mov      gword ptr [V04 rbp-30H], rcx
IN0030: 000174 mov      rcx, gword ptr [V03 rbp-28H]
IN0031: 000178 mov      rdx, gword ptr [V04 rbp-30H]
IN0032: 00017C mov      r8d, 1
IN0033: 000182 call     [System.Text.Program:Split(System.String,ushort[],int):System.String[]]
IN0034: 000188 mov      gword ptr [V16 rbp-98H], rax
IN0035: 00018F nop      
IN0036: 000190 mov      rcx, gword ptr [V03 rbp-28H]
IN0037: 000194 xor      edx, edx
IN0038: 000196 cmp      dword ptr [rcx], ecx
IN0039: 000198 call     [System.String:get_Chars(int):ushort:this]
IN003a: 00019E mov      dword ptr [V17 rbp-9CH], eax
IN003b: 0001A4 mov      ecx, dword ptr [V17 rbp-9CH]
IN003c: 0001AA call     [System.Console:WriteLine(ushort)]
IN003d: 0001B0 nop      
IN003e: 0001B1 mov      rcx, 0x7FFD086D1E30      ; byte[]
IN003f: 0001BB mov      edx, 5
IN0040: 0001C0 call     CORINFO_HELP_NEWARR_1_VC
IN0041: 0001C5 mov      gword ptr [V18 rbp-A8H], rax
IN0042: 0001CC mov      rcx, 0x7FFD086D2198      ; <PrivateImplementationDetails>:7879981D4F226A8F0191D36730C07205D7A5FF1C780FCA9B2F905F25264CF636
IN0043: 0001D6 call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
IN0044: 0001DB mov      gword ptr [V19 rbp-B0H], rax
IN0045: 0001E2 mov      rcx, gword ptr [V18 rbp-A8H]
IN0046: 0001E9 mov      rdx, gword ptr [V19 rbp-B0H]
IN0047: 0001F0 call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
IN0048: 0001F5 mov      rcx, gword ptr [V18 rbp-A8H]
IN0049: 0001FC mov      gword ptr [V05 rbp-38H], rcx
IN004a: 000200 nop      
IN004b: 000201 mov      rcx, gword ptr [V05 rbp-38H]
IN004c: 000205 xor      eax, eax
IN004d: 000207 cmp      eax, dword ptr [rcx+08H]
IN004e: 00020A jb       SHORT G_M16158_IG12
IN004f: 00020C call     CORINFO_HELP_RNGCHKFAIL

G_M16158_IG12:        ; offs=000211H, size=00A6H, bbWeight=1, PerfScore 32.75, gcrefRegs=0002 {rcx}, byrefRegs=0000 {}, BB05 [0001], byref

IN0050: 000211 mov      edx, eax
IN0051: 000213 lea      rcx, bword ptr [rcx+rdx+10H]
IN0052: 000218 mov      bword ptr [V07 rbp-48H], rcx
IN0053: 00021C mov      rcx, bword ptr [V07 rbp-48H]
IN0054: 000220 mov      qword ptr [V27 rbp-100H], rcx
IN0055: 000227 mov      rcx, qword ptr [V27 rbp-100H]
IN0056: 00022E mov      qword ptr [V06 rbp-40H], rcx
IN0057: 000232 nop      
IN0058: 000233 mov      rcx, qword ptr [V06 rbp-40H]
IN0059: 000237 call     System.String:.ctor(ulong):this
IN005a: 00023C mov      gword ptr [V20 rbp-B8H], rax
IN005b: 000243 mov      rcx, gword ptr [V20 rbp-B8H]
IN005c: 00024A mov      gword ptr [V08 rbp-50H], rcx
IN005d: 00024E nop      
IN005e: 00024F xor      ecx, ecx
IN005f: 000251 mov      ecx, ecx
IN0060: 000253 mov      bword ptr [V07 rbp-48H], rcx
IN0061: 000257 nop      
IN0062: 000258 mov      rcx, 0x29B80301940      ; 'Main Vector512: '

IN0063: 000262 mov      gword ptr [V21 rbp-C0H], rcx
IN0064: 000269 mov      dword ptr [V22 rbp-C4H], 1
IN0065: 000273 mov      ecx, dword ptr [V22 rbp-C4H]
IN0066: 000279 mov      dword ptr [V09 rbp-58H], ecx
IN0067: 00027C lea      rcx, [V09 rbp-58H]
IN0068: 000280 call     [System.Boolean:ToString():System.String:this]
IN0069: 000286 mov      gword ptr [V23 rbp-D0H], rax
IN006a: 00028D mov      rcx, gword ptr [V21 rbp-C0H]
IN006b: 000294 mov      rdx, gword ptr [V23 rbp-D0H]
IN006c: 00029B call     [System.String:Concat(System.String,System.String):System.String]
IN006d: 0002A1 mov      gword ptr [V24 rbp-D8H], rax
IN006e: 0002A8 mov      rcx, gword ptr [V24 rbp-D8H]
IN006f: 0002AF call     [System.Console:WriteLine(System.String)]
IN0070: 0002B5 nop      
IN0071: 0002B6 nop      

G_M16158_IG13:        ; offs=0002B7H, size=0009H, bbWeight=1, PerfScore 1.75, epilog, nogc, extend

IN0080: 0002B7 add      rsp, 288
IN0081: 0002BE pop      rbp
IN0082: 0002BF ret      


*************** Finishing PHASE Emit code

*************** Starting PHASE Emit GC+EH tables
Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0x0002c0 (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 3
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_LARGE (1)     OpInfo: 0 - Scaled small  
      Size: 36 * 8 = 288 = 0x00120
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FFD08315C20, pColdCode=0x0000000000000000, startOffset=0x0, endOffset=0x2c0, unwindSize=0xa, pUnwindBlock=0x0000029B801BA08E, funKind=0 (main function))
*************** In genIPmappingGen()
IP mapping count : 57
IL offs PROLOG : 0x00000000 ( STACK_EMPTY )
IL offs NO_MAP : 0x0000004D ( STACK_EMPTY )
IL offs 0x0000 : 0x0000005B ( STACK_EMPTY )
IL offs 0x0001 : 0x0000005C ( STACK_EMPTY )
IL offs 0x000B : 0x00000070 ( CALL_INSTRUCTION )
IL offs 0x0010 : 0x00000076
IL offs 0x0011 : 0x00000087 ( STACK_EMPTY )
IL offs 0x001B : 0x0000009B ( CALL_INSTRUCTION )
IL offs 0x0020 : 0x000000A1
IL offs 0x0021 : 0x000000B2 ( STACK_EMPTY )
IL offs 0x0026 : 0x000000BC ( CALL_INSTRUCTION )
IL offs 0x002B : 0x000000C2 ( STACK_EMPTY )
IL offs 0x002C : 0x000000C3 ( STACK_EMPTY )
IL offs 0x002E : 0x000000F3 ( CALL_INSTRUCTION )
IL offs 0x0033 : 0x000000FC
IL offs 0x0033 : 0x000000FF ( CALL_INSTRUCTION )
IL offs 0x0038 : 0x00000105 ( STACK_EMPTY )
IL offs 0x0039 : 0x00000106 ( STACK_EMPTY )
IL offs 0x003E : 0x00000110 ( CALL_INSTRUCTION )
IL offs 0x0043 : 0x00000116 ( STACK_EMPTY )
IL offs 0x0044 : 0x00000117 ( STACK_EMPTY )
IL offs 0x004A : 0x00000125 ( STACK_EMPTY )
IL offs 0x0050 : 0x00000140
IL offs 0x0056 : 0x00000164 ( CALL_INSTRUCTION )
IL offs 0x005B : 0x00000169
IL offs 0x005C : 0x00000174 ( STACK_EMPTY )
IL offs 0x005F : 0x00000182 ( CALL_INSTRUCTION )
IL offs 0x0064 : 0x0000018F
IL offs 0x0065 : 0x00000190 ( STACK_EMPTY )
IL offs 0x0067 : 0x00000198 ( CALL_INSTRUCTION )
IL offs 0x006C : 0x000001A4
IL offs 0x006C : 0x000001AA ( CALL_INSTRUCTION )
IL offs 0x0071 : 0x000001B0 ( STACK_EMPTY )
IL offs 0x0072 : 0x000001B1 ( STACK_EMPTY )
IL offs 0x0078 : 0x000001CC
IL offs 0x007E : 0x000001F0 ( CALL_INSTRUCTION )
IL offs 0x0083 : 0x000001F5
IL offs 0x0085 : 0x00000200 ( STACK_EMPTY )
IL offs 0x0086 : 0x00000201 ( STACK_EMPTY )
IL offs 0x0090 : 0x0000021C ( STACK_EMPTY )
IL offs 0x0095 : 0x00000232 ( STACK_EMPTY )
IL offs 0x0096 : 0x00000233 ( STACK_EMPTY )
IL offs 0x0098 : 0x00000237 ( CALL_INSTRUCTION )
IL offs 0x009D : 0x00000243
IL offs 0x009F : 0x0000024E ( STACK_EMPTY )
IL offs 0x00A0 : 0x0000024F ( STACK_EMPTY )
IL offs 0x00A4 : 0x00000257 ( STACK_EMPTY )
IL offs 0x00A5 : 0x00000258 ( STACK_EMPTY )
IL offs 0x00AF : 0x00000273
IL offs 0x00B3 : 0x00000280 ( CALL_INSTRUCTION )
IL offs 0x00B8 : 0x0000028D
IL offs 0x00B8 : 0x0000029B ( CALL_INSTRUCTION )
IL offs 0x00BD : 0x000002A8
IL offs 0x00BD : 0x000002AF ( CALL_INSTRUCTION )
IL offs 0x00C2 : 0x000002B5 ( STACK_EMPTY )
IL offs 0x00C3 : 0x000002B6 ( STACK_EMPTY )
IL offs EPILOG : 0x000002B7 ( STACK_EMPTY )

*************** In genSetScopeInfo()
VarLocInfo count is 11
; Variable debug info: 11 live ranges, 10 vars for method System.Text.Program:Main(System.String[])
(V00 arg0) : From 00000000h to 0000004Dh, in rcx
(V00 arg0) : From 0000005Bh to 000002B7h, in rbp[16] (1 slot)
(V01 loc0) : From 0000005Bh to 000002B7h, in rbp[-16] (1 slot)
(V02 loc1) : From 0000005Bh to 000002B7h, in rbp[-32] (1 slot)
(V03 loc2) : From 0000005Bh to 000002B7h, in rbp[-40] (1 slot)
(V04 loc3) : From 0000005Bh to 000002B7h, in rbp[-48] (1 slot)
(V05 loc4) : From 0000005Bh to 000002B7h, in rbp[-56] (1 slot)
(V06 loc5) : From 0000005Bh to 000002B7h, in rbp[-64] (1 slot)
(V07 loc6) : From 0000005Bh to 000002B7h, in rbp[-72] (1 slot)
(V08 loc7) : From 0000005Bh to 000002B7h, in rbp[-80] (1 slot)
(V09 loc8) : From 0000005Bh to 000002B7h, in rbp[-88] (1 slot)
*************** In gcInfoBlockHdrSave()
Set code length to 704.
Set ReturnKind to Scalar.
Set stack base register to rbp.
Set Outgoing stack arg area size to 32.
Stack slot id for offset 16 (0x10) (frame) (untracked) = 0.
Stack slot id for offset -16 (-0x10) (frame) (byref, untracked) = 1.
Stack slot id for offset -32 (-0x20) (frame) (byref, untracked) = 2.
Stack slot id for offset -40 (-0x28) (frame) (untracked) = 3.
Stack slot id for offset -48 (-0x30) (frame) (untracked) = 4.
Stack slot id for offset -56 (-0x38) (frame) (untracked) = 5.
Stack slot id for offset -72 (-0x48) (frame) (byref, pinned, untracked) = 6.
Stack slot id for offset -80 (-0x50) (frame) (untracked) = 7.
Stack slot id for offset -104 (-0x68) (frame) (byref, untracked) = 8.
Stack slot id for offset -120 (-0x78) (frame) (byref, untracked) = 9.
Stack slot id for offset -136 (-0x88) (frame) (untracked) = 10.
Stack slot id for offset -144 (-0x90) (frame) (untracked) = 11.
Stack slot id for offset -152 (-0x98) (frame) (untracked) = 12.
Stack slot id for offset -168 (-0xa8) (frame) (untracked) = 13.
Stack slot id for offset -176 (-0xb0) (frame) (untracked) = 14.
Stack slot id for offset -184 (-0xb8) (frame) (untracked) = 15.
Stack slot id for offset -192 (-0xc0) (frame) (untracked) = 16.
Stack slot id for offset -208 (-0xd0) (frame) (untracked) = 17.
Stack slot id for offset -216 (-0xd8) (frame) (untracked) = 18.
Stack slot id for offset -232 (-0xe8) (frame) (byref, untracked) = 19.
Stack slot id for offset -248 (-0xf8) (frame) (byref, untracked) = 20.
Register slot id for reg rcx = 21.
Register slot id for reg rax = 22.
Register slot id for reg rdx = 23.
Register slot id for reg rcx (byref) = 24.
Set state of slot 21 at instr offset 0xbc to Live.
Set state of slot 21 at instr offset 0xc2 to Dead.
Set state of slot 21 at instr offset 0x110 to Live.
Set state of slot 21 at instr offset 0x116 to Dead.
Set state of slot 21 at instr offset 0x121 to Live.
Set state of slot 21 at instr offset 0x12f to Dead.
Set state of slot 22 at instr offset 0x139 to Live.
Set state of slot 21 at instr offset 0x15d to Live.
Set state of slot 23 at instr offset 0x164 to Live.
Set state of slot 22 at instr offset 0x169 to Dead.
Set state of slot 21 at instr offset 0x169 to Dead.
Set state of slot 23 at instr offset 0x169 to Dead.
Set state of slot 21 at instr offset 0x170 to Live.
Set state of slot 23 at instr offset 0x17c to Live.
Set state of slot 22 at instr offset 0x188 to Live.
Set state of slot 21 at instr offset 0x188 to Dead.
Set state of slot 23 at instr offset 0x188 to Dead.
Set state of slot 21 at instr offset 0x194 to Live.
Set state of slot 22 at instr offset 0x19e to Dead.
Set state of slot 21 at instr offset 0x19e to Dead.
Set state of slot 22 at instr offset 0x1c5 to Live.
Set state of slot 21 at instr offset 0x1e9 to Live.
Set state of slot 23 at instr offset 0x1f0 to Live.
Set state of slot 22 at instr offset 0x1f5 to Dead.
Set state of slot 21 at instr offset 0x1f5 to Dead.
Set state of slot 23 at instr offset 0x1f5 to Dead.
Set state of slot 21 at instr offset 0x1fc to Live.
Set state of slot 21 at instr offset 0x211 to Dead.
Set state of slot 21 at instr offset 0x211 to Live.
Set state of slot 21 at instr offset 0x218 to Dead.
Set state of slot 24 at instr offset 0x218 to Live.
Set state of slot 24 at instr offset 0x22e to Dead.
Set state of slot 22 at instr offset 0x23c to Live.
Set state of slot 21 at instr offset 0x24a to Live.
Set state of slot 21 at instr offset 0x251 to Dead.
Set state of slot 21 at instr offset 0x262 to Live.
Set state of slot 21 at instr offset 0x279 to Dead.
Set state of slot 21 at instr offset 0x294 to Live.
Set state of slot 23 at instr offset 0x29b to Live.
Set state of slot 21 at instr offset 0x2a1 to Dead.
Set state of slot 23 at instr offset 0x2a1 to Dead.
Set state of slot 21 at instr offset 0x2af to Live.
Set state of slot 22 at instr offset 0x2b5 to Dead.
Set state of slot 21 at instr offset 0x2b5 to Dead.
Defining interruptible range: [0x4d, 0x76).
Defining interruptible range: [0x87, 0xa1).
Defining interruptible range: [0xb2, 0xc3).
Defining interruptible range: [0xe5, 0x2b7).

*************** Finishing PHASE Emit GC+EH tables
Method code size: 704

Allocations for System.Text.Program:Main(System.String[]) (MethodHash=4a0bc0e1)
count:       3040, size:     215792, max =       5304
allocateMemory:     262144, nraUsed:     218624

Alloc'd bytes by kind:
                  kind |       size |     pct
  ---------------------+------------+--------
         AssertionProp |          0 |   0.00%
               ASTNode |      32320 |  14.98%
              InstDesc |      12932 |   5.99%
              ImpStack |        384 |   0.18%
            BasicBlock |       2312 |   1.07%
              CallArgs |       2560 |   1.19%
              FlowEdge |        288 |   0.13%
     TreeStatementList |          0 |   0.00%
               SiScope |          0 |   0.00%
       DominatorMemory |          0 |   0.00%
                  LSRA |       7272 |   3.37%
         LSRA_Interval |       7360 |   3.41%
      LSRA_RefPosition |      34800 |  16.13%
          Reachability |        144 |   0.07%
                   SSA |          0 |   0.00%
           ValueNumber |          0 |   0.00%
              LvaTable |       4896 |   2.27%
            UnwindInfo |          0 |   0.00%
                hashBv |         88 |   0.04%
                bitset |        400 |   0.19%
          FixedBitVect |         64 |   0.03%
               Generic |       3612 |   1.67%
   LocalAddressVisitor |          0 |   0.00%
         FieldSeqStore |        144 |   0.07%
          MemorySsaMap |          0 |   0.00%
          MemoryPhiArg |          0 |   0.00%
                   CSE |          0 |   0.00%
                    GC |       6476 |   3.00%
       CorTailCallInfo |          0 |   0.00%
              Inlining |        248 |   0.11%
            ArrayStack |          0 |   0.00%
             DebugInfo |       3136 |   1.45%
             DebugOnly |      92578 |  42.90%
               Codegen |       1224 |   0.57%
               LoopOpt |          0 |   0.00%
             LoopClone |          0 |   0.00%
             LoopHoist |          0 |   0.00%
               Unknown |         58 |   0.03%
            RangeCheck |          0 |   0.00%
              CopyProp |          0 |   0.00%
             Promotion |          0 |   0.00%
           SideEffects |          0 |   0.00%
       ObjectAllocator |          0 |   0.00%
    VariableLiveRanges |       2272 |   1.05%
           ClassLayout |        224 |   0.10%
       TailMergeThrows |          0 |   0.00%
             EarlyProp |          0 |   0.00%
              ZeroInit |          0 |   0.00%
                   Pgo |          0 |   0.00%

****** DONE compiling System.Text.Program:Main(System.String[])
Ascii------
Vector512.IsHardwareAccelerated: True
True
String------
split Vector512.IsHardwareAccelerated: False
split internal Vector512.IsHardwareAccelerated: False
Implementing MakeSeparatorListVectorized codepath
length to examine: 180
length > vector512: True
Vector512.IsHardwareAccelerated: False
Implementing vector128 codepath
A
span: False
Main Vector512: True
