****** START compiling System.Program:Main(System.String[]) (MethodHash=7cc6f032)
Generating code for Windows x64
OPTIONS: compCodeOpt = BLENDED_CODE
OPTIONS: compDbgCode = true
OPTIONS: compDbgInfo = true
OPTIONS: compDbgEnC  = false
OPTIONS: compProcedureSplitting   = false
OPTIONS: compProcedureSplittingEH = false
OPTIONS: optimizer should use profile data
IL to import:
IL_0000  00                nop         
IL_0001  7f 01 00 00 04    ldsflda      0x4000001
IL_0006  20 00 0f 00 00    ldc.i4       0xF00
IL_000b  73 0a 00 00 0a    newobj       0xA00000A
IL_0010  0a                stloc.0     
IL_0011  7f 01 00 00 04    ldsflda      0x4000001
IL_0016  20 00 0f 00 00    ldc.i4       0xF00
IL_001b  73 0a 00 00 0a    newobj       0xA00000A
IL_0020  0b                stloc.1     
IL_0021  28 0b 00 00 0a    call         0xA00000B
IL_0026  00                nop         
IL_0027  16                ldc.i4.0    
IL_0028  13 04             stloc.s      0x4
IL_002a  2b 28             br.s         40 (IL_0054)
IL_002c  00                nop         
IL_002d  16                ldc.i4.0    
IL_002e  13 05             stloc.s      0x5
IL_0030  2b 0c             br.s         12 (IL_003e)
IL_0032  00                nop         
IL_0033  00                nop         
IL_0034  11 05             ldloc.s      0x5
IL_0036  13 06             stloc.s      0x6
IL_0038  11 06             ldloc.s      0x6
IL_003a  17                ldc.i4.1    
IL_003b  58                add         
IL_003c  13 05             stloc.s      0x5
IL_003e  11 05             ldloc.s      0x5
IL_0040  17                ldc.i4.1    
IL_0041  fe 04             clt         
IL_0043  13 07             stloc.s      0x7
IL_0045  11 07             ldloc.s      0x7
IL_0047  2d e9             brtrue.s     -23 (IL_0032)
IL_0049  00                nop         
IL_004a  11 04             ldloc.s      0x4
IL_004c  13 06             stloc.s      0x6
IL_004e  11 06             ldloc.s      0x6
IL_0050  17                ldc.i4.1    
IL_0051  58                add         
IL_0052  13 04             stloc.s      0x4
IL_0054  11 04             ldloc.s      0x4
IL_0056  17                ldc.i4.1    
IL_0057  fe 04             clt         
IL_0059  13 08             stloc.s      0x8
IL_005b  11 08             ldloc.s      0x8
IL_005d  2d cd             brtrue.s     -51 (IL_002c)
IL_005f  72 01 00 00 70    ldstr        0x70000001
IL_0064  28 0c 00 00 0a    call         0xA00000C
IL_0069  00                nop         
IL_006a  06                ldloc.0     
IL_006b  07                ldloc.1     
IL_006c  28 0d 00 00 0a    call         0xA00000D
IL_0071  28 0e 00 00 0a    call         0xA00000E
IL_0076  00                nop         
IL_0077  72 0d 00 00 70    ldstr        0x7000000D
IL_007c  28 0c 00 00 0a    call         0xA00000C
IL_0081  00                nop         
IL_0082  72 1b 00 00 70    ldstr        0x7000001B
IL_0087  0c                stloc.2     
IL_0088  19                ldc.i4.3    
IL_0089  8d 11 00 00 01    newarr       0x1000011
IL_008e  25                dup         
IL_008f  d0 02 00 00 04    ldtoken      0x4000002
IL_0094  28 0f 00 00 0a    call         0xA00000F
IL_0099  0d                stloc.3     
IL_009a  08                ldloc.2     
IL_009b  09                ldloc.3     
IL_009c  17                ldc.i4.1    
IL_009d  28 01 00 00 06    call         0x6000001
IL_00a2  26                pop         
IL_00a3  2a                ret         

lvaSetClass: setting class for V00 to (00007FF7C6A34890) System.String[] 
Arg #0    passed in register(s) rcx

lvaSetClass: setting class for V03 to (00007FF7C68B34F8) System.String 

lvaSetClass: setting class for V04 to (00007FF7C6BF3378) ushort[] 

lvaGrabTemp returning 10 (V10 tmp0) (a long lifetime temp) called for OutgoingArgSpace.

Local V10 should not be enregistered because: it is address exposed
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd <System.String[]>
;  V01 loc0           struct <System.ReadOnlySpan`1, 16> <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1           struct <System.ReadOnlySpan`1, 16> <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2              ref  class-hnd <System.String>
;  V04 loc3              ref  class-hnd <ushort[]>
;  V05 loc4              int 
;  V06 loc5              int 
;  V07 loc6              int 
;  V08 loc7             bool 
;  V09 loc8             bool 
;  V10 OutArgs        struct <0> do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
*************** In compInitDebuggingInfo() for System.Program:Main(System.String[])
getVars() returned cVars = 0, extendOthers = true
info.compVarScopesCount = 10
    	VarNum 	LVNum 	      Name 	Beg 	End
 0: 	00h 	00h 	  V00 arg0 	000h   	0A4h
 1: 	01h 	01h 	  V01 loc0 	000h   	0A4h
 2: 	02h 	02h 	  V02 loc1 	000h   	0A4h
 3: 	03h 	03h 	  V03 loc2 	000h   	0A4h
 4: 	04h 	04h 	  V04 loc3 	000h   	0A4h
 5: 	05h 	05h 	  V05 loc4 	000h   	0A4h
 6: 	06h 	06h 	  V06 loc5 	000h   	0A4h
 7: 	07h 	07h 	  V07 loc6 	000h   	0A4h
 8: 	08h 	08h 	  V08 loc7 	000h   	0A4h
 9: 	09h 	09h 	  V09 loc8 	000h   	0A4h
New Basic Block BB01 [0000] created.
New scratch BB01
Debuggable code - Add new BB01 [0000] to perform initialization of variables
info.compStmtOffsetsCount    = 0
info.compStmtOffsetsImplicit = 0007h ( STACK_EMPTY NOP CALL_SITE )
*************** In fgFindBasicBlocks() for System.Program:Main(System.String[])
Marked V01 as a single def local
Marked V02 as a single def local
Marked V03 as a single def local
Marked V04 as a single def local
Marked V08 as a single def local
Marked V09 as a single def local
Jump targets:
  IL_002c
  IL_0032
  IL_003e
  IL_0054
New Basic Block BB02 [0001] created.
BB02 [000..02C)
New Basic Block BB03 [0002] created.
BB03 [02C..032)
New Basic Block BB04 [0003] created.
BB04 [032..03E)
New Basic Block BB05 [0004] created.
BB05 [03E..049)
New Basic Block BB06 [0005] created.
BB06 [049..054)
New Basic Block BB07 [0006] created.
BB07 [054..05F)
New Basic Block BB08 [0007] created.
BB08 [05F..0A4)
Setting edge weights for BB01 -> BB02 to [0 .. 3.402823e+38]
Setting edge weights for BB02 -> BB07 to [0 .. 3.402823e+38]
Setting edge weights for BB03 -> BB05 to [0 .. 3.402823e+38]
Setting edge weights for BB04 -> BB05 to [0 .. 3.402823e+38]
Setting edge weights for BB05 -> BB04 to [0 .. 3.402823e+38]
Setting edge weights for BB05 -> BB06 to [0 .. 3.402823e+38]
Setting edge weights for BB06 -> BB07 to [0 .. 3.402823e+38]
Setting edge weights for BB07 -> BB03 to [0 .. 3.402823e+38]
Setting edge weights for BB07 -> BB08 to [0 .. 3.402823e+38]
CLFLG_MINOPT set for method System.Program:Main(System.String[])
IL Code Size,Instr  164,  70, Basic Block count   8, Local Variable Num,Ref count  11, 24 for method System.Program:Main(System.String[])
IL Code Size,Instr  164,  70, Basic Block count   8, Local Variable Num,Ref count  11, 24 for method System.Program:Main(System.String[])
OPTIONS: opts.MinOpts() == true
Basic block list for 'System.Program:Main(System.String[])'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..02C)-> BB07 (always)                     
BB03 [0002]  1       BB07                  1       [02C..032)-> BB05 (always)                     bwd bwd-target 
BB04 [0003]  1       BB05                  1       [032..03E)                                     bwd bwd-target 
BB05 [0004]  2       BB03,BB04             1       [03E..049)-> BB04 ( cond )                     bwd bwd-src 
BB06 [0005]  1       BB05                  1       [049..054)                                     bwd 
BB07 [0006]  2       BB02,BB06             1       [054..05F)-> BB03 ( cond )                     bwd bwd-src 
BB08 [0007]  1       BB07                  1       [05F..0A4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Pre-import

*************** Finishing PHASE Pre-import
Trees after Pre-import

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..02C)-> BB07 (always)                     
BB03 [0002]  1       BB07                  1       [02C..032)-> BB05 (always)                     bwd bwd-target 
BB04 [0003]  1       BB05                  1       [032..03E)                                     bwd bwd-target 
BB05 [0004]  2       BB03,BB04             1       [03E..049)-> BB04 ( cond )                     bwd bwd-src 
BB06 [0005]  1       BB05                  1       [049..054)                                     bwd 
BB07 [0006]  2       BB02,BB06             1       [054..05F)-> BB03 ( cond )                     bwd bwd-src 
BB08 [0007]  1       BB07                  1       [05F..0A4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

------------ BB02 [000..02C) -> BB07 (always), preds={BB01} succs={BB07}

------------ BB03 [02C..032) -> BB05 (always), preds={BB07} succs={BB05}

------------ BB04 [032..03E), preds={BB05} succs={BB05}

------------ BB05 [03E..049) -> BB04 (cond), preds={BB03,BB04} succs={BB06,BB04}

------------ BB06 [049..054), preds={BB05} succs={BB07}

------------ BB07 [054..05F) -> BB03 (cond), preds={BB02,BB06} succs={BB08,BB03}

------------ BB08 [05F..0A4) (return), preds={BB07} succs={}

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Profile incorporation
BBOPT set, but no profile data available (hr=80004001)

*************** Finishing PHASE Profile incorporation [no changes]

*************** Starting PHASE Importation
Marking leading BBF_INTERNAL block BB01 as BBF_IMPORTED

impImportBlockPending for BB02

Importing BB02 (PC=000) of 'System.Program:Main(System.String[])'
    [ 0]   0 (0x000) nop

STMT00001 ( 0x000[E-] ... ??? )
               [000001] -----------                         *  NO_OP     void  

    [ 0]   1 (0x001) ldsflda 04000001
    [ 1]   6 (0x006) ldc.i4 3840
    [ 2]  11 (0x00b) newobj
lvaGrabTemp returning 11 (V11 tmp1) called for NewObj constructor temp.

Suppressing zero-init for V11 -- expect to zero in prolog
 0A00000A
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00002 ( 0x001[E-] ... ??? )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

    [ 1]  16 (0x010) stloc.0

STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V11 tmp1         

    [ 0]  17 (0x011) ldsflda 04000001
    [ 1]  22 (0x016) ldc.i4 3840
    [ 2]  27 (0x01b) newobj
lvaGrabTemp returning 12 (V12 tmp2) called for NewObj constructor temp.

Suppressing zero-init for V12 -- expect to zero in prolog
 0A00000A
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00004 ( 0x011[E-] ... ??? )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

    [ 1]  32 (0x020) stloc.1

STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V12 tmp2         

    [ 0]  33 (0x021) call 0A00000B
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00006 ( 0x021[E-] ... ??? )
               [000014] --C-G------                         *  CALL      void   System.Console:WriteLine()

    [ 0]  38 (0x026) nop

STMT00007 ( 0x026[E-] ... ??? )
               [000015] -----------                         *  NO_OP     void  

    [ 0]  39 (0x027) ldc.i4.0 0
    [ 1]  40 (0x028) stloc.s 4

STMT00008 ( 0x027[E-] ... ??? )
               [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000016] -----------                         \--*  CNS_INT   int    0

    [ 0]  42 (0x02a) br.s

STMT00009 ( 0x02A[E-] ... ??? )
               [000018] -----------                         *  NOP       void  

impImportBlockPending for BB07

Importing BB07 (PC=084) of 'System.Program:Main(System.String[])'
    [ 0]  84 (0x054) ldloc.s 4
    [ 1]  86 (0x056) ldc.i4.1 1
    [ 2]  87 (0x057) clt
    [ 1]  89 (0x059) stloc.s 8

STMT00010 ( 0x054[E-] ... ??? )
               [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----------                         \--*  LT        int   
               [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----------                            \--*  CNS_INT   int    1

    [ 0]  91 (0x05b) ldloc.s 8
    [ 1]  93 (0x05d) brtrue.s

STMT00011 ( 0x05B[E-] ... ??? )
               [000026] -----------                         *  JTRUE     void  
               [000025] -----------                         \--*  NE        int   
               [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
               [000024] -----------                            \--*  CNS_INT   int    0

impImportBlockPending for BB08

impImportBlockPending for BB03

Importing BB03 (PC=044) of 'System.Program:Main(System.String[])'
    [ 0]  44 (0x02c) nop

STMT00012 ( 0x02C[E-] ... ??? )
               [000027] -----------                         *  NO_OP     void  

    [ 0]  45 (0x02d) ldc.i4.0 0
    [ 1]  46 (0x02e) stloc.s 5

STMT00013 ( 0x02D[E-] ... ??? )
               [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000028] -----------                         \--*  CNS_INT   int    0

    [ 0]  48 (0x030) br.s

STMT00014 ( 0x030[E-] ... ??? )
               [000030] -----------                         *  NOP       void  

impImportBlockPending for BB05

Importing BB05 (PC=062) of 'System.Program:Main(System.String[])'
    [ 0]  62 (0x03e) ldloc.s 5
    [ 1]  64 (0x040) ldc.i4.1 1
    [ 2]  65 (0x041) clt
    [ 1]  67 (0x043) stloc.s 7

STMT00015 ( 0x03E[E-] ... ??? )
               [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----------                         \--*  LT        int   
               [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----------                            \--*  CNS_INT   int    1

    [ 0]  69 (0x045) ldloc.s 7
    [ 1]  71 (0x047) brtrue.s

STMT00016 ( 0x045[E-] ... ??? )
               [000038] -----------                         *  JTRUE     void  
               [000037] -----------                         \--*  NE        int   
               [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
               [000036] -----------                            \--*  CNS_INT   int    0

impImportBlockPending for BB06

impImportBlockPending for BB04

Importing BB04 (PC=050) of 'System.Program:Main(System.String[])'
    [ 0]  50 (0x032) nop

STMT00017 ( 0x032[E-] ... ??? )
               [000039] -----------                         *  NO_OP     void  

    [ 0]  51 (0x033) nop

STMT00018 ( 0x033[E-] ... ??? )
               [000040] -----------                         *  NO_OP     void  

    [ 0]  52 (0x034) ldloc.s 5
    [ 1]  54 (0x036) stloc.s 6

STMT00019 ( 0x034[E-] ... ??? )
               [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

    [ 0]  56 (0x038) ldloc.s 6
    [ 1]  58 (0x03a) ldc.i4.1 1
    [ 2]  59 (0x03b) add
    [ 1]  60 (0x03c) stloc.s 5

STMT00020 ( 0x038[E-] ... ??? )
               [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000045] -----------                         \--*  ADD       int   
               [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000044] -----------                            \--*  CNS_INT   int    1

impImportBlockPending for BB05

Importing BB06 (PC=073) of 'System.Program:Main(System.String[])'
    [ 0]  73 (0x049) nop

STMT00021 ( 0x049[E-] ... ??? )
               [000047] -----------                         *  NO_OP     void  

    [ 0]  74 (0x04a) ldloc.s 4
    [ 1]  76 (0x04c) stloc.s 6

STMT00022 ( 0x04A[E-] ... ??? )
               [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

    [ 0]  78 (0x04e) ldloc.s 6
    [ 1]  80 (0x050) ldc.i4.1 1
    [ 2]  81 (0x051) add
    [ 1]  82 (0x052) stloc.s 4

STMT00023 ( 0x04E[E-] ... ??? )
               [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000052] -----------                         \--*  ADD       int   
               [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000051] -----------                            \--*  CNS_INT   int    1

impImportBlockPending for BB07

Importing BB08 (PC=095) of 'System.Program:Main(System.String[])'
    [ 0]  95 (0x05f) ldstr 70000001
    [ 1] 100 (0x064) call 0A00000C
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00024 ( 0x05F[E-] ... ??? )
               [000055] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000054] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

    [ 0] 105 (0x069) nop

STMT00025 ( 0x069[E-] ... ??? )
               [000056] -----------                         *  NO_OP     void  

    [ 0] 106 (0x06a) ldloc.0
    [ 1] 107 (0x06b) ldloc.1
    [ 2] 108 (0x06c) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is bool, structSize is 0
Calling impNormStructVal on:
               [000058] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
resulting tree:
               [000058] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
Calling impNormStructVal on:
               [000057] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
resulting tree:
               [000057] -----------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         

lvaGrabTemp returning 13 (V13 tmp3) called for impSpillStackEnsure.


STMT00026 ( 0x06A[E-] ... ??? )
               [000060] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000057] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000058] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
Marked V13 as a single def temp

    [ 1] 113 (0x071) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00027 ( 0x071[--] ... ??? )
               [000062] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000061] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

    [ 0] 118 (0x076) nop

STMT00028 ( 0x076[E-] ... ??? )
               [000063] -----------                         *  NO_OP     void  

    [ 0] 119 (0x077) ldstr 7000000D
    [ 1] 124 (0x07c) call 0A00000C
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00029 ( 0x077[E-] ... ??? )
               [000065] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000064] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

    [ 0] 129 (0x081) nop

STMT00030 ( 0x081[E-] ... ??? )
               [000066] -----------                         *  NO_OP     void  

    [ 0] 130 (0x082) ldstr 7000001B
    [ 1] 135 (0x087) stloc.2
lvaUpdateClass: Updating class for V03 from (00007FF7C68B34F8) System.String to (00007FF7C68B34F8) System.String [exact]


STMT00031 ( 0x082[E-] ... ??? )
               [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000067] -----------                         \--*  CNS_STR   ref   <string constant>

    [ 0] 136 (0x088) ldc.i4.3 3
    [ 1] 137 (0x089) newarr 01000011
lvaGrabTemp returning 14 (V14 tmp4) called for impSpillStackEnsure.


STMT00032 ( 0x088[E-] ... ??? )
               [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000070] H---------- arg0                       +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
               [000069] ----------- arg1                       \--*  CNS_INT   long   3
Marked V14 as a single def temp

lvaSetClass: setting class for V14 to (00007FF7C6BF3378) ushort[]  [exact]

    [ 1] 142 (0x08e) dup
    [ 2] 143 (0x08f) ldtoken
    [ 3] 148 (0x094) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
Named Intrinsic System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray: Recognized
Calling impNormStructVal on:
               [000076] --CXG------                         *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H---------- arg0                    \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

lvaGrabTemp returning 15 (V15 tmp5) called for spilled call-like call argument.


STMT00033 ( 0x08E[--] ... ??? )
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H---------- arg0                       \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field
resulting tree:
               [000079] -----------                         *  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         


STMT00034 ( ??? ... ??? )
               [000077] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000079] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

    [ 1] 153 (0x099) stloc.3
lvaUpdateClass: Updating class for V04 from (00007FF7C6BF3378) ushort[] to (00007FF7C6BF3378) ushort[] [exact]


STMT00035 ( 0x099[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

    [ 0] 154 (0x09a) ldloc.2
    [ 1] 155 (0x09b) ldloc.3
    [ 2] 156 (0x09c) ldc.i4.1 1
    [ 3] 157 (0x09d) call 06000001
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 16 (V16 tmp6) called for impSpillStackEnsure.


STMT00036 ( 0x09A[E-] ... ??? )
               [000085] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000084] --C-G------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
               [000081] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000082] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000083] ----------- arg2                       \--*  CNS_INT   int    1
Marked V16 as a single def temp

lvaSetClass: setting class for V16 to (00007FF7C6A34890) System.String[]  [exact]

    [ 1] 162 (0x0a2) pop

STMT00037 ( 0x0A2[--] ... ??? )
               [000087] -----------                         *  NOP       void  

    [ 0] 163 (0x0a3) ret

STMT00038 ( 0x0A3[E-] ... ??? )
               [000088] -----------                         *  RETURN    void  

*************** Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..02C)-> BB07 (always)                     i 
BB03 [0002]  1       BB07                  1       [02C..032)-> BB05 (always)                     i bwd bwd-target 
BB04 [0003]  1       BB05                  1       [032..03E)                                     i bwd bwd-target 
BB05 [0004]  2       BB03,BB04             1       [03E..049)-> BB04 ( cond )                     i bwd bwd-src 
BB06 [0005]  1       BB05                  1       [049..054)                                     i bwd 
BB07 [0006]  2       BB02,BB06             1       [054..05F)-> BB03 ( cond )                     i bwd bwd-src 
BB08 [0007]  1       BB07                  1       [05F..0A4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

------------ BB02 [000..02C) -> BB07 (always), preds={BB01} succs={BB07}

***** BB02
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

***** BB02
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V11 tmp1         

***** BB02
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V12 tmp2         

***** BB02
STMT00006 ( 0x021[E-] ... 0x026 )
               [000014] --C-G------                         *  CALL      void   System.Console:WriteLine()

***** BB02
STMT00007 ( 0x026[E-] ... ??? )
               [000015] -----------                         *  NO_OP     void  

***** BB02
STMT00008 ( 0x027[E-] ... 0x028 )
               [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000016] -----------                         \--*  CNS_INT   int    0

***** BB02
STMT00009 ( 0x02A[E-] ... 0x02A )
               [000018] -----------                         *  NOP       void  

------------ BB03 [02C..032) -> BB05 (always), preds={BB07} succs={BB05}

***** BB03
STMT00012 ( 0x02C[E-] ... 0x02C )
               [000027] -----------                         *  NO_OP     void  

***** BB03
STMT00013 ( 0x02D[E-] ... 0x02E )
               [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000028] -----------                         \--*  CNS_INT   int    0

***** BB03
STMT00014 ( 0x030[E-] ... 0x030 )
               [000030] -----------                         *  NOP       void  

------------ BB04 [032..03E), preds={BB05} succs={BB05}

***** BB04
STMT00017 ( 0x032[E-] ... 0x032 )
               [000039] -----------                         *  NO_OP     void  

***** BB04
STMT00018 ( 0x033[E-] ... 0x033 )
               [000040] -----------                         *  NO_OP     void  

***** BB04
STMT00019 ( 0x034[E-] ... 0x036 )
               [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

***** BB04
STMT00020 ( 0x038[E-] ... 0x03C )
               [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000045] -----------                         \--*  ADD       int   
               [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000044] -----------                            \--*  CNS_INT   int    1

------------ BB05 [03E..049) -> BB04 (cond), preds={BB03,BB04} succs={BB06,BB04}

***** BB05
STMT00015 ( 0x03E[E-] ... 0x043 )
               [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----------                         \--*  LT        int   
               [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----------                            \--*  CNS_INT   int    1

***** BB05
STMT00016 ( 0x045[E-] ... 0x047 )
               [000038] -----------                         *  JTRUE     void  
               [000037] -----------                         \--*  NE        int   
               [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
               [000036] -----------                            \--*  CNS_INT   int    0

------------ BB06 [049..054), preds={BB05} succs={BB07}

***** BB06
STMT00021 ( 0x049[E-] ... 0x049 )
               [000047] -----------                         *  NO_OP     void  

***** BB06
STMT00022 ( 0x04A[E-] ... 0x04C )
               [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

***** BB06
STMT00023 ( 0x04E[E-] ... 0x052 )
               [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000052] -----------                         \--*  ADD       int   
               [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000051] -----------                            \--*  CNS_INT   int    1

------------ BB07 [054..05F) -> BB03 (cond), preds={BB02,BB06} succs={BB08,BB03}

***** BB07
STMT00010 ( 0x054[E-] ... 0x059 )
               [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----------                         \--*  LT        int   
               [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----------                            \--*  CNS_INT   int    1

***** BB07
STMT00011 ( 0x05B[E-] ... 0x05D )
               [000026] -----------                         *  JTRUE     void  
               [000025] -----------                         \--*  NE        int   
               [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
               [000024] -----------                            \--*  CNS_INT   int    0

------------ BB08 [05F..0A4) (return), preds={BB07} succs={}

***** BB08
STMT00024 ( 0x05F[E-] ... 0x069 )
               [000055] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000054] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00025 ( 0x069[E-] ... ??? )
               [000056] -----------                         *  NO_OP     void  

***** BB08
STMT00026 ( 0x06A[E-] ... 0x076 )
               [000060] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000057] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000058] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

***** BB08
STMT00027 ( 0x071[--] ... ??? )
               [000062] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000061] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

***** BB08
STMT00028 ( 0x076[E-] ... ??? )
               [000063] -----------                         *  NO_OP     void  

***** BB08
STMT00029 ( 0x077[E-] ... 0x081 )
               [000065] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000064] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00030 ( 0x081[E-] ... ??? )
               [000066] -----------                         *  NO_OP     void  

***** BB08
STMT00031 ( 0x082[E-] ... 0x087 )
               [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000067] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00032 ( 0x088[E-] ... 0x099 )
               [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000070] H---------- arg0                       +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
               [000069] ----------- arg1                       \--*  CNS_INT   long   3

***** BB08
STMT00033 ( 0x08E[--] ... ??? )
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H---------- arg0                       \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

***** BB08
STMT00034 ( ??? ... ??? )
               [000077] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000079] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

***** BB08
STMT00035 ( 0x099[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB08
STMT00036 ( 0x09A[E-] ... 0x0A2 )
               [000085] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000084] --C-G------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
               [000081] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000082] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000083] ----------- arg2                       \--*  CNS_INT   int    1

***** BB08
STMT00037 ( 0x0A2[--] ... ??? )
               [000087] -----------                         *  NOP       void  

***** BB08
STMT00038 ( 0x0A3[E-] ... 0x0A3 )
               [000088] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Finishing PHASE Expand patchpoints [no changes]

*************** Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Finishing PHASE Indirect call transform [no changes]

*************** Starting PHASE Post-import

*************** Finishing PHASE Post-import [no changes]

*************** Starting PHASE Morph - Init

New BlockSet epoch 1, # of blocks (including unused BB00): 9, bitset array size: 1 (short)

*************** Finishing PHASE Morph - Init [no changes]

*************** Starting PHASE Morph - Inlining

*************** Finishing PHASE Morph - Inlining [no changes]

*************** Starting PHASE Allocate Objects
no newobjs in this method; punting

*************** Finishing PHASE Allocate Objects [no changes]

*************** Starting PHASE Morph - Add internal blocks

*************** After fgAddInternal()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..02C)-> BB07 (always)                     i 
BB03 [0002]  1       BB07                  1       [02C..032)-> BB05 (always)                     i bwd bwd-target 
BB04 [0003]  1       BB05                  1       [032..03E)                                     i bwd bwd-target 
BB05 [0004]  2       BB03,BB04             1       [03E..049)-> BB04 ( cond )                     i bwd bwd-src 
BB06 [0005]  1       BB05                  1       [049..054)                                     i bwd 
BB07 [0006]  2       BB02,BB06             1       [054..05F)-> BB03 ( cond )                     i bwd bwd-src 
BB08 [0007]  1       BB07                  1       [05F..0A4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

*************** Finishing PHASE Morph - Add internal blocks
Trees after Morph - Add internal blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..02C)-> BB07 (always)                     i 
BB03 [0002]  1       BB07                  1       [02C..032)-> BB05 (always)                     i bwd bwd-target 
BB04 [0003]  1       BB05                  1       [032..03E)                                     i bwd bwd-target 
BB05 [0004]  2       BB03,BB04             1       [03E..049)-> BB04 ( cond )                     i bwd bwd-src 
BB06 [0005]  1       BB05                  1       [049..054)                                     i bwd 
BB07 [0006]  2       BB02,BB06             1       [054..05F)-> BB03 ( cond )                     i bwd bwd-src 
BB08 [0007]  1       BB07                  1       [05F..0A4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

***** BB01
STMT00039 ( ??? ... ??? )
               [000096] --C-G------                         *  QMARK     void  
               [000092] ----G------    if                   +--*  EQ        int   
               [000090] n---G------                         |  +--*  IND       int   
               [000089] H----------                         |  |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----------                         |  \--*  CNS_INT   int    0
               [000095] --C-G------    if                   \--*  COLON     void  
               [000093] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000094] ----------- then                       \--*  NOP       void  

------------ BB02 [000..02C) -> BB07 (always), preds={BB01} succs={BB07}

***** BB02
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

***** BB02
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V11 tmp1         

***** BB02
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V12 tmp2         

***** BB02
STMT00006 ( 0x021[E-] ... 0x026 )
               [000014] --C-G------                         *  CALL      void   System.Console:WriteLine()

***** BB02
STMT00007 ( 0x026[E-] ... ??? )
               [000015] -----------                         *  NO_OP     void  

***** BB02
STMT00008 ( 0x027[E-] ... 0x028 )
               [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000016] -----------                         \--*  CNS_INT   int    0

***** BB02
STMT00009 ( 0x02A[E-] ... 0x02A )
               [000018] -----------                         *  NOP       void  

------------ BB03 [02C..032) -> BB05 (always), preds={BB07} succs={BB05}

***** BB03
STMT00012 ( 0x02C[E-] ... 0x02C )
               [000027] -----------                         *  NO_OP     void  

***** BB03
STMT00013 ( 0x02D[E-] ... 0x02E )
               [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000028] -----------                         \--*  CNS_INT   int    0

***** BB03
STMT00014 ( 0x030[E-] ... 0x030 )
               [000030] -----------                         *  NOP       void  

------------ BB04 [032..03E), preds={BB05} succs={BB05}

***** BB04
STMT00017 ( 0x032[E-] ... 0x032 )
               [000039] -----------                         *  NO_OP     void  

***** BB04
STMT00018 ( 0x033[E-] ... 0x033 )
               [000040] -----------                         *  NO_OP     void  

***** BB04
STMT00019 ( 0x034[E-] ... 0x036 )
               [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

***** BB04
STMT00020 ( 0x038[E-] ... 0x03C )
               [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000045] -----------                         \--*  ADD       int   
               [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000044] -----------                            \--*  CNS_INT   int    1

------------ BB05 [03E..049) -> BB04 (cond), preds={BB03,BB04} succs={BB06,BB04}

***** BB05
STMT00015 ( 0x03E[E-] ... 0x043 )
               [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----------                         \--*  LT        int   
               [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----------                            \--*  CNS_INT   int    1

***** BB05
STMT00016 ( 0x045[E-] ... 0x047 )
               [000038] -----------                         *  JTRUE     void  
               [000037] -----------                         \--*  NE        int   
               [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
               [000036] -----------                            \--*  CNS_INT   int    0

------------ BB06 [049..054), preds={BB05} succs={BB07}

***** BB06
STMT00021 ( 0x049[E-] ... 0x049 )
               [000047] -----------                         *  NO_OP     void  

***** BB06
STMT00022 ( 0x04A[E-] ... 0x04C )
               [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

***** BB06
STMT00023 ( 0x04E[E-] ... 0x052 )
               [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000052] -----------                         \--*  ADD       int   
               [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000051] -----------                            \--*  CNS_INT   int    1

------------ BB07 [054..05F) -> BB03 (cond), preds={BB02,BB06} succs={BB08,BB03}

***** BB07
STMT00010 ( 0x054[E-] ... 0x059 )
               [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----------                         \--*  LT        int   
               [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----------                            \--*  CNS_INT   int    1

***** BB07
STMT00011 ( 0x05B[E-] ... 0x05D )
               [000026] -----------                         *  JTRUE     void  
               [000025] -----------                         \--*  NE        int   
               [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
               [000024] -----------                            \--*  CNS_INT   int    0

------------ BB08 [05F..0A4) (return), preds={BB07} succs={}

***** BB08
STMT00024 ( 0x05F[E-] ... 0x069 )
               [000055] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000054] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00025 ( 0x069[E-] ... ??? )
               [000056] -----------                         *  NO_OP     void  

***** BB08
STMT00026 ( 0x06A[E-] ... 0x076 )
               [000060] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000057] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000058] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

***** BB08
STMT00027 ( 0x071[--] ... ??? )
               [000062] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000061] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

***** BB08
STMT00028 ( 0x076[E-] ... ??? )
               [000063] -----------                         *  NO_OP     void  

***** BB08
STMT00029 ( 0x077[E-] ... 0x081 )
               [000065] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000064] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00030 ( 0x081[E-] ... ??? )
               [000066] -----------                         *  NO_OP     void  

***** BB08
STMT00031 ( 0x082[E-] ... 0x087 )
               [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000067] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00032 ( 0x088[E-] ... 0x099 )
               [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000070] H---------- arg0                       +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
               [000069] ----------- arg1                       \--*  CNS_INT   long   3

***** BB08
STMT00033 ( 0x08E[--] ... ??? )
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H---------- arg0                       \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

***** BB08
STMT00034 ( ??? ... ??? )
               [000077] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000079] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

***** BB08
STMT00035 ( 0x099[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB08
STMT00036 ( 0x09A[E-] ... 0x0A2 )
               [000085] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000084] --C-G------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
               [000081] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000082] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000083] ----------- arg2                       \--*  CNS_INT   int    1

***** BB08
STMT00037 ( 0x0A2[--] ... ??? )
               [000087] -----------                         *  NOP       void  

***** BB08
STMT00038 ( 0x0A3[E-] ... 0x0A3 )
               [000088] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Remove empty try

*************** In fgRemoveEmptyTry()
No EH in this method, nothing to remove.

*************** Finishing PHASE Remove empty try [no changes]

*************** Starting PHASE Remove empty finally
No EH in this method, nothing to remove.

*************** Finishing PHASE Remove empty finally [no changes]

*************** Starting PHASE Merge callfinally chains
No EH in this method, nothing to merge.

*************** Finishing PHASE Merge callfinally chains [no changes]

*************** Starting PHASE Clone finally
No EH in this method, no cloning.

*************** Finishing PHASE Clone finally [no changes]

*************** Starting PHASE Morph - Promote Structs
  promotion opt flag not enabled

*************** Finishing PHASE Morph - Promote Structs [no changes]

*************** Starting PHASE Morph - Structs/AddrExp
LocalAddressVisitor visiting statement:
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00039 ( ??? ... ??? )
               [000096] --C-G------                         *  QMARK     void  
               [000092] ----G------    if                   +--*  EQ        int   
               [000090] n---G------                         |  +--*  IND       int   
               [000089] H----------                         |  |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----------                         |  \--*  CNS_INT   int    0
               [000095] --C-G------    if                   \--*  COLON     void  
               [000093] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000094] ----------- then                       \--*  NOP       void  

LocalAddressVisitor visiting statement:
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

Local V11 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

LocalAddressVisitor visiting statement:
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

LocalAddressVisitor visiting statement:
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

Local V12 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

LocalAddressVisitor visiting statement:
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

LocalAddressVisitor visiting statement:
STMT00006 ( 0x021[E-] ... 0x026 )
               [000014] --C-G------                         *  CALL      void   System.Console:WriteLine()

LocalAddressVisitor visiting statement:
STMT00007 ( 0x026[E-] ... ??? )
               [000015] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00008 ( 0x027[E-] ... 0x028 )
               [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000016] -----------                         \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00009 ( 0x02A[E-] ... 0x02A )
               [000018] -----------                         *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00012 ( 0x02C[E-] ... 0x02C )
               [000027] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00013 ( 0x02D[E-] ... 0x02E )
               [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000028] -----------                         \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00014 ( 0x030[E-] ... 0x030 )
               [000030] -----------                         *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00017 ( 0x032[E-] ... 0x032 )
               [000039] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00018 ( 0x033[E-] ... 0x033 )
               [000040] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00019 ( 0x034[E-] ... 0x036 )
               [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

LocalAddressVisitor visiting statement:
STMT00020 ( 0x038[E-] ... 0x03C )
               [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000045] -----------                         \--*  ADD       int   
               [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000044] -----------                            \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00015 ( 0x03E[E-] ... 0x043 )
               [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----------                         \--*  LT        int   
               [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----------                            \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00016 ( 0x045[E-] ... 0x047 )
               [000038] -----------                         *  JTRUE     void  
               [000037] -----------                         \--*  NE        int   
               [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
               [000036] -----------                            \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00021 ( 0x049[E-] ... 0x049 )
               [000047] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00022 ( 0x04A[E-] ... 0x04C )
               [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

LocalAddressVisitor visiting statement:
STMT00023 ( 0x04E[E-] ... 0x052 )
               [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000052] -----------                         \--*  ADD       int   
               [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000051] -----------                            \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00010 ( 0x054[E-] ... 0x059 )
               [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----------                         \--*  LT        int   
               [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----------                            \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00011 ( 0x05B[E-] ... 0x05D )
               [000026] -----------                         *  JTRUE     void  
               [000025] -----------                         \--*  NE        int   
               [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
               [000024] -----------                            \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00024 ( 0x05F[E-] ... 0x069 )
               [000055] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000054] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00025 ( 0x069[E-] ... ??? )
               [000056] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00026 ( 0x06A[E-] ... 0x076 )
               [000060] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000057] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000058] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

LocalAddressVisitor visiting statement:
STMT00027 ( 0x071[--] ... ??? )
               [000062] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000061] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

LocalAddressVisitor visiting statement:
STMT00028 ( 0x076[E-] ... ??? )
               [000063] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00029 ( 0x077[E-] ... 0x081 )
               [000065] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000064] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00030 ( 0x081[E-] ... ??? )
               [000066] -----------                         *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00031 ( 0x082[E-] ... 0x087 )
               [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000067] -----------                         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00032 ( 0x088[E-] ... 0x099 )
               [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000070] H---------- arg0                       +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
               [000069] ----------- arg1                       \--*  CNS_INT   long   3

LocalAddressVisitor visiting statement:
STMT00033 ( 0x08E[--] ... ??? )
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H---------- arg0                       \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

LocalAddressVisitor visiting statement:
STMT00034 ( ??? ... ??? )
               [000077] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000079] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

LocalAddressVisitor visiting statement:
STMT00035 ( 0x099[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

LocalAddressVisitor visiting statement:
STMT00036 ( 0x09A[E-] ... 0x0A2 )
               [000085] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000084] --C-G------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
               [000081] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000082] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000083] ----------- arg2                       \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00037 ( 0x0A2[--] ... ??? )
               [000087] -----------                         *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00038 ( 0x0A3[E-] ... 0x0A3 )
               [000088] -----------                         *  RETURN    void  


*************** Finishing PHASE Morph - Structs/AddrExp
Trees after Morph - Structs/AddrExp

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..02C)-> BB07 (always)                     i 
BB03 [0002]  1       BB07                  1       [02C..032)-> BB05 (always)                     i bwd bwd-target 
BB04 [0003]  1       BB05                  1       [032..03E)                                     i bwd bwd-target 
BB05 [0004]  2       BB03,BB04             1       [03E..049)-> BB04 ( cond )                     i bwd bwd-src 
BB06 [0005]  1       BB05                  1       [049..054)                                     i bwd 
BB07 [0006]  2       BB02,BB06             1       [054..05F)-> BB03 ( cond )                     i bwd bwd-src 
BB08 [0007]  1       BB07                  1       [05F..0A4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----------                         *  NOP       void  

***** BB01
STMT00039 ( ??? ... ??? )
               [000096] --C-G------                         *  QMARK     void  
               [000092] ----G------    if                   +--*  EQ        int   
               [000090] n---G------                         |  +--*  IND       int   
               [000089] H----------                         |  |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----------                         |  \--*  CNS_INT   int    0
               [000095] --C-G------    if                   \--*  COLON     void  
               [000093] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000094] ----------- then                       \--*  NOP       void  

------------ BB02 [000..02C) -> BB07 (always), preds={BB01} succs={BB07}

***** BB02
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----------                         *  NO_OP     void  

***** BB02
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB02
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00

***** BB02
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB02
STMT00006 ( 0x021[E-] ... 0x026 )
               [000014] --C-G------                         *  CALL      void   System.Console:WriteLine()

***** BB02
STMT00007 ( 0x026[E-] ... ??? )
               [000015] -----------                         *  NO_OP     void  

***** BB02
STMT00008 ( 0x027[E-] ... 0x028 )
               [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000016] -----------                         \--*  CNS_INT   int    0

***** BB02
STMT00009 ( 0x02A[E-] ... 0x02A )
               [000018] -----------                         *  NOP       void  

------------ BB03 [02C..032) -> BB05 (always), preds={BB07} succs={BB05}

***** BB03
STMT00012 ( 0x02C[E-] ... 0x02C )
               [000027] -----------                         *  NO_OP     void  

***** BB03
STMT00013 ( 0x02D[E-] ... 0x02E )
               [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000028] -----------                         \--*  CNS_INT   int    0

***** BB03
STMT00014 ( 0x030[E-] ... 0x030 )
               [000030] -----------                         *  NOP       void  

------------ BB04 [032..03E), preds={BB05} succs={BB05}

***** BB04
STMT00017 ( 0x032[E-] ... 0x032 )
               [000039] -----------                         *  NO_OP     void  

***** BB04
STMT00018 ( 0x033[E-] ... 0x033 )
               [000040] -----------                         *  NO_OP     void  

***** BB04
STMT00019 ( 0x034[E-] ... 0x036 )
               [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

***** BB04
STMT00020 ( 0x038[E-] ... 0x03C )
               [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000045] -----------                         \--*  ADD       int   
               [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000044] -----------                            \--*  CNS_INT   int    1

------------ BB05 [03E..049) -> BB04 (cond), preds={BB03,BB04} succs={BB06,BB04}

***** BB05
STMT00015 ( 0x03E[E-] ... 0x043 )
               [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----------                         \--*  LT        int   
               [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----------                            \--*  CNS_INT   int    1

***** BB05
STMT00016 ( 0x045[E-] ... 0x047 )
               [000038] -----------                         *  JTRUE     void  
               [000037] -----------                         \--*  NE        int   
               [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
               [000036] -----------                            \--*  CNS_INT   int    0

------------ BB06 [049..054), preds={BB05} succs={BB07}

***** BB06
STMT00021 ( 0x049[E-] ... 0x049 )
               [000047] -----------                         *  NO_OP     void  

***** BB06
STMT00022 ( 0x04A[E-] ... 0x04C )
               [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

***** BB06
STMT00023 ( 0x04E[E-] ... 0x052 )
               [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000052] -----------                         \--*  ADD       int   
               [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000051] -----------                            \--*  CNS_INT   int    1

------------ BB07 [054..05F) -> BB03 (cond), preds={BB02,BB06} succs={BB08,BB03}

***** BB07
STMT00010 ( 0x054[E-] ... 0x059 )
               [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----------                         \--*  LT        int   
               [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----------                            \--*  CNS_INT   int    1

***** BB07
STMT00011 ( 0x05B[E-] ... 0x05D )
               [000026] -----------                         *  JTRUE     void  
               [000025] -----------                         \--*  NE        int   
               [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
               [000024] -----------                            \--*  CNS_INT   int    0

------------ BB08 [05F..0A4) (return), preds={BB07} succs={}

***** BB08
STMT00024 ( 0x05F[E-] ... 0x069 )
               [000055] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000054] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00025 ( 0x069[E-] ... ??? )
               [000056] -----------                         *  NO_OP     void  

***** BB08
STMT00026 ( 0x06A[E-] ... 0x076 )
               [000060] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000057] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000058] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

***** BB08
STMT00027 ( 0x071[--] ... ??? )
               [000062] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000061] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         

***** BB08
STMT00028 ( 0x076[E-] ... ??? )
               [000063] -----------                         *  NO_OP     void  

***** BB08
STMT00029 ( 0x077[E-] ... 0x081 )
               [000065] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000064] ----------- arg0                    \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00030 ( 0x081[E-] ... ??? )
               [000066] -----------                         *  NO_OP     void  

***** BB08
STMT00031 ( 0x082[E-] ... 0x087 )
               [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000067] -----------                         \--*  CNS_STR   ref   <string constant>

***** BB08
STMT00032 ( 0x088[E-] ... 0x099 )
               [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000070] H---------- arg0                       +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
               [000069] ----------- arg1                       \--*  CNS_INT   long   3

***** BB08
STMT00033 ( 0x08E[--] ... ??? )
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H---------- arg0                       \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

***** BB08
STMT00034 ( ??? ... ??? )
               [000077] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000079] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         

***** BB08
STMT00035 ( 0x099[--] ... ??? )
               [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB08
STMT00036 ( 0x09A[E-] ... 0x0A2 )
               [000085] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000084] --C-G------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
               [000081] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000082] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000083] ----------- arg2                       \--*  CNS_INT   int    1

***** BB08
STMT00037 ( 0x0A2[--] ... ??? )
               [000087] -----------                         *  NOP       void  

***** BB08
STMT00038 ( 0x0A3[E-] ... 0x0A3 )
               [000088] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Early liveness

*************** Finishing PHASE Early liveness [no changes]

*************** Starting PHASE Forward Substitution

*************** Finishing PHASE Forward Substitution [no changes]

*************** Starting PHASE Physical promotion

*************** Finishing PHASE Physical promotion [no changes]

*************** Starting PHASE Identify candidates for implicit byref copy omission

*************** Finishing PHASE Identify candidates for implicit byref copy omission [no changes]

*************** Starting PHASE Morph - ByRefs

*************** Finishing PHASE Morph - ByRefs [no changes]

*************** Starting PHASE Morph - Global

*************** In fgMorphBlocks()
compEnregLocals() is false, setting doNotEnreg flag for all locals.
Local V00 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V01 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V02 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V03 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V04 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V05 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V06 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V07 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V08 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V09 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V10 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V11 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V12 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V13 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V14 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V15 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V16 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Morphing BB01 of 'System.Program:Main(System.String[])'

fgMorphTree BB01, STMT00000 (before)
               [000000] -----------                         *  NOP       void  

fgMorphTree BB01, STMT00039 (before)
               [000096] --C-G------                         *  QMARK     void  
               [000092] ----G------    if                   +--*  EQ        int   
               [000090] n---G------                         |  +--*  IND       int   
               [000089] H----------                         |  |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----------                         |  \--*  CNS_INT   int    0
               [000095] --C-G------    if                   \--*  COLON     void  
               [000093] --C-G------ else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000094] ----------- then                       \--*  NOP       void  
Initializing arg info for 93.CALL:
Args for call [000093] CALL after AddFinalArgsAndDetermineABIInfo:

Morphing args for 93.CALL:
Args for [000093].CALL after fgMorphArgs:
OutgoingArgsStackSize is 32


Morphing BB02 of 'System.Program:Main(System.String[])'

fgMorphTree BB02, STMT00001 (before)
               [000001] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00002 (before)
               [000005] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] ----------- this                    +--*  LCL_ADDR  byref  V11 tmp1         [+0]
               [000002] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] ----------- arg2                    \--*  CNS_INT   int    0xF00
Initializing arg info for 5.CALL:
Args for call [000005] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000004].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, wellKnown[ThisPointer]]
CallArg[[000002].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8]
CallArg[[000003].CNS_INT int (By value), 1 reg: r8, byteAlignment=8]

Morphing args for 5.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000004] -----+-----                         *  LCL_ADDR  long   V11 tmp1         [+0]
Moved to late list
Deferred argument ('rdx'):
               [000002] H----+-----                         *  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
Moved to late list
Deferred argument ('r8'):
               [000003] -----+-----                         *  CNS_INT   int    0xF00
Moved to late list

Register placement order:    rcx rdx r8 
Args for [000005].CALL after fgMorphArgs:
CallArg[[000004].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed, wellKnown[ThisPointer]]
CallArg[[000002].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
CallArg[[000003].CNS_INT int (By value), 1 reg: r8, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00003 (before)
               [000007] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
MorphCopyBlock:
PrepareDst for [000007] have found a local var V01.
block assignment to morph:
               [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

fgMorphTree BB02, STMT00004 (before)
               [000011] --C-G------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] ----------- this                    +--*  LCL_ADDR  byref  V12 tmp2         [+0]
               [000008] H---------- arg1                    +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] ----------- arg2                    \--*  CNS_INT   int    0xF00
Initializing arg info for 11.CALL:
Args for call [000011] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000010].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, wellKnown[ThisPointer]]
CallArg[[000008].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8]
CallArg[[000009].CNS_INT int (By value), 1 reg: r8, byteAlignment=8]

Morphing args for 11.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000010] -----+-----                         *  LCL_ADDR  long   V12 tmp2         [+0]
Moved to late list
Deferred argument ('rdx'):
               [000008] H----+-----                         *  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
Moved to late list
Deferred argument ('r8'):
               [000009] -----+-----                         *  CNS_INT   int    0xF00
Moved to late list

Register placement order:    rcx rdx r8 
Args for [000011].CALL after fgMorphArgs:
CallArg[[000010].LCL_ADDR byref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed, wellKnown[ThisPointer]]
CallArg[[000008].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
CallArg[[000009].CNS_INT int (By value), 1 reg: r8, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00005 (before)
               [000013] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] -----------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
MorphCopyBlock:
PrepareDst for [000013] have found a local var V02.
block assignment to morph:
               [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

fgMorphTree BB02, STMT00006 (before)
               [000014] --C-G------                         *  CALL      void   System.Console:WriteLine()
Initializing arg info for 14.CALL:
Args for call [000014] CALL after AddFinalArgsAndDetermineABIInfo:

Morphing args for 14.CALL:
Args for [000014].CALL after fgMorphArgs:
OutgoingArgsStackSize is 32


fgMorphTree BB02, STMT00007 (before)
               [000015] -----------                         *  NO_OP     void  

fgMorphTree BB02, STMT00008 (before)
               [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000016] -----------                         \--*  CNS_INT   int    0

fgMorphTree BB02, STMT00009 (before)
               [000018] -----------                         *  NOP       void  

Morphing BB03 of 'System.Program:Main(System.String[])'

fgMorphTree BB03, STMT00012 (before)
               [000027] -----------                         *  NO_OP     void  

fgMorphTree BB03, STMT00013 (before)
               [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000028] -----------                         \--*  CNS_INT   int    0

fgMorphTree BB03, STMT00014 (before)
               [000030] -----------                         *  NOP       void  

Morphing BB04 of 'System.Program:Main(System.String[])'

fgMorphTree BB04, STMT00017 (before)
               [000039] -----------                         *  NO_OP     void  

fgMorphTree BB04, STMT00018 (before)
               [000040] -----------                         *  NO_OP     void  

fgMorphTree BB04, STMT00019 (before)
               [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

fgMorphTree BB04, STMT00020 (before)
               [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000045] -----------                         \--*  ADD       int   
               [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000044] -----------                            \--*  CNS_INT   int    1

Morphing BB05 of 'System.Program:Main(System.String[])'

fgMorphTree BB05, STMT00015 (before)
               [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----------                         \--*  LT        int   
               [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----------                            \--*  CNS_INT   int    1

fgMorphTree BB05, STMT00015 (after)
               [000034] DA---+-----                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----+-----                         \--*  LE        int   
               [000031] -----+-----                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----+-----                            \--*  CNS_INT   int    0

fgMorphTree BB05, STMT00016 (before)
               [000038] -----------                         *  JTRUE     void  
               [000037] -----------                         \--*  NE        int   
               [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
               [000036] -----------                            \--*  CNS_INT   int    0

Morphing BB06 of 'System.Program:Main(System.String[])'

fgMorphTree BB06, STMT00021 (before)
               [000047] -----------                         *  NO_OP     void  

fgMorphTree BB06, STMT00022 (before)
               [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

fgMorphTree BB06, STMT00023 (before)
               [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000052] -----------                         \--*  ADD       int   
               [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
               [000051] -----------                            \--*  CNS_INT   int    1

Morphing BB07 of 'System.Program:Main(System.String[])'

fgMorphTree BB07, STMT00010 (before)
               [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----------                         \--*  LT        int   
               [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----------                            \--*  CNS_INT   int    1

fgMorphTree BB07, STMT00010 (after)
               [000022] DA---+-----                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----+-----                         \--*  LE        int   
               [000019] -----+-----                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----+-----                            \--*  CNS_INT   int    0

fgMorphTree BB07, STMT00011 (before)
               [000026] -----------                         *  JTRUE     void  
               [000025] -----------                         \--*  NE        int   
               [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
               [000024] -----------                            \--*  CNS_INT   int    0

Morphing BB08 of 'System.Program:Main(System.String[])'

fgMorphTree BB08, STMT00024 (before)
               [000055] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000054] ----------- arg0                    \--*  CNS_STR   ref   <string constant>
Initializing arg info for 55.CALL:
Args for call [000055] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000054].CNS_STR ref (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 55.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000097] H----+-----                         *  CNS_INT(h) ref     'Ascii'

Moved to late list

Register placement order:    rcx 
Args for [000055].CALL after fgMorphArgs:
CallArg[[000097].CNS_INT ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB08, STMT00024 (after)
               [000055] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000097] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii'


fgMorphTree BB08, STMT00025 (before)
               [000056] -----------                         *  NO_OP     void  

fgMorphTree BB08, STMT00026 (before)
               [000060] DAC-G------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] --C-G------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000057] ----------- arg0                       +--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000058] ----------- arg1                       \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
Initializing arg info for 59.CALL:
Args for call [000059] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000057].LCL_VAR struct (By ref), 1 reg: rcx, byteAlignment=8, isStruct]
CallArg[[000058].LCL_VAR struct (By ref), 1 reg: rdx, byteAlignment=8, isStruct]

Morphing args for 59.CALL:
making an outgoing copy for struct arg

lvaGrabTemp returning 17 (V17 tmp7) called for by-value struct argument.
MorphCopyBlock:
PrepareDst for [000098] have found a local var V17.
block assignment to morph:
               [000098] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V17 tmp7         
               [000057] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000098] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V17 tmp7         
               [000057] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
making an outgoing copy for struct arg

lvaGrabTemp returning 18 (V18 tmp8) called for by-value struct argument.
MorphCopyBlock:
PrepareDst for [000099] have found a local var V18.
block assignment to morph:
               [000099] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V18 tmp8         
               [000058] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000099] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V18 tmp8         
               [000058] -----+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         

Sorting the arguments:

Local V17 should not be enregistered because: it is address exposed

Local V18 should not be enregistered because: it is address exposed

Register placement order:    rcx rdx 
Args for [000059].CALL after fgMorphArgs:
CallArg[[000100].LCL_ADDR struct (By ref), 1 reg: rcx, byteAlignment=8, isLate, tmpNum=V17, isTmp, processed, isStruct]
CallArg[[000101].LCL_ADDR struct (By ref), 1 reg: rdx, byteAlignment=8, isLate, tmpNum=V18, isTmp, processed, isStruct]
OutgoingArgsStackSize is 32


fgMorphTree BB08, STMT00026 (after)
               [000060] DACXG+-----                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] -ACXG+-----                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000098] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V17 tmp7         
               [000057] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000099] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V18 tmp8         
               [000058] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000100] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V17 tmp7         [+0]
               [000101] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V18 tmp8         [+0]

fgMorphTree BB08, STMT00027 (before)
               [000062] --C-G------                         *  CALL      void   System.Console:WriteLine(bool)
               [000061] ----------- arg0                    \--*  LCL_VAR   int    V13 tmp3         
Initializing arg info for 62.CALL:
Args for call [000062] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000061].LCL_VAR bool (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 62.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000061] -----+-----                         *  LCL_VAR   int    V13 tmp3         
Moved to late list

Register placement order:    rcx 
Args for [000062].CALL after fgMorphArgs:
CallArg[[000061].LCL_VAR bool (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB08, STMT00028 (before)
               [000063] -----------                         *  NO_OP     void  

fgMorphTree BB08, STMT00029 (before)
               [000065] --C-G------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000064] ----------- arg0                    \--*  CNS_STR   ref   <string constant>
Initializing arg info for 65.CALL:
Args for call [000065] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000064].CNS_STR ref (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 65.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000102] H----+-----                         *  CNS_INT(h) ref     'String'

Moved to late list

Register placement order:    rcx 
Args for [000065].CALL after fgMorphArgs:
CallArg[[000102].CNS_INT ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB08, STMT00029 (after)
               [000065] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000102] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'String'


fgMorphTree BB08, STMT00030 (before)
               [000066] -----------                         *  NO_OP     void  

fgMorphTree BB08, STMT00031 (before)
               [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000067] -----------                         \--*  CNS_STR   ref   <string constant>

fgMorphTree BB08, STMT00031 (after)
               [000068] DA---+-----                         *  STORE_LCL_VAR ref    V03 loc2         
               [000103] H----+-----                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


fgMorphTree BB08, STMT00032 (before)
               [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000070] H---------- arg0                       +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
               [000069] ----------- arg1                       \--*  CNS_INT   long   3
Initializing arg info for 71.CALL:
Args for call [000071] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000070].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000069].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8]

Morphing args for 71.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000070] H----+-----                         *  CNS_INT(h) long   0x7ff7c6bf3378 class
Moved to late list
Deferred argument ('rdx'):
               [000069] -----+-----                         *  CNS_INT   long   3
Moved to late list

Register placement order:    rcx rdx 
Args for [000071].CALL after fgMorphArgs:
CallArg[[000070].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000069].CNS_INT long (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB08, STMT00033 (before)
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H---------- arg0                       \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field
Initializing arg info for 76.CALL:
Args for call [000076] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000075].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8]

Morphing args for 76.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000075] H----+-----                         *  CNS_INT(h) long   0x7ff7c6bf36f8 field
Moved to late list

Register placement order:    rcx 
Args for [000076].CALL after fgMorphArgs:
CallArg[[000075].CNS_INT long (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32

MorphCopyBlock:
PrepareDst for [000078] have found a local var V15.
block assignment to morph:
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field
 src is not an L-value this requires a CopyBlock.
MorphCopyBlock (after):
               [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

fgMorphTree BB08, STMT00034 (before)
               [000077] --C-G------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] ----------- arg0                    +--*  LCL_VAR   ref    V14 tmp4         
               [000079] ----------- arg1                    \--*  LCL_VAR   struct<System.RuntimeFieldHandle, 8> V15 tmp5         
Initializing arg info for 77.CALL:
Args for call [000077] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000074].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000079].LCL_VAR struct (By value), 1 reg: rdx, byteAlignment=8, isStruct]

Morphing args for 77.CALL:

Local V15 should not be enregistered because: SwizzleArg

Sorting the arguments:
Deferred argument ('rcx'):
               [000074] -----+-----                         *  LCL_VAR   ref    V14 tmp4         
Moved to late list
Deferred argument ('rdx'):
               [000079] -----+-----                         *  LCL_FLD   ref    V15 tmp5         [+0]
Moved to late list

Register placement order:    rcx rdx 
Args for [000077].CALL after fgMorphArgs:
CallArg[[000074].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000079].LCL_FLD struct (By value), 1 reg: rdx, byteAlignment=8, isLate, processed, isStruct]
OutgoingArgsStackSize is 32


fgMorphTree BB08, STMT00034 (after)
               [000077] --CXG+-----                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] -----+----- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
               [000079] -----+----- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

fgMorphTree BB08, STMT00035 (before)
               [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

fgMorphTree BB08, STMT00036 (before)
               [000085] DAC-G------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000084] --C-G------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
               [000081] ----------- arg0                       +--*  LCL_VAR   ref    V03 loc2         
               [000082] ----------- arg1                       +--*  LCL_VAR   ref    V04 loc3         
               [000083] ----------- arg2                       \--*  CNS_INT   int    1
Initializing arg info for 84.CALL:
Args for call [000084] CALL after AddFinalArgsAndDetermineABIInfo:
CallArg[[000081].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8]
CallArg[[000082].LCL_VAR ref (By value), 1 reg: rdx, byteAlignment=8]
CallArg[[000083].CNS_INT int (By value), 1 reg: r8, byteAlignment=8]

Morphing args for 84.CALL:

Sorting the arguments:
Deferred argument ('rcx'):
               [000081] -----+-----                         *  LCL_VAR   ref    V03 loc2         
Moved to late list
Deferred argument ('rdx'):
               [000082] -----+-----                         *  LCL_VAR   ref    V04 loc3         
Moved to late list
Deferred argument ('r8'):
               [000083] -----+-----                         *  CNS_INT   int    1
Moved to late list

Register placement order:    rcx rdx r8 
Args for [000084].CALL after fgMorphArgs:
CallArg[[000081].LCL_VAR ref (By value), 1 reg: rcx, byteAlignment=8, isLate, processed]
CallArg[[000082].LCL_VAR ref (By value), 1 reg: rdx, byteAlignment=8, isLate, processed]
CallArg[[000083].CNS_INT int (By value), 1 reg: r8, byteAlignment=8, isLate, processed]
OutgoingArgsStackSize is 32


fgMorphTree BB08, STMT00037 (before)
               [000087] -----------                         *  NOP       void  

fgMorphTree BB08, STMT00038 (before)
               [000088] -----------                         *  RETURN    void  

*************** In fgMarkDemotedImplicitByRefArgs()

Expanding top-level qmark in BB01 (before)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----+-----                         *  NOP       void  

***** BB01
STMT00039 ( ??? ... ??? )
               [000096] --C-G+-----                         *  QMARK     void  
               [000092] J---G+-N---    if                   +--*  EQ        int   
               [000090] n---G+-----                         |  +--*  IND       int   
               [000089] H----+-----                         |  |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----+-----                         |  \--*  CNS_INT   int    0
               [000095] --C-G+?----    if                   \--*  COLON     void  
               [000093] --C-G+?---- else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000094] -----+?---- then                       \--*  NOP       void  

-------------------------------------------------------------------------------------------------------------------
New Basic Block BB09 [0008] created.
BB02 previous predecessor was BB01, now is BB09
Setting edge weights for BB01 -> BB09 to [0 .. 3.402823e+38]
New Basic Block BB10 [0009] created.
New Basic Block BB11 [0010] created.
Setting edge weights for BB01 -> BB10 to [0 .. 3.402823e+38]
Setting edge weights for BB10 -> BB11 to [0 .. 3.402823e+38]
Setting edge weights for BB11 -> BB09 to [0 .. 3.402823e+38]
Setting edge weights for BB10 -> BB09 to [0 .. 3.402823e+38]

removing useless STMT00039 ( ??? ... ??? )
               [000096] --C-G+-----                         *  QMARK     void  
               [000092] J---G+-N---    if                   +--*  EQ        int   
               [000090] n---G+-----                         |  +--*  IND       int   
               [000089] H----+-----                         |  |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----+-----                         |  \--*  CNS_INT   int    0
               [000095] --C-G+?----    if                   \--*  COLON     void  
               [000093] --C-G+?---- else                       +--*  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000094] -----+?---- then                       \--*  NOP       void  
 from BB01

Expanding top-level qmark in BB01 (after)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB10 [0009]  1       BB01                  1       [???..???)-> BB09 ( cond )                     internal 
BB11 [0010]  1       BB10                  0.50    [???..???)                                     internal 
BB09 [0008]  2       BB10,BB11             1       [???..???)                                     i internal hascall 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB10}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----+-----                         *  NOP       void  

------------ BB10 [???..???) -> BB09 (cond), preds={BB01} succs={BB11,BB09}

***** BB10
STMT00040 ( ??? ... ??? )
               [000104] ----G------                         *  JTRUE     void  
               [000092] J---G+-N---                         \--*  EQ        int   
               [000090] n---G+-----                            +--*  IND       int   
               [000089] H----+-----                            |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----+-----                            \--*  CNS_INT   int    0

------------ BB11 [???..???), preds={BB10} succs={BB09}

***** BB11
STMT00041 ( ??? ... ??? )
               [000093] --C-G+?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB09 [???..???), preds={BB10,BB11} succs={BB02}

-------------------------------------------------------------------------------------------------------------------

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB10 [0009]  1       BB01                  1       [???..???)-> BB09 ( cond )                     internal 
BB11 [0010]  1       BB10                  0.50    [???..???)                                     internal 
BB09 [0008]  2       BB10,BB11             1       [???..???)                                     i internal hascall 
BB02 [0001]  1       BB09                  1       [000..02C)-> BB07 (always)                     i hascall gcsafe 
BB03 [0002]  1       BB07                  1       [02C..032)-> BB05 (always)                     i bwd bwd-target 
BB04 [0003]  1       BB05                  1       [032..03E)                                     i bwd bwd-target 
BB05 [0004]  2       BB03,BB04             1       [03E..049)-> BB04 ( cond )                     i bwd bwd-src 
BB06 [0005]  1       BB05                  1       [049..054)                                     i bwd 
BB07 [0006]  2       BB02,BB06             1       [054..05F)-> BB03 ( cond )                     i bwd bwd-src 
BB08 [0007]  1       BB07                  1       [05F..0A4)        (return)                     i hascall gcsafe 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
Renumber BB10 to BB02
Renumber BB11 to BB03
Renumber BB09 to BB04
Renumber BB02 to BB05
Renumber BB03 to BB06
Renumber BB04 to BB07
Renumber BB05 to BB08
Renumber BB06 to BB09
Renumber BB07 to BB10
Renumber BB08 to BB11

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

New BlockSet epoch 2, # of blocks (including unused BB00): 12, bitset array size: 1 (short)

*************** Finishing PHASE Morph - Global
Trees after Morph - Global

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
               [000000] -----+-----                         *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00040 ( ??? ... ??? )
               [000104] ----G------                         *  JTRUE     void  
               [000092] J---G+-N---                         \--*  EQ        int   
               [000090] n---G+-----                            +--*  IND       int   
               [000089] H----+-----                            |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
               [000091] -----+-----                            \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00041 ( ??? ... ??? )
               [000093] --C-G+?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}

***** BB05
STMT00001 ( 0x000[E-] ... 0x000 )
               [000001] -----+-----                         *  NO_OP     void  

***** BB05
STMT00002 ( 0x001[E-] ... 0x010 )
               [000005] --CXG+-----                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000004] -----+----- this in rcx             +--*  LCL_ADDR  long   V11 tmp1         [+0]
               [000002] H----+----- arg1 in rdx             +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000003] -----+----- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00003 ( 0x010[--] ... ??? )
               [000007] DA--G+-----                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000006] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB05
STMT00004 ( 0x011[E-] ... 0x020 )
               [000011] --CXG+-----                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000010] -----+----- this in rcx             +--*  LCL_ADDR  long   V12 tmp2         [+0]
               [000008] H----+----- arg1 in rdx             +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
               [000009] -----+----- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00005 ( 0x020[--] ... ??? )
               [000013] DA--G+-----                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000012] ----G+-----                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB05
STMT00006 ( 0x021[E-] ... 0x026 )
               [000014] --CXG+-----                         *  CALL      void   System.Console:WriteLine()

***** BB05
STMT00007 ( 0x026[E-] ... ??? )
               [000015] -----+-----                         *  NO_OP     void  

***** BB05
STMT00008 ( 0x027[E-] ... 0x028 )
               [000017] DA---+-----                         *  STORE_LCL_VAR int    V05 loc4         
               [000016] -----+-----                         \--*  CNS_INT   int    0

***** BB05
STMT00009 ( 0x02A[E-] ... 0x02A )
               [000018] -----+-----                         *  NOP       void  

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}

***** BB06
STMT00012 ( 0x02C[E-] ... 0x02C )
               [000027] -----+-----                         *  NO_OP     void  

***** BB06
STMT00013 ( 0x02D[E-] ... 0x02E )
               [000029] DA---+-----                         *  STORE_LCL_VAR int    V06 loc5         
               [000028] -----+-----                         \--*  CNS_INT   int    0

***** BB06
STMT00014 ( 0x030[E-] ... 0x030 )
               [000030] -----+-----                         *  NOP       void  

------------ BB07 [032..03E), preds={BB08} succs={BB08}

***** BB07
STMT00017 ( 0x032[E-] ... 0x032 )
               [000039] -----+-----                         *  NO_OP     void  

***** BB07
STMT00018 ( 0x033[E-] ... 0x033 )
               [000040] -----+-----                         *  NO_OP     void  

***** BB07
STMT00019 ( 0x034[E-] ... 0x036 )
               [000042] DA---+-----                         *  STORE_LCL_VAR int    V07 loc6         
               [000041] -----+-----                         \--*  LCL_VAR   int    V06 loc5         

***** BB07
STMT00020 ( 0x038[E-] ... 0x03C )
               [000046] DA---+-----                         *  STORE_LCL_VAR int    V06 loc5         
               [000045] -----+-----                         \--*  ADD       int   
               [000043] -----+-----                            +--*  LCL_VAR   int    V07 loc6         
               [000044] -----+-----                            \--*  CNS_INT   int    1

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}

***** BB08
STMT00015 ( 0x03E[E-] ... 0x043 )
               [000034] DA---+-----                         *  STORE_LCL_VAR int    V08 loc7         
               [000033] -----+-----                         \--*  LE        int   
               [000031] -----+-----                            +--*  LCL_VAR   int    V06 loc5         
               [000032] -----+-----                            \--*  CNS_INT   int    0

***** BB08
STMT00016 ( 0x045[E-] ... 0x047 )
               [000038] -----+-----                         *  JTRUE     void  
               [000037] J----+-N---                         \--*  NE        int   
               [000035] -----+-----                            +--*  LCL_VAR   int    V08 loc7         
               [000036] -----+-----                            \--*  CNS_INT   int    0

------------ BB09 [049..054), preds={BB08} succs={BB10}

***** BB09
STMT00021 ( 0x049[E-] ... 0x049 )
               [000047] -----+-----                         *  NO_OP     void  

***** BB09
STMT00022 ( 0x04A[E-] ... 0x04C )
               [000049] DA---+-----                         *  STORE_LCL_VAR int    V07 loc6         
               [000048] -----+-----                         \--*  LCL_VAR   int    V05 loc4         

***** BB09
STMT00023 ( 0x04E[E-] ... 0x052 )
               [000053] DA---+-----                         *  STORE_LCL_VAR int    V05 loc4         
               [000052] -----+-----                         \--*  ADD       int   
               [000050] -----+-----                            +--*  LCL_VAR   int    V07 loc6         
               [000051] -----+-----                            \--*  CNS_INT   int    1

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}

***** BB10
STMT00010 ( 0x054[E-] ... 0x059 )
               [000022] DA---+-----                         *  STORE_LCL_VAR int    V09 loc8         
               [000021] -----+-----                         \--*  LE        int   
               [000019] -----+-----                            +--*  LCL_VAR   int    V05 loc4         
               [000020] -----+-----                            \--*  CNS_INT   int    0

***** BB10
STMT00011 ( 0x05B[E-] ... 0x05D )
               [000026] -----+-----                         *  JTRUE     void  
               [000025] J----+-N---                         \--*  NE        int   
               [000023] -----+-----                            +--*  LCL_VAR   int    V09 loc8         
               [000024] -----+-----                            \--*  CNS_INT   int    0

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}

***** BB11
STMT00024 ( 0x05F[E-] ... 0x069 )
               [000055] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000097] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii'


***** BB11
STMT00025 ( 0x069[E-] ... ??? )
               [000056] -----+-----                         *  NO_OP     void  

***** BB11
STMT00026 ( 0x06A[E-] ... 0x076 )
               [000060] DACXG+-----                         *  STORE_LCL_VAR int    V13 tmp3         
               [000059] -ACXG+-----                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
               [000098] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V17 tmp7         
               [000057] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000099] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V18 tmp8         
               [000058] -----+-----                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000100] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V17 tmp7         [+0]
               [000101] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V18 tmp8         [+0]

***** BB11
STMT00027 ( 0x071[--] ... ??? )
               [000062] --CXG+-----                         *  CALL      void   System.Console:WriteLine(bool)
               [000061] -----+----- arg0 in rcx             \--*  LCL_VAR   int    V13 tmp3         

***** BB11
STMT00028 ( 0x076[E-] ... ??? )
               [000063] -----+-----                         *  NO_OP     void  

***** BB11
STMT00029 ( 0x077[E-] ... 0x081 )
               [000065] --CXG+-----                         *  CALL      void   System.Console:WriteLine(System.String)
               [000102] H----+----- arg0 in rcx             \--*  CNS_INT(h) ref     'String'


***** BB11
STMT00030 ( 0x081[E-] ... ??? )
               [000066] -----+-----                         *  NO_OP     void  

***** BB11
STMT00031 ( 0x082[E-] ... 0x087 )
               [000068] DA---+-----                         *  STORE_LCL_VAR ref    V03 loc2         
               [000103] H----+-----                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


***** BB11
STMT00032 ( 0x088[E-] ... 0x099 )
               [000072] DACXG+-----                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000071] --CXG+-----                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
               [000070] H----+----- arg0 in rcx                +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
               [000069] -----+----- arg1 in rdx                \--*  CNS_INT   long   3

***** BB11
STMT00033 ( 0x08E[--] ... ??? )
               [000078] DACXG+-----                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
               [000076] --CXG+-----                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
               [000075] H----+----- arg0 in rcx                \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

***** BB11
STMT00034 ( ??? ... ??? )
               [000077] --CXG+-----                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000074] -----+----- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
               [000079] -----+----- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

***** BB11
STMT00035 ( 0x099[--] ... ??? )
               [000080] DA---+-----                         *  STORE_LCL_VAR ref    V04 loc3         
               [000073] -----+-----                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB11
STMT00036 ( 0x09A[E-] ... 0x0A2 )
               [000085] DACXG+-----                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000084] --CXG+-----                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
               [000081] -----+----- arg0 in rcx                +--*  LCL_VAR   ref    V03 loc2         
               [000082] -----+----- arg1 in rdx                +--*  LCL_VAR   ref    V04 loc3         
               [000083] -----+----- arg2 in r8                 \--*  CNS_INT   int    1

***** BB11
STMT00037 ( 0x0A2[--] ... ??? )
               [000087] -----+-----                         *  NOP       void  

***** BB11
STMT00038 ( 0x0A3[E-] ... 0x0A3 )
               [000088] -----+-----                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE GS Cookie
No GS security needed

*************** Finishing PHASE GS Cookie [no changes]

*************** Starting PHASE Compute edge weights (1, false)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe 
-----------------------------------------------------------------------------------------------------------------------------------------

 -- no profile data, so using default called count
 -- not optimizing or no profile data, so not computing edge weights

*************** Finishing PHASE Compute edge weights (1, false) [no changes]

*************** Starting PHASE Create EH funclets

*************** Finishing PHASE Create EH funclets [no changes]

*************** Starting PHASE Morph array ops
No multi-dimensional array references in the function

*************** Finishing PHASE Morph array ops [no changes]

*************** Starting PHASE Mark local vars

*************** In lvaMarkLocalVars()
*** lvaComputeRefCounts ***

*************** Finishing PHASE Mark local vars [no changes]

*************** Starting PHASE Find oper order
*************** In fgFindOperOrder()

*************** Finishing PHASE Find oper order
Trees after Find oper order

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
     (  0,  0) [000000] -----------                         *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00040 ( ??? ... ??? )
     (  9, 16) [000104] ----G------                         *  JTRUE     void  
     (  7, 14) [000092] J---G--N---                         \--*  EQ        int   
     (  5, 12) [000090] n---G------                            +--*  IND       int   
     (  3, 10) [000089] H----------                            |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
     (  1,  1) [000091] -----------                            \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00041 ( ??? ... ??? )
     ( 14,  5) [000093] --C-G-?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}

***** BB05
STMT00001 ( 0x000[E-] ... 0x000 )
     (  1,  1) [000001] -----------                         *  NO_OP     void  

***** BB05
STMT00002 ( 0x001[E-] ... 0x010 )
     ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
     (  3,  3) [000004] ----------- this in rcx             +--*  LCL_ADDR  long   V11 tmp1         [+0]
     (  3, 10) [000002] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
     (  1,  4) [000003] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00003 ( 0x010[--] ... ??? )
     ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
     (  9,  6) [000006] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB05
STMT00004 ( 0x011[E-] ... 0x020 )
     ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
     (  3,  3) [000010] ----------- this in rcx             +--*  LCL_ADDR  long   V12 tmp2         [+0]
     (  3, 10) [000008] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
     (  1,  4) [000009] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00005 ( 0x020[--] ... ??? )
     ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
     (  9,  6) [000012] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB05
STMT00006 ( 0x021[E-] ... 0x026 )
     ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine()

***** BB05
STMT00007 ( 0x026[E-] ... ??? )
     (  1,  1) [000015] -----------                         *  NO_OP     void  

***** BB05
STMT00008 ( 0x027[E-] ... 0x028 )
     (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
     (  1,  1) [000016] -----------                         \--*  CNS_INT   int    0

***** BB05
STMT00009 ( 0x02A[E-] ... 0x02A )
     (  0,  0) [000018] -----------                         *  NOP       void  

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}

***** BB06
STMT00012 ( 0x02C[E-] ... 0x02C )
     (  1,  1) [000027] -----------                         *  NO_OP     void  

***** BB06
STMT00013 ( 0x02D[E-] ... 0x02E )
     (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
     (  1,  1) [000028] -----------                         \--*  CNS_INT   int    0

***** BB06
STMT00014 ( 0x030[E-] ... 0x030 )
     (  0,  0) [000030] -----------                         *  NOP       void  

------------ BB07 [032..03E), preds={BB08} succs={BB08}

***** BB07
STMT00017 ( 0x032[E-] ... 0x032 )
     (  1,  1) [000039] -----------                         *  NO_OP     void  

***** BB07
STMT00018 ( 0x033[E-] ... 0x033 )
     (  1,  1) [000040] -----------                         *  NO_OP     void  

***** BB07
STMT00019 ( 0x034[E-] ... 0x036 )
     (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
     (  3,  2) [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

***** BB07
STMT00020 ( 0x038[E-] ... 0x03C )
     (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
     (  5,  4) [000045] -----------                         \--*  ADD       int   
     (  3,  2) [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
     (  1,  1) [000044] -----------                            \--*  CNS_INT   int    1

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}

***** BB08
STMT00015 ( 0x03E[E-] ... 0x043 )
     ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
     (  8,  4) [000033] -----------                         \--*  LE        int   
     (  3,  2) [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
     (  1,  1) [000032] -----------                            \--*  CNS_INT   int    0

***** BB08
STMT00016 ( 0x045[E-] ... 0x047 )
     (  7,  6) [000038] -----------                         *  JTRUE     void  
     (  5,  4) [000037] J------N---                         \--*  NE        int   
     (  3,  2) [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
     (  1,  1) [000036] -----------                            \--*  CNS_INT   int    0

------------ BB09 [049..054), preds={BB08} succs={BB10}

***** BB09
STMT00021 ( 0x049[E-] ... 0x049 )
     (  1,  1) [000047] -----------                         *  NO_OP     void  

***** BB09
STMT00022 ( 0x04A[E-] ... 0x04C )
     (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
     (  3,  2) [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

***** BB09
STMT00023 ( 0x04E[E-] ... 0x052 )
     (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
     (  5,  4) [000052] -----------                         \--*  ADD       int   
     (  3,  2) [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
     (  1,  1) [000051] -----------                            \--*  CNS_INT   int    1

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}

***** BB10
STMT00010 ( 0x054[E-] ... 0x059 )
     ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
     (  8,  4) [000021] -----------                         \--*  LE        int   
     (  3,  2) [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
     (  1,  1) [000020] -----------                            \--*  CNS_INT   int    0

***** BB10
STMT00011 ( 0x05B[E-] ... 0x05D )
     (  7,  6) [000026] -----------                         *  JTRUE     void  
     (  5,  4) [000025] J------N---                         \--*  NE        int   
     (  3,  2) [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
     (  1,  1) [000024] -----------                            \--*  CNS_INT   int    0

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}

***** BB11
STMT00024 ( 0x05F[E-] ... 0x069 )
     ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
     (  3, 10) [000097] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii'


***** BB11
STMT00025 ( 0x069[E-] ... ??? )
     (  1,  1) [000056] -----------                         *  NO_OP     void  

***** BB11
STMT00026 ( 0x06A[E-] ... 0x076 )
     ( 68, 42) [000060] DACXG------                         *  STORE_LCL_VAR int    V13 tmp3         
     ( 64, 39) [000059] -ACXG------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
     ( 19, 13) [000098] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V17 tmp7         
     (  9,  6) [000057] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
     ( 19, 13) [000099] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V18 tmp8         
     (  9,  6) [000058] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
     (  3,  3) [000100] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V17 tmp7         [+0]
     (  3,  3) [000101] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V18 tmp8         [+0]

***** BB11
STMT00027 ( 0x071[--] ... ??? )
     ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
     (  3,  2) [000061] ----------- arg0 in rcx             \--*  LCL_VAR   int    V13 tmp3         

***** BB11
STMT00028 ( 0x076[E-] ... ??? )
     (  1,  1) [000063] -----------                         *  NO_OP     void  

***** BB11
STMT00029 ( 0x077[E-] ... 0x081 )
     ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
     (  3, 10) [000102] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'String'


***** BB11
STMT00030 ( 0x081[E-] ... ??? )
     (  1,  1) [000066] -----------                         *  NO_OP     void  

***** BB11
STMT00031 ( 0x082[E-] ... 0x087 )
     (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
     (  3, 10) [000103] H----------                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


***** BB11
STMT00032 ( 0x088[E-] ... 0x099 )
     ( 22, 21) [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
     ( 18, 18) [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
     (  3, 10) [000070] H---------- arg0 in rcx                +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
     (  1,  1) [000069] ----------- arg1 in rdx                \--*  CNS_INT   long   3

***** BB11
STMT00033 ( 0x08E[--] ... ??? )
     ( 27, 23) [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
     ( 17, 16) [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
     (  3, 10) [000075] H---------- arg0 in rcx                \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

***** BB11
STMT00034 ( ??? ... ??? )
     ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
     (  3,  2) [000074] ----------- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
     (  3,  4) [000079] ----------- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

***** BB11
STMT00035 ( 0x099[--] ... ??? )
     (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
     (  3,  2) [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB11
STMT00036 ( 0x09A[E-] ... 0x0A2 )
     ( 25, 16) [000085] DACXG------                         *  STORE_LCL_VAR ref    V16 tmp6         
     ( 21, 13) [000084] --CXG------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
     (  3,  2) [000081] ----------- arg0 in rcx                +--*  LCL_VAR   ref    V03 loc2         
     (  3,  2) [000082] ----------- arg1 in rdx                +--*  LCL_VAR   ref    V04 loc3         
     (  1,  1) [000083] ----------- arg2 in r8                 \--*  CNS_INT   int    1

***** BB11
STMT00037 ( 0x0A2[--] ... ??? )
     (  0,  0) [000087] -----------                         *  NOP       void  

***** BB11
STMT00038 ( 0x0A3[E-] ... 0x0A3 )
     (  0,  0) [000088] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Set block order
*************** In fgSetBlockOrder()
The biggest BB has    8 tree nodes

*************** Finishing PHASE Set block order
Trees after Set block order

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 ( ??? ... ??? )
N001 (  0,  0) [000000] -----------                         *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00040 ( ??? ... ??? )
N005 (  9, 16) [000104] ----G------                         *  JTRUE     void  
N004 (  7, 14) [000092] J---G--N---                         \--*  EQ        int   
N002 (  5, 12) [000090] n---G------                            +--*  IND       int   
N001 (  3, 10) [000089] H----------                            |  \--*  CNS_INT(h) long   0x7ff7c6a33128 global ptr
N003 (  1,  1) [000091] -----------                            \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00041 ( ??? ... ??? )
N001 ( 14,  5) [000093] --C-G-?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}

***** BB05
STMT00001 ( 0x000[E-] ... 0x000 )
N001 (  1,  1) [000001] -----------                         *  NO_OP     void  

***** BB05
STMT00002 ( 0x001[E-] ... 0x010 )
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
N001 (  3,  3) [000004] ----------- this in rcx             +--*  LCL_ADDR  long   V11 tmp1         [+0]
N002 (  3, 10) [000002] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000003] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00003 ( 0x010[--] ... ??? )
N002 ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
N001 (  9,  6) [000006] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         

***** BB05
STMT00004 ( 0x011[E-] ... 0x020 )
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
N001 (  3,  3) [000010] ----------- this in rcx             +--*  LCL_ADDR  long   V12 tmp2         [+0]
N002 (  3, 10) [000008] H---------- arg1 in rdx             +--*  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000009] ----------- arg2 in r8              \--*  CNS_INT   int    0xF00

***** BB05
STMT00005 ( 0x020[--] ... ??? )
N002 ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
N001 (  9,  6) [000012] ----G------                         \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         

***** BB05
STMT00006 ( 0x021[E-] ... 0x026 )
N001 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine()

***** BB05
STMT00007 ( 0x026[E-] ... ??? )
N001 (  1,  1) [000015] -----------                         *  NO_OP     void  

***** BB05
STMT00008 ( 0x027[E-] ... 0x028 )
N002 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
N001 (  1,  1) [000016] -----------                         \--*  CNS_INT   int    0

***** BB05
STMT00009 ( 0x02A[E-] ... 0x02A )
N001 (  0,  0) [000018] -----------                         *  NOP       void  

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}

***** BB06
STMT00012 ( 0x02C[E-] ... 0x02C )
N001 (  1,  1) [000027] -----------                         *  NO_OP     void  

***** BB06
STMT00013 ( 0x02D[E-] ... 0x02E )
N002 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
N001 (  1,  1) [000028] -----------                         \--*  CNS_INT   int    0

***** BB06
STMT00014 ( 0x030[E-] ... 0x030 )
N001 (  0,  0) [000030] -----------                         *  NOP       void  

------------ BB07 [032..03E), preds={BB08} succs={BB08}

***** BB07
STMT00017 ( 0x032[E-] ... 0x032 )
N001 (  1,  1) [000039] -----------                         *  NO_OP     void  

***** BB07
STMT00018 ( 0x033[E-] ... 0x033 )
N001 (  1,  1) [000040] -----------                         *  NO_OP     void  

***** BB07
STMT00019 ( 0x034[E-] ... 0x036 )
N002 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
N001 (  3,  2) [000041] -----------                         \--*  LCL_VAR   int    V06 loc5         

***** BB07
STMT00020 ( 0x038[E-] ... 0x03C )
N004 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
N003 (  5,  4) [000045] -----------                         \--*  ADD       int   
N001 (  3,  2) [000043] -----------                            +--*  LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000044] -----------                            \--*  CNS_INT   int    1

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}

***** BB08
STMT00015 ( 0x03E[E-] ... 0x043 )
N004 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
N003 (  8,  4) [000033] -----------                         \--*  LE        int   
N001 (  3,  2) [000031] -----------                            +--*  LCL_VAR   int    V06 loc5         
N002 (  1,  1) [000032] -----------                            \--*  CNS_INT   int    0

***** BB08
STMT00016 ( 0x045[E-] ... 0x047 )
N004 (  7,  6) [000038] -----------                         *  JTRUE     void  
N003 (  5,  4) [000037] J------N---                         \--*  NE        int   
N001 (  3,  2) [000035] -----------                            +--*  LCL_VAR   int    V08 loc7         
N002 (  1,  1) [000036] -----------                            \--*  CNS_INT   int    0

------------ BB09 [049..054), preds={BB08} succs={BB10}

***** BB09
STMT00021 ( 0x049[E-] ... 0x049 )
N001 (  1,  1) [000047] -----------                         *  NO_OP     void  

***** BB09
STMT00022 ( 0x04A[E-] ... 0x04C )
N002 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
N001 (  3,  2) [000048] -----------                         \--*  LCL_VAR   int    V05 loc4         

***** BB09
STMT00023 ( 0x04E[E-] ... 0x052 )
N004 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
N003 (  5,  4) [000052] -----------                         \--*  ADD       int   
N001 (  3,  2) [000050] -----------                            +--*  LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000051] -----------                            \--*  CNS_INT   int    1

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}

***** BB10
STMT00010 ( 0x054[E-] ... 0x059 )
N004 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
N003 (  8,  4) [000021] -----------                         \--*  LE        int   
N001 (  3,  2) [000019] -----------                            +--*  LCL_VAR   int    V05 loc4         
N002 (  1,  1) [000020] -----------                            \--*  CNS_INT   int    0

***** BB10
STMT00011 ( 0x05B[E-] ... 0x05D )
N004 (  7,  6) [000026] -----------                         *  JTRUE     void  
N003 (  5,  4) [000025] J------N---                         \--*  NE        int   
N001 (  3,  2) [000023] -----------                            +--*  LCL_VAR   int    V09 loc8         
N002 (  1,  1) [000024] -----------                            \--*  CNS_INT   int    0

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}

***** BB11
STMT00024 ( 0x05F[E-] ... 0x069 )
N002 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
N001 (  3, 10) [000097] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'Ascii'


***** BB11
STMT00025 ( 0x069[E-] ... ??? )
N001 (  1,  1) [000056] -----------                         *  NO_OP     void  

***** BB11
STMT00026 ( 0x06A[E-] ... 0x076 )
N008 ( 68, 42) [000060] DACXG------                         *  STORE_LCL_VAR int    V13 tmp3         
N007 ( 64, 39) [000059] -ACXG------                         \--*  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
N002 ( 19, 13) [000098] DA--------- arg0 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V17 tmp7         
N001 (  9,  6) [000057] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
N004 ( 19, 13) [000099] DA--------- arg1 setup                 +--*  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V18 tmp8         
N003 (  9,  6) [000058] -----------                            |  \--*  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
N005 (  3,  3) [000100] ----------- arg0 in rcx                +--*  LCL_ADDR  long   V17 tmp7         [+0]
N006 (  3,  3) [000101] ----------- arg1 in rdx                \--*  LCL_ADDR  long   V18 tmp8         [+0]

***** BB11
STMT00027 ( 0x071[--] ... ??? )
N002 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
N001 (  3,  2) [000061] ----------- arg0 in rcx             \--*  LCL_VAR   int    V13 tmp3         

***** BB11
STMT00028 ( 0x076[E-] ... ??? )
N001 (  1,  1) [000063] -----------                         *  NO_OP     void  

***** BB11
STMT00029 ( 0x077[E-] ... 0x081 )
N002 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
N001 (  3, 10) [000102] H---------- arg0 in rcx             \--*  CNS_INT(h) ref     'String'


***** BB11
STMT00030 ( 0x081[E-] ... ??? )
N001 (  1,  1) [000066] -----------                         *  NO_OP     void  

***** BB11
STMT00031 ( 0x082[E-] ... 0x087 )
N002 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
N001 (  3, 10) [000103] H----------                         \--*  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '


***** BB11
STMT00032 ( 0x088[E-] ... 0x099 )
N004 ( 22, 21) [000072] DACXG------                         *  STORE_LCL_VAR ref    V14 tmp4         
N003 ( 18, 18) [000071] --CXG------                         \--*  CALL help ref    CORINFO_HELP_NEWARR_1_VC
N001 (  3, 10) [000070] H---------- arg0 in rcx                +--*  CNS_INT(h) long   0x7ff7c6bf3378 class
N002 (  1,  1) [000069] ----------- arg1 in rdx                \--*  CNS_INT   long   3

***** BB11
STMT00033 ( 0x08E[--] ... ??? )
N003 ( 27, 23) [000078] DACXG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N002 ( 17, 16) [000076] --CXG------                         \--*  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
N001 (  3, 10) [000075] H---------- arg0 in rcx                \--*  CNS_INT(h) long   0x7ff7c6bf36f8 field

***** BB11
STMT00034 ( ??? ... ??? )
N003 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
N001 (  3,  2) [000074] ----------- arg0 in rcx             +--*  LCL_VAR   ref    V14 tmp4         
N002 (  3,  4) [000079] ----------- arg1 in rdx             \--*  LCL_FLD   ref    V15 tmp5         [+0]

***** BB11
STMT00035 ( 0x099[--] ... ??? )
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
N001 (  3,  2) [000073] -----------                         \--*  LCL_VAR   ref    V14 tmp4         

***** BB11
STMT00036 ( 0x09A[E-] ... 0x0A2 )
N005 ( 25, 16) [000085] DACXG------                         *  STORE_LCL_VAR ref    V16 tmp6         
N004 ( 21, 13) [000084] --CXG------                         \--*  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
N001 (  3,  2) [000081] ----------- arg0 in rcx                +--*  LCL_VAR   ref    V03 loc2         
N002 (  3,  2) [000082] ----------- arg1 in rdx                +--*  LCL_VAR   ref    V04 loc3         
N003 (  1,  1) [000083] ----------- arg2 in r8                 \--*  CNS_INT   int    1

***** BB11
STMT00037 ( 0x0A2[--] ... ??? )
N001 (  0,  0) [000087] -----------                         *  NOP       void  

***** BB11
STMT00038 ( 0x0A3[E-] ... 0x0A3 )
N001 (  0,  0) [000088] -----------                         *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Stress gtSplitTree

*************** Finishing PHASE Stress gtSplitTree [no changes]

*************** Starting PHASE Expand runtime lookups

*************** Finishing PHASE Expand runtime lookups [no changes]

*************** Starting PHASE Expand static init
Nothing to expand.

*************** Finishing PHASE Expand static init [no changes]

*************** Starting PHASE Expand TLS access
Nothing to expand.

*************** Finishing PHASE Expand TLS access [no changes]

*************** Starting PHASE Insert GC Polls

*************** Finishing PHASE Insert GC Polls [no changes]

*************** Starting PHASE Determine first cold block
No procedure splitting will be done for this method

*************** Finishing PHASE Determine first cold block [no changes]

*************** Starting PHASE Rationalize IR

*************** Finishing PHASE Rationalize IR
Trees after Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe LIR 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target LIR 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target LIR 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src LIR 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd LIR 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src LIR 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] -----------                            NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  3, 10) [000089] H----------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr
                                                            /--*  t89    long   
N002 (  5, 12) [000090] n---G------                   t90 = *  IND       int   
N003 (  1,  1) [000091] -----------                   t91 =    CNS_INT   int    0
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N004 (  7, 14) [000092] J---G--N---                   t92 = *  EQ        int   
                                                            /--*  t92    int    
N005 (  9, 16) [000104] ----G------                         *  JTRUE     void  

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
               [000105] -----------                            IL_OFFSET void   INLRT @ 0x000[E-]
N001 (  1,  1) [000001] -----------                            NO_OP     void  
               [000106] -----------                            IL_OFFSET void   INLRT @ 0x001[E-]
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t4     long   this in rcx
                                                            +--*  t2     long   arg1 in rdx
                                                            +--*  t3     int    arg2 in r8
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000107] -----------                            IL_OFFSET void   INLRT @ 0x010[--]
N001 (  9,  6) [000006] -----------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
                                                            /--*  t6     struct 
N002 ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000108] -----------                            IL_OFFSET void   INLRT @ 0x011[E-]
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t10    long   this in rcx
                                                            +--*  t8     long   arg1 in rdx
                                                            +--*  t9     int    arg2 in r8
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000109] -----------                            IL_OFFSET void   INLRT @ 0x020[--]
N001 (  9,  6) [000012] -----------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
                                                            /--*  t12    struct 
N002 ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000110] -----------                            IL_OFFSET void   INLRT @ 0x021[E-]
N001 ( 14,  5) [000014] --CXG------                            CALL      void   System.Console:WriteLine()
               [000111] -----------                            IL_OFFSET void   INLRT @ 0x026[E-]
N001 (  1,  1) [000015] -----------                            NO_OP     void  
               [000112] -----------                            IL_OFFSET void   INLRT @ 0x027[E-]
N001 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0
                                                            /--*  t16    int    
N002 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000113] -----------                            IL_OFFSET void   INLRT @ 0x02A[E-]
N001 (  0,  0) [000018] -----------                            NOP       void  

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
               [000114] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-]
N001 (  1,  1) [000027] -----------                            NO_OP     void  
               [000115] -----------                            IL_OFFSET void   INLRT @ 0x02D[E-]
N001 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0
                                                            /--*  t28    int    
N002 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000116] -----------                            IL_OFFSET void   INLRT @ 0x030[E-]
N001 (  0,  0) [000030] -----------                            NOP       void  

------------ BB07 [032..03E), preds={BB08} succs={BB08}
               [000117] -----------                            IL_OFFSET void   INLRT @ 0x032[E-]
N001 (  1,  1) [000039] -----------                            NO_OP     void  
               [000118] -----------                            IL_OFFSET void   INLRT @ 0x033[E-]
N001 (  1,  1) [000040] -----------                            NO_OP     void  
               [000119] -----------                            IL_OFFSET void   INLRT @ 0x034[E-]
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5         
                                                            /--*  t41    int    
N002 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000120] -----------                            IL_OFFSET void   INLRT @ 0x038[E-]
N001 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000044] -----------                   t44 =    CNS_INT   int    1
                                                            /--*  t43    int    
                                                            +--*  t44    int    
N003 (  5,  4) [000045] -----------                   t45 = *  ADD       int   
                                                            /--*  t45    int    
N004 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
               [000121] -----------                            IL_OFFSET void   INLRT @ 0x03E[E-]
N001 (  3,  2) [000031] -----------                   t31 =    LCL_VAR   int    V06 loc5         
N002 (  1,  1) [000032] -----------                   t32 =    CNS_INT   int    0
                                                            /--*  t31    int    
                                                            +--*  t32    int    
N003 (  8,  4) [000033] -----------                   t33 = *  LE        int   
                                                            /--*  t33    int    
N004 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000122] -----------                            IL_OFFSET void   INLRT @ 0x045[E-]
N001 (  3,  2) [000035] -----------                   t35 =    LCL_VAR   int    V08 loc7         
N002 (  1,  1) [000036] -----------                   t36 =    CNS_INT   int    0
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N003 (  5,  4) [000037] J------N---                   t37 = *  NE        int   
                                                            /--*  t37    int    
N004 (  7,  6) [000038] -----------                         *  JTRUE     void  

------------ BB09 [049..054), preds={BB08} succs={BB10}
               [000123] -----------                            IL_OFFSET void   INLRT @ 0x049[E-]
N001 (  1,  1) [000047] -----------                            NO_OP     void  
               [000124] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-]
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4         
                                                            /--*  t48    int    
N002 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000125] -----------                            IL_OFFSET void   INLRT @ 0x04E[E-]
N001 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000051] -----------                   t51 =    CNS_INT   int    1
                                                            /--*  t50    int    
                                                            +--*  t51    int    
N003 (  5,  4) [000052] -----------                   t52 = *  ADD       int   
                                                            /--*  t52    int    
N004 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
               [000126] -----------                            IL_OFFSET void   INLRT @ 0x054[E-]
N001 (  3,  2) [000019] -----------                   t19 =    LCL_VAR   int    V05 loc4         
N002 (  1,  1) [000020] -----------                   t20 =    CNS_INT   int    0
                                                            /--*  t19    int    
                                                            +--*  t20    int    
N003 (  8,  4) [000021] -----------                   t21 = *  LE        int   
                                                            /--*  t21    int    
N004 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000127] -----------                            IL_OFFSET void   INLRT @ 0x05B[E-]
N001 (  3,  2) [000023] -----------                   t23 =    LCL_VAR   int    V09 loc8         
N002 (  1,  1) [000024] -----------                   t24 =    CNS_INT   int    0
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N003 (  5,  4) [000025] J------N---                   t25 = *  NE        int   
                                                            /--*  t25    int    
N004 (  7,  6) [000026] -----------                         *  JTRUE     void  

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}
               [000128] -----------                            IL_OFFSET void   INLRT @ 0x05F[E-]
N001 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'

                                                            /--*  t97    ref    arg0 in rcx
N002 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000129] -----------                            IL_OFFSET void   INLRT @ 0x069[E-]
N001 (  1,  1) [000056] -----------                            NO_OP     void  
               [000130] -----------                            IL_OFFSET void   INLRT @ 0x06A[E-]
N001 (  9,  6) [000057] -----------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
                                                            /--*  t57    struct 
N002 ( 19, 13) [000098] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V17 tmp7         
N003 (  9,  6) [000058] -----------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
                                                            /--*  t58    struct 
N004 ( 19, 13) [000099] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V18 tmp8         
N005 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0]
N006 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0]
                                                            /--*  t100   long   arg0 in rcx
                                                            +--*  t101   long   arg1 in rdx
N007 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t59    int    
N008 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000131] -----------                            IL_OFFSET void   INLRT @ 0x071[--]
N001 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t61    int    arg0 in rcx
N002 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
               [000132] -----------                            IL_OFFSET void   INLRT @ 0x076[E-]
N001 (  1,  1) [000063] -----------                            NO_OP     void  
               [000133] -----------                            IL_OFFSET void   INLRT @ 0x077[E-]
N001 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'

                                                            /--*  t102   ref    arg0 in rcx
N002 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000134] -----------                            IL_OFFSET void   INLRT @ 0x081[E-]
N001 (  1,  1) [000066] -----------                            NO_OP     void  
               [000135] -----------                            IL_OFFSET void   INLRT @ 0x082[E-]
N001 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t103   ref    
N002 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000136] -----------                            IL_OFFSET void   INLRT @ 0x088[E-]
N001 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3
                                                            /--*  t70    long   arg0 in rcx
                                                            +--*  t69    long   arg1 in rdx
N003 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t71    ref    
N004 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000137] -----------                            IL_OFFSET void   INLRT @ 0x08E[--]
N001 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field
                                                            /--*  t75    long   arg0 in rcx
N002 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t76    struct 
N003 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N001 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4         
N002 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t74    ref    arg0 in rcx
                                                            +--*  t79    ref    arg1 in rdx
N003 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000138] -----------                            IL_OFFSET void   INLRT @ 0x099[--]
N001 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t73    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000139] -----------                            IL_OFFSET void   INLRT @ 0x09A[E-]
N001 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2         
N002 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3         
N003 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1
                                                            /--*  t81    ref    arg0 in rcx
                                                            +--*  t82    ref    arg1 in rdx
                                                            +--*  t83    int    arg2 in r8
N004 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t84    ref    
N005 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000140] -----------                            IL_OFFSET void   INLRT @ 0x0A2[--]
N001 (  0,  0) [000087] -----------                            NOP       void  
               [000141] -----------                            IL_OFFSET void   INLRT @ 0x0A3[E-]
N001 (  0,  0) [000088] -----------                            RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Do 'simple' lowering

*************** Finishing PHASE Do 'simple' lowering [no changes]

*************** Starting PHASE Lowering nodeinfo
compEnregLocals() is false, setting doNotEnreg flag for all locals.
Local V00 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V01 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V02 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V03 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V04 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V05 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V06 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V07 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V08 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V09 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V10 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V11 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V12 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V13 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V14 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V15 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V16 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V17 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V18 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set
Lowering JTRUE:
N001 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr
                                                            /--*  t89    long   
N002 (  5, 12) [000090] nc--G------                   t90 = *  IND       int   
N003 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N004 (  7, 14) [000092] J---G--N---                   t92 = *  EQ        int   
                                                            /--*  t92    int    
N005 (  9, 16) [000104] ----G------                         *  JTRUE     void  

Lowering condition:
N001 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr
                                                            /--*  t89    long   
N002 (  5, 12) [000090] nc--G------                   t90 = *  IND       int   
N003 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N004 (  7, 14) [000092] J---G--N---                   t92 = *  EQ        int   

Lowering JTRUE Result:
N001 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr
                                                            /--*  t89    long   
N002 (  5, 12) [000090] nc--G------                   t90 = *  IND       int   
N003 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N004 (  7, 14) [000092] ----G--N---                         *  CMP       void  
N005 (  9, 16) [000104] ----G------                            JCC       void   cond=UEQ

lowering call (before):
N001 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

args:
======

late:
======
Bumping outgoing arg space size from 0 to 32 for [000093]
lowering call (after):
N001 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

lowering call (before):
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t4     long   this in rcx
                                                            +--*  t2     long   arg1 in rdx
                                                            +--*  t3     int    arg2 in r8
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

args:
======

late:
======
lowering arg : N001 (  3,  3) [000004] -----------                         *  LCL_ADDR  long   V11 tmp1         [+0]
new node is :                [000142] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N002 (  3, 10) [000002] H----------                         *  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
new node is :                [000143] -----------                         *  PUTARG_REG long   REG rdx

lowering arg : N003 (  1,  4) [000003] -----------                         *  CNS_INT   int    0xF00
new node is :                [000144] -----------                         *  PUTARG_REG int    REG r8

results of lowering call:
N001 (  3, 10) [000145] H----------                  t145 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t145   long   
N002 (  5, 12) [000146] n---G------                  t146 = *  IND       long  
lowering call (after):
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
                                                            /--*  t4     long   
               [000142] -----------                  t142 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t2     long   
               [000143] -----------                  t143 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t3     int    
               [000144] -----------                  t144 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000145] Hc---------                  t145 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t145   long   
N002 (  5, 12) [000146] nc--G------                  t146 = *  IND       long   REG NA
                                                            /--*  t142   long   this in rcx
                                                            +--*  t143   long   arg1 in rdx
                                                            +--*  t144   int    arg2 in r8
                                                            +--*  t146   long   control expr
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

lowering store lcl var/field (before):
N001 (  9,  6) [000006] -----------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
                                                            /--*  t6     struct 
N002 ( 19, 13) [000007] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V01 loc0         


Local V01 should not be enregistered because: written/read in a block op

Local V11 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N001 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
               [000147] Dc---------                  t147 =    LCL_ADDR  byref  V01 loc0         [+0]
                                                            /--*  t147   byref  
                                                            +--*  t6     struct 
N002 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering call (before):
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t10    long   this in rcx
                                                            +--*  t8     long   arg1 in rdx
                                                            +--*  t9     int    arg2 in r8
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

args:
======

late:
======
lowering arg : N001 (  3,  3) [000010] -----------                         *  LCL_ADDR  long   V12 tmp2         [+0]
new node is :                [000148] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N002 (  3, 10) [000008] H----------                         *  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
new node is :                [000149] -----------                         *  PUTARG_REG long   REG rdx

lowering arg : N003 (  1,  4) [000009] -----------                         *  CNS_INT   int    0xF00
new node is :                [000150] -----------                         *  PUTARG_REG int    REG r8

results of lowering call:
N001 (  3, 10) [000151] H----------                  t151 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t151   long   
N002 (  5, 12) [000152] n---G------                  t152 = *  IND       long  
lowering call (after):
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
                                                            /--*  t10    long   
               [000148] -----------                  t148 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t8     long   
               [000149] -----------                  t149 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t9     int    
               [000150] -----------                  t150 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000151] Hc---------                  t151 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t151   long   
N002 (  5, 12) [000152] nc--G------                  t152 = *  IND       long   REG NA
                                                            /--*  t148   long   this in rcx
                                                            +--*  t149   long   arg1 in rdx
                                                            +--*  t150   int    arg2 in r8
                                                            +--*  t152   long   control expr
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this

lowering store lcl var/field (before):
N001 (  9,  6) [000012] -----------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
                                                            /--*  t12    struct 
N002 ( 19, 13) [000013] DA--G------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16> V02 loc1         


Local V02 should not be enregistered because: written/read in a block op

Local V12 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N001 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
               [000153] Dc---------                  t153 =    LCL_ADDR  byref  V02 loc1         [+0]
                                                            /--*  t153   byref  
                                                            +--*  t12    struct 
N002 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering call (before):
N001 ( 14,  5) [000014] --CXG------                            CALL      void   System.Console:WriteLine()

args:
======

late:
======
results of lowering call:
N001 (  3, 10) [000154] H----------                  t154 =    CNS_INT(h) long   0x7ff7c6bafba0 ftn
                                                            /--*  t154   long   
N002 (  5, 12) [000155] n---G------                  t155 = *  IND       long  
lowering call (after):
N001 (  3, 10) [000154] Hc---------                  t154 =    CNS_INT(h) long   0x7ff7c6bafba0 ftn
                                                            /--*  t154   long   
N002 (  5, 12) [000155] nc--G------                  t155 = *  IND       long   REG NA
                                                            /--*  t155   long   control expr
N001 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine()

lowering store lcl var/field (before):
N001 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0
                                                            /--*  t16    int    
N002 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         

lowering store lcl var/field (after):
N001 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0
                                                            /--*  t16    int    
N002 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         

lowering store lcl var/field (before):
N001 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0
                                                            /--*  t28    int    
N002 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         

lowering store lcl var/field (after):
N001 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0
                                                            /--*  t28    int    
N002 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         

lowering store lcl var/field (before):
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5         
                                                            /--*  t41    int    
N002 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         

lowering store lcl var/field (after):
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5         
                                                            /--*  t41    int    
N002 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         

lowering store lcl var/field (before):
N001 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000044] -c---------                   t44 =    CNS_INT   int    1
                                                            /--*  t43    int    
                                                            +--*  t44    int    
N003 (  5,  4) [000045] -----------                   t45 = *  ADD       int   
                                                            /--*  t45    int    
N004 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         

lowering store lcl var/field (after):
N001 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000044] -c---------                   t44 =    CNS_INT   int    1
                                                            /--*  t43    int    
                                                            +--*  t44    int    
N003 (  5,  4) [000045] -----------                   t45 = *  ADD       int   
                                                            /--*  t45    int    
N004 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         

lowering store lcl var/field (before):
N001 (  3,  2) [000031] -c---------                   t31 =    LCL_VAR   int    V06 loc5         
N002 (  1,  1) [000032] -c---------                   t32 =    CNS_INT   int    0
                                                            /--*  t31    int    
                                                            +--*  t32    int    
N003 (  8,  4) [000033] -----------                   t33 = *  LE        int   
                                                            /--*  t33    int    
N004 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         

lowering store lcl var/field (after):
N001 (  3,  2) [000031] -c---------                   t31 =    LCL_VAR   int    V06 loc5         
N002 (  1,  1) [000032] -c---------                   t32 =    CNS_INT   int    0
                                                            /--*  t31    int    
                                                            +--*  t32    int    
N003 (  8,  4) [000033] -----------                   t33 = *  LE        int   
                                                            /--*  t33    int    
N004 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         

Lowering JTRUE:
N001 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7         
N002 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N003 (  5,  4) [000037] J------N---                   t37 = *  NE        int   
                                                            /--*  t37    int    
N004 (  7,  6) [000038] -----------                         *  JTRUE     void  

Lowering condition:
N001 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7         
N002 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N003 (  5,  4) [000037] J------N---                   t37 = *  NE        int   

Lowering JTRUE Result:
N001 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7         
N002 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N003 (  5,  4) [000037] -------N---                         *  CMP       void  
N004 (  7,  6) [000038] -----------                            JCC       void   cond=UNE

lowering store lcl var/field (before):
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4         
                                                            /--*  t48    int    
N002 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         

lowering store lcl var/field (after):
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4         
                                                            /--*  t48    int    
N002 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         

lowering store lcl var/field (before):
N001 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000051] -c---------                   t51 =    CNS_INT   int    1
                                                            /--*  t50    int    
                                                            +--*  t51    int    
N003 (  5,  4) [000052] -----------                   t52 = *  ADD       int   
                                                            /--*  t52    int    
N004 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         

lowering store lcl var/field (after):
N001 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000051] -c---------                   t51 =    CNS_INT   int    1
                                                            /--*  t50    int    
                                                            +--*  t51    int    
N003 (  5,  4) [000052] -----------                   t52 = *  ADD       int   
                                                            /--*  t52    int    
N004 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         

lowering store lcl var/field (before):
N001 (  3,  2) [000019] -c---------                   t19 =    LCL_VAR   int    V05 loc4         
N002 (  1,  1) [000020] -c---------                   t20 =    CNS_INT   int    0
                                                            /--*  t19    int    
                                                            +--*  t20    int    
N003 (  8,  4) [000021] -----------                   t21 = *  LE        int   
                                                            /--*  t21    int    
N004 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         

lowering store lcl var/field (after):
N001 (  3,  2) [000019] -c---------                   t19 =    LCL_VAR   int    V05 loc4         
N002 (  1,  1) [000020] -c---------                   t20 =    CNS_INT   int    0
                                                            /--*  t19    int    
                                                            +--*  t20    int    
N003 (  8,  4) [000021] -----------                   t21 = *  LE        int   
                                                            /--*  t21    int    
N004 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         

Lowering JTRUE:
N001 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8         
N002 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N003 (  5,  4) [000025] J------N---                   t25 = *  NE        int   
                                                            /--*  t25    int    
N004 (  7,  6) [000026] -----------                         *  JTRUE     void  

Lowering condition:
N001 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8         
N002 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N003 (  5,  4) [000025] J------N---                   t25 = *  NE        int   

Lowering JTRUE Result:
N001 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8         
N002 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N003 (  5,  4) [000025] -------N---                         *  CMP       void  
N004 (  7,  6) [000026] -----------                            JCC       void   cond=UNE

lowering call (before):
N001 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'

                                                            /--*  t97    ref    arg0 in rcx
N002 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

args:
======

late:
======
lowering arg : N001 (  3, 10) [000097] H----------                         *  CNS_INT(h) ref     'Ascii'

new node is :                [000156] -----------                         *  PUTARG_REG ref    REG rcx

results of lowering call:
N001 (  3, 10) [000157] H----------                  t157 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t157   long   
N002 (  5, 12) [000158] n---G------                  t158 = *  IND       long  
lowering call (after):
N001 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'

                                                            /--*  t97    ref    
               [000156] -----------                  t156 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000157] Hc---------                  t157 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t157   long   
N002 (  5, 12) [000158] nc--G------                  t158 = *  IND       long   REG NA
                                                            /--*  t156   ref    arg0 in rcx
                                                            +--*  t158   long   control expr
N002 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

lowering store lcl var/field (before):
N001 (  9,  6) [000057] -----------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
                                                            /--*  t57    struct 
N002 ( 19, 13) [000098] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V17 tmp7         


Local V17 should not be enregistered because: written/read in a block op

Local V01 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N001 (  9,  6) [000057] -c---------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000159] Dc---------                  t159 =    LCL_ADDR  byref  V17 tmp7         [+0]
                                                            /--*  t159   byref  
                                                            +--*  t57    struct 
N002 ( 19, 13) [000098] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering store lcl var/field (before):
N003 (  9,  6) [000058] -----------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
                                                            /--*  t58    struct 
N004 ( 19, 13) [000099] DA---------                         *  STORE_LCL_VAR struct<System.ReadOnlySpan`1, 16>(AX) V18 tmp8         


Local V18 should not be enregistered because: written/read in a block op

Local V02 should not be enregistered because: the local is used as store block src
lowering store lcl var/field (after):
N003 (  9,  6) [000058] -c---------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000160] Dc---------                  t160 =    LCL_ADDR  byref  V18 tmp8         [+0]
                                                            /--*  t160   byref  
                                                            +--*  t58    struct 
N004 ( 19, 13) [000099] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)

lowering call (before):
N005 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0]
N006 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0]
                                                            /--*  t100   long   arg0 in rcx
                                                            +--*  t101   long   arg1 in rdx
N007 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool

args:
======

late:
======
lowering arg : N005 (  3,  3) [000100] -----------                         *  LCL_ADDR  long   V17 tmp7         [+0]
new node is :                [000161] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N006 (  3,  3) [000101] -----------                         *  LCL_ADDR  long   V18 tmp8         [+0]
new node is :                [000162] -----------                         *  PUTARG_REG long   REG rdx

results of lowering call:
N001 (  3, 10) [000163] H----------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn
                                                            /--*  t163   long   
N002 (  5, 12) [000164] n---G------                  t164 = *  IND       long  
lowering call (after):
N005 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0]
                                                            /--*  t100   long   
               [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0]
                                                            /--*  t101   long   
               [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn
                                                            /--*  t163   long   
N002 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                            /--*  t161   long   arg0 in rcx
                                                            +--*  t162   long   arg1 in rdx
                                                            +--*  t164   long   control expr
N007 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool

lowering store lcl var/field (before):
N005 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0]
                                                            /--*  t100   long   
               [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0]
                                                            /--*  t101   long   
               [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn
                                                            /--*  t163   long   
N002 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                            /--*  t161   long   arg0 in rcx
                                                            +--*  t162   long   arg1 in rdx
                                                            +--*  t164   long   control expr
N007 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t59    int    
N008 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         

lowering store lcl var/field (after):
N005 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0]
                                                            /--*  t100   long   
               [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0]
                                                            /--*  t101   long   
               [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn
                                                            /--*  t163   long   
N002 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                            /--*  t161   long   arg0 in rcx
                                                            +--*  t162   long   arg1 in rdx
                                                            +--*  t164   long   control expr
N007 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t59    int    
N008 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         

lowering call (before):
N001 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t61    int    arg0 in rcx
N002 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)

args:
======

late:
======
lowering arg : N001 (  3,  2) [000061] -----------                         *  LCL_VAR   int    V13 tmp3         
new node is :                [000165] -----------                         *  PUTARG_REG int    REG rcx

results of lowering call:
N001 (  3, 10) [000166] H----------                  t166 =    CNS_INT(h) long   0x7ff7c6bafbb8 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] n---G------                  t167 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t61    int    
               [000165] -----------                  t165 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ff7c6bafbb8 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t165   int    arg0 in rcx
                                                            +--*  t167   long   control expr
N002 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)

lowering call (before):
N001 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'

                                                            /--*  t102   ref    arg0 in rcx
N002 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

args:
======

late:
======
lowering arg : N001 (  3, 10) [000102] H----------                         *  CNS_INT(h) ref     'String'

new node is :                [000168] -----------                         *  PUTARG_REG ref    REG rcx

results of lowering call:
N001 (  3, 10) [000169] H----------                  t169 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t169   long   
N002 (  5, 12) [000170] n---G------                  t170 = *  IND       long  
lowering call (after):
N001 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'

                                                            /--*  t102   ref    
               [000168] -----------                  t168 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000169] Hc---------                  t169 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t169   long   
N002 (  5, 12) [000170] nc--G------                  t170 = *  IND       long   REG NA
                                                            /--*  t168   ref    arg0 in rcx
                                                            +--*  t170   long   control expr
N002 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)

lowering store lcl var/field (before):
N001 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t103   ref    
N002 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         

lowering store lcl var/field (after):
N001 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t103   ref    
N002 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         

lowering call (before):
N001 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3
                                                            /--*  t70    long   arg0 in rcx
                                                            +--*  t69    long   arg1 in rdx
N003 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC

args:
======

late:
======
lowering arg : N001 (  3, 10) [000070] H----------                         *  CNS_INT(h) long   0x7ff7c6bf3378 class
new node is :                [000171] -----------                         *  PUTARG_REG long   REG rcx

lowering arg : N002 (  1,  1) [000069] -----------                         *  CNS_INT   long   3
new node is :                [000172] -----------                         *  PUTARG_REG long   REG rdx

lowering call (after):
N001 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class
                                                            /--*  t70    long   
               [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3
                                                            /--*  t69    long   
               [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                            /--*  t171   long   arg0 in rcx
                                                            +--*  t172   long   arg1 in rdx
N003 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC

lowering store lcl var/field (before):
N001 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class
                                                            /--*  t70    long   
               [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3
                                                            /--*  t69    long   
               [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                            /--*  t171   long   arg0 in rcx
                                                            +--*  t172   long   arg1 in rdx
N003 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t71    ref    
N004 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         

lowering store lcl var/field (after):
N001 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class
                                                            /--*  t70    long   
               [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3
                                                            /--*  t69    long   
               [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                            /--*  t171   long   arg0 in rcx
                                                            +--*  t172   long   arg1 in rdx
N003 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t71    ref    
N004 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         

lowering call (before):
N001 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field
                                                            /--*  t75    long   arg0 in rcx
N002 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help struct CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD

args:
======

late:
======
lowering arg : N001 (  3, 10) [000075] H----------                         *  CNS_INT(h) long   0x7ff7c6bf36f8 field
new node is :                [000173] -----------                         *  PUTARG_REG long   REG rcx

lowering call (after):
N001 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field
                                                            /--*  t75    long   
               [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                            /--*  t173   long   arg0 in rcx
N002 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD

lowering store lcl var/field (before):
N001 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field
                                                            /--*  t75    long   
               [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                            /--*  t173   long   arg0 in rcx
N002 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t76    ref    
N003 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         

lowering store lcl var/field (after):
N001 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field
                                                            /--*  t75    long   
               [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                            /--*  t173   long   arg0 in rcx
N002 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t76    ref    
N003 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         

lowering call (before):
N001 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4         
N002 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t74    ref    arg0 in rcx
                                                            +--*  t79    ref    arg1 in rdx
N003 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)

args:
======

late:
======
lowering arg : N001 (  3,  2) [000074] -----------                         *  LCL_VAR   ref    V14 tmp4         
new node is :                [000174] -----------                         *  PUTARG_REG ref    REG rcx

lowering arg : N002 (  3,  4) [000079] -----------                         *  LCL_FLD   ref    V15 tmp5         [+0]
new node is :                [000175] -----------                         *  PUTARG_REG ref    REG rdx

lowering call (after):
N001 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t74    ref    
               [000174] -----------                  t174 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t79    ref    
               [000175] -----------                  t175 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t174   ref    arg0 in rcx
                                                            +--*  t175   ref    arg1 in rdx
N003 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)

lowering store lcl var/field (before):
N001 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t73    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         

lowering store lcl var/field (after):
N001 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t73    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         

lowering call (before):
N001 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2         
N002 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3         
N003 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1
                                                            /--*  t81    ref    arg0 in rcx
                                                            +--*  t82    ref    arg1 in rdx
                                                            +--*  t83    int    arg2 in r8
N004 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]

args:
======

late:
======
lowering arg : N001 (  3,  2) [000081] -----------                         *  LCL_VAR   ref    V03 loc2         
new node is :                [000176] -----------                         *  PUTARG_REG ref    REG rcx

lowering arg : N002 (  3,  2) [000082] -----------                         *  LCL_VAR   ref    V04 loc3         
new node is :                [000177] -----------                         *  PUTARG_REG ref    REG rdx

lowering arg : N003 (  1,  1) [000083] -----------                         *  CNS_INT   int    1
new node is :                [000178] -----------                         *  PUTARG_REG int    REG r8

results of lowering call:
N001 (  3, 10) [000179] H----------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn
                                                            /--*  t179   long   
N002 (  5, 12) [000180] n---G------                  t180 = *  IND       long  
lowering call (after):
N001 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t81    ref    
               [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t82    ref    
               [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1
                                                            /--*  t83    int    
               [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn
                                                            /--*  t179   long   
N002 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                            /--*  t176   ref    arg0 in rcx
                                                            +--*  t177   ref    arg1 in rdx
                                                            +--*  t178   int    arg2 in r8
                                                            +--*  t180   long   control expr
N004 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]

lowering store lcl var/field (before):
N001 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t81    ref    
               [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t82    ref    
               [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1
                                                            /--*  t83    int    
               [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn
                                                            /--*  t179   long   
N002 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                            /--*  t176   ref    arg0 in rcx
                                                            +--*  t177   ref    arg1 in rdx
                                                            +--*  t178   int    arg2 in r8
                                                            +--*  t180   long   control expr
N004 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t84    ref    
N005 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         

lowering store lcl var/field (after):
N001 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t81    ref    
               [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t82    ref    
               [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1
                                                            /--*  t83    int    
               [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn
                                                            /--*  t179   long   
N002 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                            /--*  t176   ref    arg0 in rcx
                                                            +--*  t177   ref    arg1 in rdx
                                                            +--*  t178   int    arg2 in r8
                                                            +--*  t180   long   control expr
N004 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t84    ref    
N005 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         

lowering GT_RETURN
N001 (  0,  0) [000088] -----------                         *  RETURN    void  
============Lower has completed modifying nodes.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe LIR 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target LIR 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target LIR 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src LIR 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd LIR 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src LIR 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] -----------                            NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr
                                                            /--*  t89    long   
N002 (  5, 12) [000090] nc--G------                   t90 = *  IND       int   
N003 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N004 (  7, 14) [000092] ----G--N---                         *  CMP       void  
N005 (  9, 16) [000104] ----G------                            JCC       void   cond=UEQ

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
               [000105] -----------                            IL_OFFSET void   INLRT @ 0x000[E-]
N001 (  1,  1) [000001] -----------                            NO_OP     void  
               [000106] -----------                            IL_OFFSET void   INLRT @ 0x001[E-]
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
                                                            /--*  t4     long   
               [000142] -----------                  t142 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t2     long   
               [000143] -----------                  t143 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t3     int    
               [000144] -----------                  t144 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000145] Hc---------                  t145 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t145   long   
N002 (  5, 12) [000146] nc--G------                  t146 = *  IND       long   REG NA
                                                            /--*  t142   long   this in rcx
                                                            +--*  t143   long   arg1 in rdx
                                                            +--*  t144   int    arg2 in r8
                                                            +--*  t146   long   control expr
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000107] -----------                            IL_OFFSET void   INLRT @ 0x010[--]
N001 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
               [000147] Dc---------                  t147 =    LCL_ADDR  byref  V01 loc0         [+0]
                                                            /--*  t147   byref  
                                                            +--*  t6     struct 
N002 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000108] -----------                            IL_OFFSET void   INLRT @ 0x011[E-]
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
                                                            /--*  t10    long   
               [000148] -----------                  t148 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t8     long   
               [000149] -----------                  t149 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t9     int    
               [000150] -----------                  t150 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000151] Hc---------                  t151 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t151   long   
N002 (  5, 12) [000152] nc--G------                  t152 = *  IND       long   REG NA
                                                            /--*  t148   long   this in rcx
                                                            +--*  t149   long   arg1 in rdx
                                                            +--*  t150   int    arg2 in r8
                                                            +--*  t152   long   control expr
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000109] -----------                            IL_OFFSET void   INLRT @ 0x020[--]
N001 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
               [000153] Dc---------                  t153 =    LCL_ADDR  byref  V02 loc1         [+0]
                                                            /--*  t153   byref  
                                                            +--*  t12    struct 
N002 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000110] -----------                            IL_OFFSET void   INLRT @ 0x021[E-]
N001 (  3, 10) [000154] Hc---------                  t154 =    CNS_INT(h) long   0x7ff7c6bafba0 ftn
                                                            /--*  t154   long   
N002 (  5, 12) [000155] nc--G------                  t155 = *  IND       long   REG NA
                                                            /--*  t155   long   control expr
N001 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine()
               [000111] -----------                            IL_OFFSET void   INLRT @ 0x026[E-]
N001 (  1,  1) [000015] -----------                            NO_OP     void  
               [000112] -----------                            IL_OFFSET void   INLRT @ 0x027[E-]
N001 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0
                                                            /--*  t16    int    
N002 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000113] -----------                            IL_OFFSET void   INLRT @ 0x02A[E-]
N001 (  0,  0) [000018] -----------                            NOP       void  

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
               [000114] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-]
N001 (  1,  1) [000027] -----------                            NO_OP     void  
               [000115] -----------                            IL_OFFSET void   INLRT @ 0x02D[E-]
N001 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0
                                                            /--*  t28    int    
N002 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000116] -----------                            IL_OFFSET void   INLRT @ 0x030[E-]
N001 (  0,  0) [000030] -----------                            NOP       void  

------------ BB07 [032..03E), preds={BB08} succs={BB08}
               [000117] -----------                            IL_OFFSET void   INLRT @ 0x032[E-]
N001 (  1,  1) [000039] -----------                            NO_OP     void  
               [000118] -----------                            IL_OFFSET void   INLRT @ 0x033[E-]
N001 (  1,  1) [000040] -----------                            NO_OP     void  
               [000119] -----------                            IL_OFFSET void   INLRT @ 0x034[E-]
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5         
                                                            /--*  t41    int    
N002 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000120] -----------                            IL_OFFSET void   INLRT @ 0x038[E-]
N001 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000044] -c---------                   t44 =    CNS_INT   int    1
                                                            /--*  t43    int    
                                                            +--*  t44    int    
N003 (  5,  4) [000045] -----------                   t45 = *  ADD       int   
                                                            /--*  t45    int    
N004 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
               [000121] -----------                            IL_OFFSET void   INLRT @ 0x03E[E-]
N001 (  3,  2) [000031] -c---------                   t31 =    LCL_VAR   int    V06 loc5         
N002 (  1,  1) [000032] -c---------                   t32 =    CNS_INT   int    0
                                                            /--*  t31    int    
                                                            +--*  t32    int    
N003 (  8,  4) [000033] -----------                   t33 = *  LE        int   
                                                            /--*  t33    int    
N004 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000122] -----------                            IL_OFFSET void   INLRT @ 0x045[E-]
N001 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7         
N002 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N003 (  5,  4) [000037] -------N---                         *  CMP       void  
N004 (  7,  6) [000038] -----------                            JCC       void   cond=UNE

------------ BB09 [049..054), preds={BB08} succs={BB10}
               [000123] -----------                            IL_OFFSET void   INLRT @ 0x049[E-]
N001 (  1,  1) [000047] -----------                            NO_OP     void  
               [000124] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-]
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4         
                                                            /--*  t48    int    
N002 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000125] -----------                            IL_OFFSET void   INLRT @ 0x04E[E-]
N001 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000051] -c---------                   t51 =    CNS_INT   int    1
                                                            /--*  t50    int    
                                                            +--*  t51    int    
N003 (  5,  4) [000052] -----------                   t52 = *  ADD       int   
                                                            /--*  t52    int    
N004 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
               [000126] -----------                            IL_OFFSET void   INLRT @ 0x054[E-]
N001 (  3,  2) [000019] -c---------                   t19 =    LCL_VAR   int    V05 loc4         
N002 (  1,  1) [000020] -c---------                   t20 =    CNS_INT   int    0
                                                            /--*  t19    int    
                                                            +--*  t20    int    
N003 (  8,  4) [000021] -----------                   t21 = *  LE        int   
                                                            /--*  t21    int    
N004 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000127] -----------                            IL_OFFSET void   INLRT @ 0x05B[E-]
N001 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8         
N002 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N003 (  5,  4) [000025] -------N---                         *  CMP       void  
N004 (  7,  6) [000026] -----------                            JCC       void   cond=UNE

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}
               [000128] -----------                            IL_OFFSET void   INLRT @ 0x05F[E-]
N001 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'

                                                            /--*  t97    ref    
               [000156] -----------                  t156 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000157] Hc---------                  t157 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t157   long   
N002 (  5, 12) [000158] nc--G------                  t158 = *  IND       long   REG NA
                                                            /--*  t156   ref    arg0 in rcx
                                                            +--*  t158   long   control expr
N002 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000129] -----------                            IL_OFFSET void   INLRT @ 0x069[E-]
N001 (  1,  1) [000056] -----------                            NO_OP     void  
               [000130] -----------                            IL_OFFSET void   INLRT @ 0x06A[E-]
N001 (  9,  6) [000057] -c---------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000159] Dc---------                  t159 =    LCL_ADDR  byref  V17 tmp7         [+0]
                                                            /--*  t159   byref  
                                                            +--*  t57    struct 
N002 ( 19, 13) [000098] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N003 (  9,  6) [000058] -c---------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000160] Dc---------                  t160 =    LCL_ADDR  byref  V18 tmp8         [+0]
                                                            /--*  t160   byref  
                                                            +--*  t58    struct 
N004 ( 19, 13) [000099] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N005 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0]
                                                            /--*  t100   long   
               [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0]
                                                            /--*  t101   long   
               [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn
                                                            /--*  t163   long   
N002 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                            /--*  t161   long   arg0 in rcx
                                                            +--*  t162   long   arg1 in rdx
                                                            +--*  t164   long   control expr
N007 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t59    int    
N008 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000131] -----------                            IL_OFFSET void   INLRT @ 0x071[--]
N001 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t61    int    
               [000165] -----------                  t165 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ff7c6bafbb8 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t165   int    arg0 in rcx
                                                            +--*  t167   long   control expr
N002 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
               [000132] -----------                            IL_OFFSET void   INLRT @ 0x076[E-]
N001 (  1,  1) [000063] -----------                            NO_OP     void  
               [000133] -----------                            IL_OFFSET void   INLRT @ 0x077[E-]
N001 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'

                                                            /--*  t102   ref    
               [000168] -----------                  t168 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000169] Hc---------                  t169 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t169   long   
N002 (  5, 12) [000170] nc--G------                  t170 = *  IND       long   REG NA
                                                            /--*  t168   ref    arg0 in rcx
                                                            +--*  t170   long   control expr
N002 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000134] -----------                            IL_OFFSET void   INLRT @ 0x081[E-]
N001 (  1,  1) [000066] -----------                            NO_OP     void  
               [000135] -----------                            IL_OFFSET void   INLRT @ 0x082[E-]
N001 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t103   ref    
N002 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000136] -----------                            IL_OFFSET void   INLRT @ 0x088[E-]
N001 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class
                                                            /--*  t70    long   
               [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3
                                                            /--*  t69    long   
               [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                            /--*  t171   long   arg0 in rcx
                                                            +--*  t172   long   arg1 in rdx
N003 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t71    ref    
N004 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000137] -----------                            IL_OFFSET void   INLRT @ 0x08E[--]
N001 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field
                                                            /--*  t75    long   
               [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                            /--*  t173   long   arg0 in rcx
N002 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t76    ref    
N003 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N001 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t74    ref    
               [000174] -----------                  t174 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t79    ref    
               [000175] -----------                  t175 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t174   ref    arg0 in rcx
                                                            +--*  t175   ref    arg1 in rdx
N003 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000138] -----------                            IL_OFFSET void   INLRT @ 0x099[--]
N001 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t73    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000139] -----------                            IL_OFFSET void   INLRT @ 0x09A[E-]
N001 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t81    ref    
               [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t82    ref    
               [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1
                                                            /--*  t83    int    
               [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn
                                                            /--*  t179   long   
N002 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                            /--*  t176   ref    arg0 in rcx
                                                            +--*  t177   ref    arg1 in rdx
                                                            +--*  t178   int    arg2 in r8
                                                            +--*  t180   long   control expr
N004 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t84    ref    
N005 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000140] -----------                            IL_OFFSET void   INLRT @ 0x0A2[--]
N001 (  0,  0) [000087] -----------                            NOP       void  
               [000141] -----------                            IL_OFFSET void   INLRT @ 0x0A3[E-]
N001 (  0,  0) [000088] -----------                            RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*** lvaComputeRefCounts ***
*************** In fgLocalVarLiveness()
; Initial local variable assignments
;
;  V00 arg0              ref  do-not-enreg[] class-hnd <System.String[]>
;  V01 loc0           struct <System.ReadOnlySpan`1, 16> do-not-enreg[S] <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1           struct <System.ReadOnlySpan`1, 16> do-not-enreg[S] <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2              ref  do-not-enreg[] class-hnd exact <System.String>
;  V04 loc3              ref  do-not-enreg[] class-hnd exact <ushort[]>
;  V05 loc4              int  do-not-enreg[]
;  V06 loc5              int  do-not-enreg[]
;  V07 loc6              int  do-not-enreg[]
;  V08 loc7             bool  do-not-enreg[]
;  V09 loc8             bool  do-not-enreg[]
;  V10 OutArgs        struct <32> do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
;  V11 tmp1           struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V12 tmp2           struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V13 tmp3              int  do-not-enreg[] "impSpillStackEnsure"
;  V14 tmp4              ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <ushort[]>
;  V15 tmp5           struct <System.RuntimeFieldHandle, 8> do-not-enreg[S] "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V16 tmp6              ref  do-not-enreg[] class-hnd exact "impSpillStackEnsure" <System.String[]>
;  V17 tmp7           struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V18 tmp8           struct <System.ReadOnlySpan`1, 16> do-not-enreg[XS] addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
In fgLocalVarLivenessInit
*************** In fgPerBlockLocalVarLiveness()
*************** In fgInterBlockLocalVarLiveness()
*************** In fgExtendDbgLifetimes()

Marking vars alive over their entire scope :

Local variable scopes = 10
    	VarNum 	LVNum 	      Name 	Beg 	End
Sorted by enter scope:
 0: 	00h 	00h 	  V00 arg0 	000h   	0A4h <-- next enter scope
 1: 	08h 	08h 	  V08 loc7 	000h   	0A4h
 2: 	07h 	07h 	  V07 loc6 	000h   	0A4h
 3: 	06h 	06h 	  V06 loc5 	000h   	0A4h
 4: 	05h 	05h 	  V05 loc4 	000h   	0A4h
 5: 	04h 	04h 	  V04 loc3 	000h   	0A4h
 6: 	03h 	03h 	  V03 loc2 	000h   	0A4h
 7: 	02h 	02h 	  V02 loc1 	000h   	0A4h
 8: 	01h 	01h 	  V01 loc0 	000h   	0A4h
 9: 	09h 	09h 	  V09 loc8 	000h   	0A4h
Sorted by exit scope:
 0: 	00h 	00h 	  V00 arg0 	000h   	0A4h <-- next exit scope
 1: 	08h 	08h 	  V08 loc7 	000h   	0A4h
 2: 	07h 	07h 	  V07 loc6 	000h   	0A4h
 3: 	06h 	06h 	  V06 loc5 	000h   	0A4h
 4: 	05h 	05h 	  V05 loc4 	000h   	0A4h
 5: 	04h 	04h 	  V04 loc3 	000h   	0A4h
 6: 	03h 	03h 	  V03 loc2 	000h   	0A4h
 7: 	02h 	02h 	  V02 loc1 	000h   	0A4h
 8: 	01h 	01h 	  V01 loc0 	000h   	0A4h
 9: 	09h 	09h 	  V09 loc8 	000h   	0A4h
Scope info: block BB01 marking in scope: {}
Scope info: block BB02 marking in scope: {}
Scope info: block BB03 marking in scope: {}
Scope info: block BB04 marking in scope: {}
Scope info: block BB05 marking in scope: {}
Scope info: block BB06 marking in scope: {}
Scope info: block BB07 marking in scope: {}
Scope info: block BB08 marking in scope: {}
Scope info: block BB09 marking in scope: {}
Scope info: block BB10 marking in scope: {}
Scope info: block BB11 marking in scope: {}

Debug scopes:
BB01: {}
BB02: {}
BB03: {}
BB04: {}
BB05: {}
BB06: {}
BB07: {}
BB08: {}
BB09: {}
BB10: {}
BB11: {}
Scope info: block BB01 UNmarking in scope: {}

BB liveness after fgExtendDbgLifetimes():

BB01 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB02 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB03 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB04 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB05 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB06 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB07 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB08 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB09 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB10 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB11 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap



*************** In fgRemoveDeadBlocks()
Removing unreachable blocks for fgRemoveDeadBlocks iteration #1
*************** In fgDebugCheckBBlist

*** lvaComputeRefCounts ***

*************** Finishing PHASE Lowering nodeinfo
Trees after Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe LIR 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target LIR 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target LIR 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src LIR 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd LIR 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src LIR 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] -----------                            NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr
                                                            /--*  t89    long   
N002 (  5, 12) [000090] nc--G------                   t90 = *  IND       int   
N003 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N004 (  7, 14) [000092] ----G--N---                         *  CMP       void  
N005 (  9, 16) [000104] ----G------                            JCC       void   cond=UEQ

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
               [000105] -----------                            IL_OFFSET void   INLRT @ 0x000[E-]
N001 (  1,  1) [000001] -----------                            NO_OP     void  
               [000106] -----------                            IL_OFFSET void   INLRT @ 0x001[E-]
N001 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0]
                                                            /--*  t4     long   
               [000142] -----------                  t142 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t2     long   
               [000143] -----------                  t143 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00
                                                            /--*  t3     int    
               [000144] -----------                  t144 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000145] Hc---------                  t145 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t145   long   
N002 (  5, 12) [000146] nc--G------                  t146 = *  IND       long   REG NA
                                                            /--*  t142   long   this in rcx
                                                            +--*  t143   long   arg1 in rdx
                                                            +--*  t144   int    arg2 in r8
                                                            +--*  t146   long   control expr
N004 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000107] -----------                            IL_OFFSET void   INLRT @ 0x010[--]
N001 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1         
               [000147] Dc---------                  t147 =    LCL_ADDR  byref  V01 loc0         [+0]
                                                            /--*  t147   byref  
                                                            +--*  t6     struct 
N002 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000108] -----------                            IL_OFFSET void   INLRT @ 0x011[E-]
N001 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0]
                                                            /--*  t10    long   
               [000148] -----------                  t148 = *  PUTARG_REG long   REG rcx
N002 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
                                                            /--*  t8     long   
               [000149] -----------                  t149 = *  PUTARG_REG long   REG rdx
N003 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00
                                                            /--*  t9     int    
               [000150] -----------                  t150 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000151] Hc---------                  t151 =    CNS_INT(h) long   0x7ff7c6a46418 ftn
                                                            /--*  t151   long   
N002 (  5, 12) [000152] nc--G------                  t152 = *  IND       long   REG NA
                                                            /--*  t148   long   this in rcx
                                                            +--*  t149   long   arg1 in rdx
                                                            +--*  t150   int    arg2 in r8
                                                            +--*  t152   long   control expr
N004 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this
               [000109] -----------                            IL_OFFSET void   INLRT @ 0x020[--]
N001 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2         
               [000153] Dc---------                  t153 =    LCL_ADDR  byref  V02 loc1         [+0]
                                                            /--*  t153   byref  
                                                            +--*  t12    struct 
N002 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
               [000110] -----------                            IL_OFFSET void   INLRT @ 0x021[E-]
N001 (  3, 10) [000154] Hc---------                  t154 =    CNS_INT(h) long   0x7ff7c6bafba0 ftn
                                                            /--*  t154   long   
N002 (  5, 12) [000155] nc--G------                  t155 = *  IND       long   REG NA
                                                            /--*  t155   long   control expr
N001 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine()
               [000111] -----------                            IL_OFFSET void   INLRT @ 0x026[E-]
N001 (  1,  1) [000015] -----------                            NO_OP     void  
               [000112] -----------                            IL_OFFSET void   INLRT @ 0x027[E-]
N001 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0
                                                            /--*  t16    int    
N002 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4         
               [000113] -----------                            IL_OFFSET void   INLRT @ 0x02A[E-]
N001 (  0,  0) [000018] -----------                            NOP       void  

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
               [000114] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-]
N001 (  1,  1) [000027] -----------                            NO_OP     void  
               [000115] -----------                            IL_OFFSET void   INLRT @ 0x02D[E-]
N001 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0
                                                            /--*  t28    int    
N002 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5         
               [000116] -----------                            IL_OFFSET void   INLRT @ 0x030[E-]
N001 (  0,  0) [000030] -----------                            NOP       void  

------------ BB07 [032..03E), preds={BB08} succs={BB08}
               [000117] -----------                            IL_OFFSET void   INLRT @ 0x032[E-]
N001 (  1,  1) [000039] -----------                            NO_OP     void  
               [000118] -----------                            IL_OFFSET void   INLRT @ 0x033[E-]
N001 (  1,  1) [000040] -----------                            NO_OP     void  
               [000119] -----------                            IL_OFFSET void   INLRT @ 0x034[E-]
N001 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5         
                                                            /--*  t41    int    
N002 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000120] -----------                            IL_OFFSET void   INLRT @ 0x038[E-]
N001 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000044] -c---------                   t44 =    CNS_INT   int    1
                                                            /--*  t43    int    
                                                            +--*  t44    int    
N003 (  5,  4) [000045] -----------                   t45 = *  ADD       int   
                                                            /--*  t45    int    
N004 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5         

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
               [000121] -----------                            IL_OFFSET void   INLRT @ 0x03E[E-]
N001 (  3,  2) [000031] -c---------                   t31 =    LCL_VAR   int    V06 loc5         
N002 (  1,  1) [000032] -c---------                   t32 =    CNS_INT   int    0
                                                            /--*  t31    int    
                                                            +--*  t32    int    
N003 (  8,  4) [000033] -----------                   t33 = *  LE        int   
                                                            /--*  t33    int    
N004 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7         
               [000122] -----------                            IL_OFFSET void   INLRT @ 0x045[E-]
N001 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7         
N002 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N003 (  5,  4) [000037] -------N---                         *  CMP       void  
N004 (  7,  6) [000038] -----------                            JCC       void   cond=UNE

------------ BB09 [049..054), preds={BB08} succs={BB10}
               [000123] -----------                            IL_OFFSET void   INLRT @ 0x049[E-]
N001 (  1,  1) [000047] -----------                            NO_OP     void  
               [000124] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-]
N001 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4         
                                                            /--*  t48    int    
N002 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6         
               [000125] -----------                            IL_OFFSET void   INLRT @ 0x04E[E-]
N001 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6         
N002 (  1,  1) [000051] -c---------                   t51 =    CNS_INT   int    1
                                                            /--*  t50    int    
                                                            +--*  t51    int    
N003 (  5,  4) [000052] -----------                   t52 = *  ADD       int   
                                                            /--*  t52    int    
N004 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4         

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
               [000126] -----------                            IL_OFFSET void   INLRT @ 0x054[E-]
N001 (  3,  2) [000019] -c---------                   t19 =    LCL_VAR   int    V05 loc4         
N002 (  1,  1) [000020] -c---------                   t20 =    CNS_INT   int    0
                                                            /--*  t19    int    
                                                            +--*  t20    int    
N003 (  8,  4) [000021] -----------                   t21 = *  LE        int   
                                                            /--*  t21    int    
N004 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8         
               [000127] -----------                            IL_OFFSET void   INLRT @ 0x05B[E-]
N001 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8         
N002 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N003 (  5,  4) [000025] -------N---                         *  CMP       void  
N004 (  7,  6) [000026] -----------                            JCC       void   cond=UNE

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}
               [000128] -----------                            IL_OFFSET void   INLRT @ 0x05F[E-]
N001 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'

                                                            /--*  t97    ref    
               [000156] -----------                  t156 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000157] Hc---------                  t157 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t157   long   
N002 (  5, 12) [000158] nc--G------                  t158 = *  IND       long   REG NA
                                                            /--*  t156   ref    arg0 in rcx
                                                            +--*  t158   long   control expr
N002 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000129] -----------                            IL_OFFSET void   INLRT @ 0x069[E-]
N001 (  1,  1) [000056] -----------                            NO_OP     void  
               [000130] -----------                            IL_OFFSET void   INLRT @ 0x06A[E-]
N001 (  9,  6) [000057] -c---------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0         
               [000159] Dc---------                  t159 =    LCL_ADDR  byref  V17 tmp7         [+0]
                                                            /--*  t159   byref  
                                                            +--*  t57    struct 
N002 ( 19, 13) [000098] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N003 (  9,  6) [000058] -c---------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1         
               [000160] Dc---------                  t160 =    LCL_ADDR  byref  V18 tmp8         [+0]
                                                            /--*  t160   byref  
                                                            +--*  t58    struct 
N004 ( 19, 13) [000099] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll)
N005 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0]
                                                            /--*  t100   long   
               [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
N006 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0]
                                                            /--*  t101   long   
               [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
N001 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn
                                                            /--*  t163   long   
N002 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                            /--*  t161   long   arg0 in rcx
                                                            +--*  t162   long   arg1 in rdx
                                                            +--*  t164   long   control expr
N007 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool
                                                            /--*  t59    int    
N008 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3         
               [000131] -----------                            IL_OFFSET void   INLRT @ 0x071[--]
N001 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3         
                                                            /--*  t61    int    
               [000165] -----------                  t165 = *  PUTARG_REG int    REG rcx
N001 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ff7c6bafbb8 ftn
                                                            /--*  t166   long   
N002 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t165   int    arg0 in rcx
                                                            +--*  t167   long   control expr
N002 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool)
               [000132] -----------                            IL_OFFSET void   INLRT @ 0x076[E-]
N001 (  1,  1) [000063] -----------                            NO_OP     void  
               [000133] -----------                            IL_OFFSET void   INLRT @ 0x077[E-]
N001 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'

                                                            /--*  t102   ref    
               [000168] -----------                  t168 = *  PUTARG_REG ref    REG rcx
N001 (  3, 10) [000169] Hc---------                  t169 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn
                                                            /--*  t169   long   
N002 (  5, 12) [000170] nc--G------                  t170 = *  IND       long   REG NA
                                                            /--*  t168   ref    arg0 in rcx
                                                            +--*  t170   long   control expr
N002 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String)
               [000134] -----------                            IL_OFFSET void   INLRT @ 0x081[E-]
N001 (  1,  1) [000066] -----------                            NO_OP     void  
               [000135] -----------                            IL_OFFSET void   INLRT @ 0x082[E-]
N001 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                                                            /--*  t103   ref    
N002 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2         
               [000136] -----------                            IL_OFFSET void   INLRT @ 0x088[E-]
N001 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class
                                                            /--*  t70    long   
               [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
N002 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3
                                                            /--*  t69    long   
               [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                            /--*  t171   long   arg0 in rcx
                                                            +--*  t172   long   arg1 in rdx
N003 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC
                                                            /--*  t71    ref    
N004 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4         
               [000137] -----------                            IL_OFFSET void   INLRT @ 0x08E[--]
N001 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field
                                                            /--*  t75    long   
               [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                            /--*  t173   long   arg0 in rcx
N002 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                                                            /--*  t76    ref    
N003 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5         
N001 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t74    ref    
               [000174] -----------                  t174 = *  PUTARG_REG ref    REG rcx
N002 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0]
                                                            /--*  t79    ref    
               [000175] -----------                  t175 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t174   ref    arg0 in rcx
                                                            +--*  t175   ref    arg1 in rdx
N003 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
               [000138] -----------                            IL_OFFSET void   INLRT @ 0x099[--]
N001 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4         
                                                            /--*  t73    ref    
N002 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3         
               [000139] -----------                            IL_OFFSET void   INLRT @ 0x09A[E-]
N001 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2         
                                                            /--*  t81    ref    
               [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
N002 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3         
                                                            /--*  t82    ref    
               [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
N003 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1
                                                            /--*  t83    int    
               [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
N001 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn
                                                            /--*  t179   long   
N002 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                            /--*  t176   ref    arg0 in rcx
                                                            +--*  t177   ref    arg1 in rdx
                                                            +--*  t178   int    arg2 in r8
                                                            +--*  t180   long   control expr
N004 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[]
                                                            /--*  t84    ref    
N005 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6         
               [000140] -----------                            IL_OFFSET void   INLRT @ 0x0A2[--]
N001 (  0,  0) [000087] -----------                            NOP       void  
               [000141] -----------                            IL_OFFSET void   INLRT @ 0x0A3[E-]
N001 (  0,  0) [000088] -----------                            RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Calculate stack level slots

*************** Finishing PHASE Calculate stack level slots [no changes]

*************** Starting PHASE Linear scan register alloc
Clearing modified regs.

buildIntervals ========

-----------------
LIVENESS:
-----------------
BB01
use: {}
def: {}
 in: {}
out: {}
BB02
use: {}
def: {}
 in: {}
out: {}
BB03
use: {}
def: {}
 in: {}
out: {}
BB04
use: {}
def: {}
 in: {}
out: {}
BB05
use: {}
def: {}
 in: {}
out: {}
BB06
use: {}
def: {}
 in: {}
out: {}
BB07
use: {}
def: {}
 in: {}
out: {}
BB08
use: {}
def: {}
 in: {}
out: {}
BB09
use: {}
def: {}
 in: {}
out: {}
BB10
use: {}
def: {}
 in: {}
out: {}
BB11
use: {}
def: {}
 in: {}
out: {}

FP callee save candidate vars: None

floatVarCount = 0; hasLoops = false, singleExit = true
TUPLE STYLE DUMP BEFORE LSRA
Start LSRA Block Sequence: 
Current block: BB01
	Succ block: BB02, Criteria: weight, Worklist: [BB02 ]
Current block: BB02
	Succ block: BB03, Criteria: weight, Worklist: [BB03 ]
	Succ block: BB04, Criteria: weight, Worklist: [BB03 BB04 ]
Current block: BB03
Current block: BB04
	Succ block: BB05, Criteria: bbNum, Worklist: [BB05 ]
Current block: BB05
	Succ block: BB10, Criteria: bbNum, Worklist: [BB10 ]
Current block: BB10
	Succ block: BB11, Criteria: bbNum, Worklist: [BB11 ]
	Succ block: BB06, Criteria: bbNum, Worklist: [BB06 BB11 ]
Current block: BB06
	Succ block: BB08, Criteria: bbNum, Worklist: [BB08 BB11 ]
Current block: BB08
	Succ block: BB09, Criteria: bbNum, Worklist: [BB09 BB11 ]
	Succ block: BB07, Criteria: bbNum, Worklist: [BB07 BB09 BB11 ]
Current block: BB07
Current block: BB09
Current block: BB11
Final LSRA Block Sequence:
BB01 (  1   )
BB02 (  1   ) critical-out
BB03 (  0.50)
BB04 (  1   ) critical-in
BB05 (  1   )
BB10 (  1   )
BB06 (  1   )
BB08 (  1   )
BB07 (  1   )
BB09 (  1   )
BB11 (  1   )

BB01 [???..???), preds={} succs={BB02}
=====
  N001.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N001.                    CNS_INT(h) 0x7ff7c6a33128 global ptr
  N002.                    IND      
  N003.                    CNS_INT   0
  N004.                    CMP      
  N005.                    JCC       cond=UEQ

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N001.                    CALL help

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
=====
  N000.                    IL_OFFSET INLRT @ 0x000[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x001[E-]
  N001. t4              =  LCL_ADDR  V11 tmp1         [+0]
  N000. t142            =  PUTARG_REG; t4
  N002. t2              =  CNS_INT(h) 0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N000. t143            =  PUTARG_REG; t2
  N003. t3              =  CNS_INT   0xF00
  N000. t144            =  PUTARG_REG; t3
  N001.                    CNS_INT(h) 0x7ff7c6a46418 ftn
  N002.                    IND      
  N004.                    CALL     ; t142,t143,t144
  N000.                    IL_OFFSET INLRT @ 0x010[--]
  N001.                    V11 MEM
  N000.                    LCL_ADDR  V01 loc0         [+0]
  N002.                    STORE_BLK
  N000.                    IL_OFFSET INLRT @ 0x011[E-]
  N001. t10             =  LCL_ADDR  V12 tmp2         [+0]
  N000. t148            =  PUTARG_REG; t10
  N002. t8              =  CNS_INT(h) 0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N000. t149            =  PUTARG_REG; t8
  N003. t9              =  CNS_INT   0xF00
  N000. t150            =  PUTARG_REG; t9
  N001.                    CNS_INT(h) 0x7ff7c6a46418 ftn
  N002.                    IND      
  N004.                    CALL     ; t148,t149,t150
  N000.                    IL_OFFSET INLRT @ 0x020[--]
  N001.                    V12 MEM
  N000.                    LCL_ADDR  V02 loc1         [+0]
  N002.                    STORE_BLK
  N000.                    IL_OFFSET INLRT @ 0x021[E-]
  N001.                    CNS_INT(h) 0x7ff7c6bafba0 ftn
  N002.                    IND      
  N001.                    CALL     
  N000.                    IL_OFFSET INLRT @ 0x026[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x027[E-]
  N001. t16             =  CNS_INT   0
  N002.                    V05 MEM; t16
  N000.                    IL_OFFSET INLRT @ 0x02A[E-]
  N001.                    NOP      

BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
=====
  N000.                    IL_OFFSET INLRT @ 0x054[E-]
  N001.                    V05 MEM
  N002.                    CNS_INT   0
  N003. t21             =  LE       
  N004.                    V09 MEM; t21
  N000.                    IL_OFFSET INLRT @ 0x05B[E-]
  N001.                    V09 MEM
  N002.                    CNS_INT   0
  N003.                    CMP      
  N004.                    JCC       cond=UNE

BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
=====
  N000.                    IL_OFFSET INLRT @ 0x02C[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x02D[E-]
  N001. t28             =  CNS_INT   0
  N002.                    V06 MEM; t28
  N000.                    IL_OFFSET INLRT @ 0x030[E-]
  N001.                    NOP      

BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
=====
  N000.                    IL_OFFSET INLRT @ 0x03E[E-]
  N001.                    V06 MEM
  N002.                    CNS_INT   0
  N003. t33             =  LE       
  N004.                    V08 MEM; t33
  N000.                    IL_OFFSET INLRT @ 0x045[E-]
  N001.                    V08 MEM
  N002.                    CNS_INT   0
  N003.                    CMP      
  N004.                    JCC       cond=UNE

BB07 [032..03E), preds={BB08} succs={BB08}
=====
  N000.                    IL_OFFSET INLRT @ 0x032[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x033[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x034[E-]
  N001. t41             =  V06 MEM
  N002.                    V07 MEM; t41
  N000.                    IL_OFFSET INLRT @ 0x038[E-]
  N001. t43             =  V07 MEM
  N002.                    CNS_INT   1
  N003. t45             =  ADD      ; t43
  N004.                    V06 MEM; t45

BB09 [049..054), preds={BB08} succs={BB10}
=====
  N000.                    IL_OFFSET INLRT @ 0x049[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x04A[E-]
  N001. t48             =  V05 MEM
  N002.                    V07 MEM; t48
  N000.                    IL_OFFSET INLRT @ 0x04E[E-]
  N001. t50             =  V07 MEM
  N002.                    CNS_INT   1
  N003. t52             =  ADD      ; t50
  N004.                    V05 MEM; t52

BB11 [05F..0A4) (return), preds={BB10} succs={}
=====
  N000.                    IL_OFFSET INLRT @ 0x05F[E-]
  N001. t97             =  CNS_INT(h)  'Ascii'

  N000. t156            =  PUTARG_REG; t97
  N001.                    CNS_INT(h) 0x7ff7c6bafcd8 ftn
  N002.                    IND      
  N002.                    CALL     ; t156
  N000.                    IL_OFFSET INLRT @ 0x069[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x06A[E-]
  N001.                    V01 MEM
  N000.                    LCL_ADDR  V17 tmp7         [+0]
  N002.                    STORE_BLK
  N003.                    V02 MEM
  N000.                    LCL_ADDR  V18 tmp8         [+0]
  N004.                    STORE_BLK
  N005. t100            =  LCL_ADDR  V17 tmp7         [+0]
  N000. t161            =  PUTARG_REG; t100
  N006. t101            =  LCL_ADDR  V18 tmp8         [+0]
  N000. t162            =  PUTARG_REG; t101
  N001.                    CNS_INT(h) 0x7ff7c6ad6880 ftn
  N002.                    IND      
  N007. t59             =  CALL     ; t161,t162
  N008.                    V13 MEM; t59
  N000.                    IL_OFFSET INLRT @ 0x071[--]
  N001. t61             =  V13 MEM
  N000. t165            =  PUTARG_REG; t61
  N001.                    CNS_INT(h) 0x7ff7c6bafbb8 ftn
  N002.                    IND      
  N002.                    CALL     ; t165
  N000.                    IL_OFFSET INLRT @ 0x076[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x077[E-]
  N001. t102            =  CNS_INT(h)  'String'

  N000. t168            =  PUTARG_REG; t102
  N001.                    CNS_INT(h) 0x7ff7c6bafcd8 ftn
  N002.                    IND      
  N002.                    CALL     ; t168
  N000.                    IL_OFFSET INLRT @ 0x081[E-]
  N001.                    NO_OP    
  N000.                    IL_OFFSET INLRT @ 0x082[E-]
  N001. t103            =  CNS_INT(h)  'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

  N002.                    V03 MEM; t103
  N000.                    IL_OFFSET INLRT @ 0x088[E-]
  N001. t70             =  CNS_INT(h) 0x7ff7c6bf3378 class
  N000. t171            =  PUTARG_REG; t70
  N002. t69             =  CNS_INT   3
  N000. t172            =  PUTARG_REG; t69
  N003. t71             =  CALL help; t171,t172
  N004.                    V14 MEM; t71
  N000.                    IL_OFFSET INLRT @ 0x08E[--]
  N001. t75             =  CNS_INT(h) 0x7ff7c6bf36f8 field
  N000. t173            =  PUTARG_REG; t75
  N002. t76             =  CALL help; t173
  N003.                    V15 MEM; t76
  N001. t74             =  V14 MEM
  N000. t174            =  PUTARG_REG; t74
  N002. t79             =  V15 MEM
  N000. t175            =  PUTARG_REG; t79
  N003.                    CALL     ; t174,t175
  N000.                    IL_OFFSET INLRT @ 0x099[--]
  N001. t73             =  V14 MEM
  N002.                    V04 MEM; t73
  N000.                    IL_OFFSET INLRT @ 0x09A[E-]
  N001. t81             =  V03 MEM
  N000. t176            =  PUTARG_REG; t81
  N002. t82             =  V04 MEM
  N000. t177            =  PUTARG_REG; t82
  N003. t83             =  CNS_INT   1
  N000. t178            =  PUTARG_REG; t83
  N001.                    CNS_INT(h) 0x7ff7c6a44678 ftn
  N002.                    IND      
  N004. t84             =  CALL     ; t176,t177,t178
  N005.                    V16 MEM; t84
  N000.                    IL_OFFSET INLRT @ 0x0A2[--]
  N001.                    NOP      
  N000.                    IL_OFFSET INLRT @ 0x0A3[E-]
  N001.                    RETURN   




buildIntervals second part ========
Int arg V00 in reg rcx

NEW BLOCK BB01
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N002 (  0,  0) [000000] -----------                         *  NOP       void   REG NA


NEW BLOCK BB02


Setting BB01 as the predecessor for determining incoming variable registers of BB02
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N006 (  3, 10) [000089] Hc---------                         *  CNS_INT(h) long   0x7ff7c6a33128 global ptr REG NA
Contained
DefList: {  }
N008 (  5, 12) [000090] nc--G------                         *  IND       int    REG NA
Contained
DefList: {  }
N010 (  1,  1) [000091] -c---------                         *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N012 (  7, 14) [000092] ----G--N---                         *  CMP       void   REG NA

DefList: {  }
N014 (  9, 16) [000104] ----G------                         *  JCC       void   cond=UEQ REG NA


NEW BLOCK BB03


Setting BB02 as the predecessor for determining incoming variable registers of BB03
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>

DefList: {  }
N018 ( 14,  5) [000093] --C-G-?----                         *  CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 wt=50.00>


NEW BLOCK BB04


Setting BB02 as the predecessor for determining incoming variable registers of BB04
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB05


Setting BB04 as the predecessor for determining incoming variable registers of BB05
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N024 (???,???) [000105] -----------                         *  IL_OFFSET void   INLRT @ 0x000[E-] REG NA

DefList: {  }
N026 (  1,  1) [000001] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N028 (???,???) [000106] -----------                         *  IL_OFFSET void   INLRT @ 0x001[E-] REG NA

DefList: {  }
N030 (  3,  3) [000004] -----------                         *  LCL_ADDR  long   V11 tmp1         [+0] NA REG NA
Interval  0: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N030.t4. LCL_ADDR }
N032 (???,???) [000142] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval  1: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N032.t142. PUTARG_REG }
N034 (  3, 10) [000002] H----------                         *  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG NA
Interval  2: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N032.t142. PUTARG_REG; N034.t2. CNS_INT }
N036 (???,???) [000143] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval  3: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N032.t142. PUTARG_REG; N036.t143. PUTARG_REG }
N038 (  1,  4) [000003] -----------                         *  CNS_INT   int    0xF00 REG NA
Interval  4: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N032.t142. PUTARG_REG; N036.t143. PUTARG_REG; N038.t3. CNS_INT }
N040 (???,???) [000144] -----------                         *  PUTARG_REG int    REG r8
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval  5: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N032.t142. PUTARG_REG; N036.t143. PUTARG_REG; N040.t144. PUTARG_REG }
N042 (  3, 10) [000145] Hc---------                         *  CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
Contained
DefList: { N032.t142. PUTARG_REG; N036.t143. PUTARG_REG; N040.t144. PUTARG_REG }
N044 (  5, 12) [000146] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N032.t142. PUTARG_REG; N036.t143. PUTARG_REG; N040.t144. PUTARG_REG }
N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N048 (???,???) [000107] -----------                         *  IL_OFFSET void   INLRT @ 0x010[--] REG NA

DefList: {  }
N050 (  9,  6) [000006] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
Contained
DefList: {  }
N052 (???,???) [000147] Dc---------                         *  LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
Contained
DefList: {  }
N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval  6: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N056 (???,???) [000108] -----------                         *  IL_OFFSET void   INLRT @ 0x011[E-] REG NA

DefList: {  }
N058 (  3,  3) [000010] -----------                         *  LCL_ADDR  long   V12 tmp2         [+0] NA REG NA
Interval  7: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N058.t10. LCL_ADDR }
N060 (???,???) [000148] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval  8: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N060.t148. PUTARG_REG }
N062 (  3, 10) [000008] H----------                         *  CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG NA
Interval  9: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N060.t148. PUTARG_REG; N062.t8. CNS_INT }
N064 (???,???) [000149] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 10: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N060.t148. PUTARG_REG; N064.t149. PUTARG_REG }
N066 (  1,  4) [000009] -----------                         *  CNS_INT   int    0xF00 REG NA
Interval 11: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N060.t148. PUTARG_REG; N064.t149. PUTARG_REG; N066.t9. CNS_INT }
N068 (???,???) [000150] -----------                         *  PUTARG_REG int    REG r8
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval 12: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N060.t148. PUTARG_REG; N064.t149. PUTARG_REG; N068.t150. PUTARG_REG }
N070 (  3, 10) [000151] Hc---------                         *  CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
Contained
DefList: { N060.t148. PUTARG_REG; N064.t149. PUTARG_REG; N068.t150. PUTARG_REG }
N072 (  5, 12) [000152] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N060.t148. PUTARG_REG; N064.t149. PUTARG_REG; N068.t150. PUTARG_REG }
N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N076 (???,???) [000109] -----------                         *  IL_OFFSET void   INLRT @ 0x020[--] REG NA

DefList: {  }
N078 (  9,  6) [000012] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
Contained
DefList: {  }
N080 (???,???) [000153] Dc---------                         *  LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
Contained
DefList: {  }
N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval 13: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N084 (???,???) [000110] -----------                         *  IL_OFFSET void   INLRT @ 0x021[E-] REG NA

DefList: {  }
N086 (  3, 10) [000154] Hc---------                         *  CNS_INT(h) long   0x7ff7c6bafba0 ftn REG NA
Contained
DefList: {  }
N088 (  5, 12) [000155] nc--G------                         *  IND       long   REG NA
Contained
DefList: {  }
N090 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine() REG NA
<RefPosition #72  @91  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #73  @91  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #74  @91  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #75  @91  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #76  @91  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #77  @91  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #78  @91  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N092 (???,???) [000111] -----------                         *  IL_OFFSET void   INLRT @ 0x026[E-] REG NA

DefList: {  }
N094 (  1,  1) [000015] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N096 (???,???) [000112] -----------                         *  IL_OFFSET void   INLRT @ 0x027[E-] REG NA

DefList: {  }
N098 (  1,  1) [000016] -----------                         *  CNS_INT   int    0 REG NA
Interval 14: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #79  @99  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N098.t16. CNS_INT }
N100 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA
<RefPosition #80  @100 RefTypeUse <Ivl:14> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N102 (???,???) [000113] -----------                         *  IL_OFFSET void   INLRT @ 0x02A[E-] REG NA

DefList: {  }
N104 (  0,  0) [000018] -----------                         *  NOP       void   REG NA


NEW BLOCK BB10


Setting BB05 as the predecessor for determining incoming variable registers of BB10
<RefPosition #81  @106 RefTypeBB BB10 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N108 (???,???) [000126] -----------                         *  IL_OFFSET void   INLRT @ 0x054[E-] REG NA

DefList: {  }
N110 (  3,  2) [000019] -c---------                         *  LCL_VAR   int    V05 loc4          NA REG NA
Contained
DefList: {  }
N112 (  1,  1) [000020] -c---------                         *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N114 (  8,  4) [000021] -----------                         *  LE        int    REG NA
Interval 15: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #82  @115 RefTypeDef <Ivl:15> LE BB10 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N114.t21. LE }
N116 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8          NA REG NA
<RefPosition #83  @116 RefTypeUse <Ivl:15> BB10 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N118 (???,???) [000127] -----------                         *  IL_OFFSET void   INLRT @ 0x05B[E-] REG NA

DefList: {  }
N120 (  3,  2) [000023] -c---------                         *  LCL_VAR   int    V09 loc8          NA REG NA
Contained
DefList: {  }
N122 (  1,  1) [000024] -c---------                         *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N124 (  5,  4) [000025] -------N---                         *  CMP       void   REG NA

DefList: {  }
N126 (  7,  6) [000026] -----------                         *  JCC       void   cond=UNE REG NA


NEW BLOCK BB06


Setting BB10 as the predecessor for determining incoming variable registers of BB06
<RefPosition #84  @128 RefTypeBB BB06 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N130 (???,???) [000114] -----------                         *  IL_OFFSET void   INLRT @ 0x02C[E-] REG NA

DefList: {  }
N132 (  1,  1) [000027] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N134 (???,???) [000115] -----------                         *  IL_OFFSET void   INLRT @ 0x02D[E-] REG NA

DefList: {  }
N136 (  1,  1) [000028] -----------                         *  CNS_INT   int    0 REG NA
Interval 16: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #85  @137 RefTypeDef <Ivl:16> CNS_INT BB06 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N136.t28. CNS_INT }
N138 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA
<RefPosition #86  @138 RefTypeUse <Ivl:16> BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N140 (???,???) [000116] -----------                         *  IL_OFFSET void   INLRT @ 0x030[E-] REG NA

DefList: {  }
N142 (  0,  0) [000030] -----------                         *  NOP       void   REG NA


NEW BLOCK BB08


Setting BB06 as the predecessor for determining incoming variable registers of BB08
<RefPosition #87  @144 RefTypeBB BB08 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N146 (???,???) [000121] -----------                         *  IL_OFFSET void   INLRT @ 0x03E[E-] REG NA

DefList: {  }
N148 (  3,  2) [000031] -c---------                         *  LCL_VAR   int    V06 loc5          NA REG NA
Contained
DefList: {  }
N150 (  1,  1) [000032] -c---------                         *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N152 (  8,  4) [000033] -----------                         *  LE        int    REG NA
Interval 17: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #88  @153 RefTypeDef <Ivl:17> LE BB08 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N152.t33. LE }
N154 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7          NA REG NA
<RefPosition #89  @154 RefTypeUse <Ivl:17> BB08 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N156 (???,???) [000122] -----------                         *  IL_OFFSET void   INLRT @ 0x045[E-] REG NA

DefList: {  }
N158 (  3,  2) [000035] -c---------                         *  LCL_VAR   int    V08 loc7          NA REG NA
Contained
DefList: {  }
N160 (  1,  1) [000036] -c---------                         *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N162 (  5,  4) [000037] -------N---                         *  CMP       void   REG NA

DefList: {  }
N164 (  7,  6) [000038] -----------                         *  JCC       void   cond=UNE REG NA


NEW BLOCK BB07


Setting BB08 as the predecessor for determining incoming variable registers of BB07
<RefPosition #90  @166 RefTypeBB BB07 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N168 (???,???) [000117] -----------                         *  IL_OFFSET void   INLRT @ 0x032[E-] REG NA

DefList: {  }
N170 (  1,  1) [000039] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N172 (???,???) [000118] -----------                         *  IL_OFFSET void   INLRT @ 0x033[E-] REG NA

DefList: {  }
N174 (  1,  1) [000040] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N176 (???,???) [000119] -----------                         *  IL_OFFSET void   INLRT @ 0x034[E-] REG NA

DefList: {  }
N178 (  3,  2) [000041] -----------                         *  LCL_VAR   int    V06 loc5          NA REG NA
Interval 18: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #91  @179 RefTypeDef <Ivl:18> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N178.t41. LCL_VAR }
N180 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
<RefPosition #92  @180 RefTypeUse <Ivl:18> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N182 (???,???) [000120] -----------                         *  IL_OFFSET void   INLRT @ 0x038[E-] REG NA

DefList: {  }
N184 (  3,  2) [000043] -----------                         *  LCL_VAR   int    V07 loc6          NA REG NA
Interval 19: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #93  @185 RefTypeDef <Ivl:19> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N184.t43. LCL_VAR }
N186 (  1,  1) [000044] -c---------                         *  CNS_INT   int    1 REG NA
Contained
DefList: { N184.t43. LCL_VAR }
N188 (  5,  4) [000045] -----------                         *  ADD       int    REG NA
<RefPosition #94  @188 RefTypeUse <Ivl:19> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 20: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #95  @189 RefTypeDef <Ivl:20> ADD BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
Assigning related <I20> to <I19>

DefList: { N188.t45. ADD }
N190 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA
<RefPosition #96  @190 RefTypeUse <Ivl:20> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>


NEW BLOCK BB09


Setting BB08 as the predecessor for determining incoming variable registers of BB09
<RefPosition #97  @192 RefTypeBB BB09 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N194 (???,???) [000123] -----------                         *  IL_OFFSET void   INLRT @ 0x049[E-] REG NA

DefList: {  }
N196 (  1,  1) [000047] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N198 (???,???) [000124] -----------                         *  IL_OFFSET void   INLRT @ 0x04A[E-] REG NA

DefList: {  }
N200 (  3,  2) [000048] -----------                         *  LCL_VAR   int    V05 loc4          NA REG NA
Interval 21: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #98  @201 RefTypeDef <Ivl:21> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N200.t48. LCL_VAR }
N202 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
<RefPosition #99  @202 RefTypeUse <Ivl:21> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N204 (???,???) [000125] -----------                         *  IL_OFFSET void   INLRT @ 0x04E[E-] REG NA

DefList: {  }
N206 (  3,  2) [000050] -----------                         *  LCL_VAR   int    V07 loc6          NA REG NA
Interval 22: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #100 @207 RefTypeDef <Ivl:22> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N206.t50. LCL_VAR }
N208 (  1,  1) [000051] -c---------                         *  CNS_INT   int    1 REG NA
Contained
DefList: { N206.t50. LCL_VAR }
N210 (  5,  4) [000052] -----------                         *  ADD       int    REG NA
<RefPosition #101 @210 RefTypeUse <Ivl:22> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 23: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #102 @211 RefTypeDef <Ivl:23> ADD BB09 regmask=[allIntButFP] minReg=1 wt=400.00>
Assigning related <I23> to <I22>

DefList: { N210.t52. ADD }
N212 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA
<RefPosition #103 @212 RefTypeUse <Ivl:23> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>


NEW BLOCK BB11


Setting BB10 as the predecessor for determining incoming variable registers of BB11
<RefPosition #104 @214 RefTypeBB BB11 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N216 (???,???) [000128] -----------                         *  IL_OFFSET void   INLRT @ 0x05F[E-] REG NA

DefList: {  }
N218 (  3, 10) [000097] H----------                         *  CNS_INT(h) ref     'Ascii'
 REG NA
Interval 24: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #105 @219 RefTypeDef <Ivl:24> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N218.t97. CNS_INT }
N220 (???,???) [000156] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #106 @220 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #107 @220 RefTypeUse <Ivl:24> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 25: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #108 @221 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #109 @221 RefTypeDef <Ivl:25> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N220.t156. PUTARG_REG }
N222 (  3, 10) [000157] Hc---------                         *  CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
Contained
DefList: { N220.t156. PUTARG_REG }
N224 (  5, 12) [000158] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N220.t156. PUTARG_REG }
N226 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
<RefPosition #110 @226 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #111 @226 RefTypeUse <Ivl:25> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #112 @227 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #113 @227 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #114 @227 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #115 @227 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #116 @227 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #117 @227 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #118 @227 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N228 (???,???) [000129] -----------                         *  IL_OFFSET void   INLRT @ 0x069[E-] REG NA

DefList: {  }
N230 (  1,  1) [000056] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N232 (???,???) [000130] -----------                         *  IL_OFFSET void   INLRT @ 0x06A[E-] REG NA

DefList: {  }
N234 (  9,  6) [000057] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
Contained
DefList: {  }
N236 (???,???) [000159] Dc---------                         *  LCL_ADDR  byref  V17 tmp7         [+0] NA REG NA
Contained
DefList: {  }
N238 ( 19, 13) [000098] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval 26: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #119 @238 RefTypeDef <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #120 @238 RefTypeUse <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N240 (  9,  6) [000058] -c---------                         *  LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
Contained
DefList: {  }
N242 (???,???) [000160] Dc---------                         *  LCL_ADDR  byref  V18 tmp8         [+0] NA REG NA
Contained
DefList: {  }
N244 ( 19, 13) [000099] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Interval 27: float RefPositions {} physReg:NA Preferences=[allFloat]
<RefPosition #121 @244 RefTypeDef <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #122 @244 RefTypeUse <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>

DefList: {  }
N246 (  3,  3) [000100] -----------                         *  LCL_ADDR  long   V17 tmp7         [+0] NA REG NA
Interval 28: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #123 @247 RefTypeDef <Ivl:28> LCL_ADDR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N246.t100. LCL_ADDR }
N248 (???,???) [000161] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #124 @248 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #125 @248 RefTypeUse <Ivl:28> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 29: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #126 @249 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #127 @249 RefTypeDef <Ivl:29> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N248.t161. PUTARG_REG }
N250 (  3,  3) [000101] -----------                         *  LCL_ADDR  long   V18 tmp8         [+0] NA REG NA
Interval 30: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #128 @251 RefTypeDef <Ivl:30> LCL_ADDR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N248.t161. PUTARG_REG; N250.t101. LCL_ADDR }
N252 (???,???) [000162] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #129 @252 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #130 @252 RefTypeUse <Ivl:30> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 31: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #131 @253 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #132 @253 RefTypeDef <Ivl:31> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N248.t161. PUTARG_REG; N252.t162. PUTARG_REG }
N254 (  3, 10) [000163] Hc---------                         *  CNS_INT(h) long   0x7ff7c6ad6880 ftn REG NA
Contained
DefList: { N248.t161. PUTARG_REG; N252.t162. PUTARG_REG }
N256 (  5, 12) [000164] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N248.t161. PUTARG_REG; N252.t162. PUTARG_REG }
N258 ( 64, 39) [000059] --CXG------                         *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG NA
<RefPosition #133 @258 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @258 RefTypeUse <Ivl:29> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @258 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #136 @258 RefTypeUse <Ivl:31> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #137 @259 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #138 @259 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #139 @259 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #140 @259 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #141 @259 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #142 @259 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #143 @259 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>
Interval 32: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #144 @259 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #145 @259 RefTypeDef <Ivl:32> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N258.t59. CALL }
N260 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
<RefPosition #146 @260 RefTypeUse <Ivl:32> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N262 (???,???) [000131] -----------                         *  IL_OFFSET void   INLRT @ 0x071[--] REG NA

DefList: {  }
N264 (  3,  2) [000061] -----------                         *  LCL_VAR   int    V13 tmp3          NA REG NA
Interval 33: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #147 @265 RefTypeDef <Ivl:33> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N264.t61. LCL_VAR }
N266 (???,???) [000165] -----------                         *  PUTARG_REG int    REG rcx
<RefPosition #148 @266 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #149 @266 RefTypeUse <Ivl:33> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 34: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #150 @267 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #151 @267 RefTypeDef <Ivl:34> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N266.t165. PUTARG_REG }
N268 (  3, 10) [000166] Hc---------                         *  CNS_INT(h) long   0x7ff7c6bafbb8 ftn REG NA
Contained
DefList: { N266.t165. PUTARG_REG }
N270 (  5, 12) [000167] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N266.t165. PUTARG_REG }
N272 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
<RefPosition #152 @272 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #153 @272 RefTypeUse <Ivl:34> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #154 @273 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #155 @273 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #156 @273 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #157 @273 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #158 @273 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #159 @273 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #160 @273 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N274 (???,???) [000132] -----------                         *  IL_OFFSET void   INLRT @ 0x076[E-] REG NA

DefList: {  }
N276 (  1,  1) [000063] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N278 (???,???) [000133] -----------                         *  IL_OFFSET void   INLRT @ 0x077[E-] REG NA

DefList: {  }
N280 (  3, 10) [000102] H----------                         *  CNS_INT(h) ref     'String'
 REG NA
Interval 35: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #161 @281 RefTypeDef <Ivl:35> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N280.t102. CNS_INT }
N282 (???,???) [000168] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #162 @282 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #163 @282 RefTypeUse <Ivl:35> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 36: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #164 @283 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #165 @283 RefTypeDef <Ivl:36> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N282.t168. PUTARG_REG }
N284 (  3, 10) [000169] Hc---------                         *  CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
Contained
DefList: { N282.t168. PUTARG_REG }
N286 (  5, 12) [000170] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N282.t168. PUTARG_REG }
N288 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
<RefPosition #166 @288 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #167 @288 RefTypeUse <Ivl:36> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #168 @289 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #169 @289 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #170 @289 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #171 @289 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #172 @289 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #173 @289 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #174 @289 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N290 (???,???) [000134] -----------                         *  IL_OFFSET void   INLRT @ 0x081[E-] REG NA

DefList: {  }
N292 (  1,  1) [000066] -----------                         *  NO_OP     void   REG NA

DefList: {  }
N294 (???,???) [000135] -----------                         *  IL_OFFSET void   INLRT @ 0x082[E-] REG NA

DefList: {  }
N296 (  3, 10) [000103] H----------                         *  CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG NA
Interval 37: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #175 @297 RefTypeDef <Ivl:37> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N296.t103. CNS_INT }
N298 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
<RefPosition #176 @298 RefTypeUse <Ivl:37> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N300 (???,???) [000136] -----------                         *  IL_OFFSET void   INLRT @ 0x088[E-] REG NA

DefList: {  }
N302 (  3, 10) [000070] H----------                         *  CNS_INT(h) long   0x7ff7c6bf3378 class REG NA
Interval 38: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #177 @303 RefTypeDef <Ivl:38> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N302.t70. CNS_INT }
N304 (???,???) [000171] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #178 @304 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @304 RefTypeUse <Ivl:38> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 39: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #180 @305 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #181 @305 RefTypeDef <Ivl:39> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N304.t171. PUTARG_REG }
N306 (  1,  1) [000069] -----------                         *  CNS_INT   long   3 REG NA
Interval 40: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #182 @307 RefTypeDef <Ivl:40> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N304.t171. PUTARG_REG; N306.t69. CNS_INT }
N308 (???,???) [000172] -----------                         *  PUTARG_REG long   REG rdx
<RefPosition #183 @308 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #184 @308 RefTypeUse <Ivl:40> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 41: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #185 @309 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #186 @309 RefTypeDef <Ivl:41> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N304.t171. PUTARG_REG; N308.t172. PUTARG_REG }
N310 ( 18, 18) [000071] --CXG------                         *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG NA
<RefPosition #187 @310 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #188 @310 RefTypeUse <Ivl:39> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #189 @310 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #190 @310 RefTypeUse <Ivl:41> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #191 @311 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #192 @311 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #193 @311 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #194 @311 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #195 @311 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #196 @311 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #197 @311 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>
Interval 42: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #198 @311 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #199 @311 RefTypeDef <Ivl:42> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N310.t71. CALL }
N312 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
<RefPosition #200 @312 RefTypeUse <Ivl:42> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N314 (???,???) [000137] -----------                         *  IL_OFFSET void   INLRT @ 0x08E[--] REG NA

DefList: {  }
N316 (  3, 10) [000075] H----------                         *  CNS_INT(h) long   0x7ff7c6bf36f8 field REG NA
Interval 43: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #201 @317 RefTypeDef <Ivl:43> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N316.t75. CNS_INT }
N318 (???,???) [000173] -----------                         *  PUTARG_REG long   REG rcx
<RefPosition #202 @318 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #203 @318 RefTypeUse <Ivl:43> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 44: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #204 @319 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @319 RefTypeDef <Ivl:44> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N318.t173. PUTARG_REG }
N320 ( 17, 16) [000076] --CXG------                         *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG NA
<RefPosition #206 @320 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #207 @320 RefTypeUse <Ivl:44> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @321 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #209 @321 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @321 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #211 @321 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #212 @321 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #213 @321 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #214 @321 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>
Interval 45: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #215 @321 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #216 @321 RefTypeDef <Ivl:45> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N320.t76. CALL }
N322 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
<RefPosition #217 @322 RefTypeUse <Ivl:45> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N324 (  3,  2) [000074] -----------                         *  LCL_VAR   ref    V14 tmp4          NA REG NA
Interval 46: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #218 @325 RefTypeDef <Ivl:46> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N324.t74. LCL_VAR }
N326 (???,???) [000174] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #219 @326 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #220 @326 RefTypeUse <Ivl:46> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 47: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #221 @327 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #222 @327 RefTypeDef <Ivl:47> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N326.t174. PUTARG_REG }
N328 (  3,  4) [000079] -----------                         *  LCL_FLD   ref    V15 tmp5         [+0] NA REG NA
Interval 48: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #223 @329 RefTypeDef <Ivl:48> LCL_FLD BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N326.t174. PUTARG_REG; N328.t79. LCL_FLD }
N330 (???,???) [000175] -----------                         *  PUTARG_REG ref    REG rdx
<RefPosition #224 @330 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #225 @330 RefTypeUse <Ivl:48> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 49: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #226 @331 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #227 @331 RefTypeDef <Ivl:49> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N326.t174. PUTARG_REG; N330.t175. PUTARG_REG }
N332 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
<RefPosition #228 @332 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #229 @332 RefTypeUse <Ivl:47> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #230 @332 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #231 @332 RefTypeUse <Ivl:49> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #232 @333 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #233 @333 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #234 @333 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #235 @333 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #236 @333 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #237 @333 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #238 @333 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N334 (???,???) [000138] -----------                         *  IL_OFFSET void   INLRT @ 0x099[--] REG NA

DefList: {  }
N336 (  3,  2) [000073] -----------                         *  LCL_VAR   ref    V14 tmp4          NA REG NA
Interval 50: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #239 @337 RefTypeDef <Ivl:50> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N336.t73. LCL_VAR }
N338 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
<RefPosition #240 @338 RefTypeUse <Ivl:50> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N340 (???,???) [000139] -----------                         *  IL_OFFSET void   INLRT @ 0x09A[E-] REG NA

DefList: {  }
N342 (  3,  2) [000081] -----------                         *  LCL_VAR   ref    V03 loc2          NA REG NA
Interval 51: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #241 @343 RefTypeDef <Ivl:51> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N342.t81. LCL_VAR }
N344 (???,???) [000176] -----------                         *  PUTARG_REG ref    REG rcx
<RefPosition #242 @344 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @344 RefTypeUse <Ivl:51> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 52: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #244 @345 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #245 @345 RefTypeDef <Ivl:52> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N344.t176. PUTARG_REG }
N346 (  3,  2) [000082] -----------                         *  LCL_VAR   ref    V04 loc3          NA REG NA
Interval 53: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #246 @347 RefTypeDef <Ivl:53> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N344.t176. PUTARG_REG; N346.t82. LCL_VAR }
N348 (???,???) [000177] -----------                         *  PUTARG_REG ref    REG rdx
<RefPosition #247 @348 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @348 RefTypeUse <Ivl:53> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 54: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #249 @349 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #250 @349 RefTypeDef <Ivl:54> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N344.t176. PUTARG_REG; N348.t177. PUTARG_REG }
N350 (  1,  1) [000083] -----------                         *  CNS_INT   int    1 REG NA
Interval 55: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #251 @351 RefTypeDef <Ivl:55> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N344.t176. PUTARG_REG; N348.t177. PUTARG_REG; N350.t83. CNS_INT }
N352 (???,???) [000178] -----------                         *  PUTARG_REG int    REG r8
<RefPosition #252 @352 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #253 @352 RefTypeUse <Ivl:55> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval 56: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #254 @353 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #255 @353 RefTypeDef <Ivl:56> PUTARG_REG BB11 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N344.t176. PUTARG_REG; N348.t177. PUTARG_REG; N352.t178. PUTARG_REG }
N354 (  3, 10) [000179] Hc---------                         *  CNS_INT(h) long   0x7ff7c6a44678 ftn REG NA
Contained
DefList: { N344.t176. PUTARG_REG; N348.t177. PUTARG_REG; N352.t178. PUTARG_REG }
N356 (  5, 12) [000180] nc--G------                         *  IND       long   REG NA
Contained
DefList: { N344.t176. PUTARG_REG; N348.t177. PUTARG_REG; N352.t178. PUTARG_REG }
N358 ( 21, 13) [000084] --CXG------                         *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[] REG NA
<RefPosition #256 @358 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @358 RefTypeUse <Ivl:52> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #258 @358 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #259 @358 RefTypeUse <Ivl:54> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @358 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #261 @358 RefTypeUse <Ivl:56> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #262 @359 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #263 @359 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #264 @359 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #265 @359 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #266 @359 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #267 @359 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #268 @359 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 wt=100.00>
Interval 57: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #269 @359 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #270 @359 RefTypeDef <Ivl:57> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N358.t84. CALL }
N360 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
<RefPosition #271 @360 RefTypeUse <Ivl:57> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N362 (???,???) [000140] -----------                         *  IL_OFFSET void   INLRT @ 0x0A2[--] REG NA

DefList: {  }
N364 (  0,  0) [000087] -----------                         *  NOP       void   REG NA

DefList: {  }
N366 (???,???) [000141] -----------                         *  IL_OFFSET void   INLRT @ 0x0A3[E-] REG NA

DefList: {  }
N368 (  0,  0) [000088] -----------                         *  RETURN    void   REG NA


Linear scan intervals BEFORE VALIDATING INTERVALS:
Interval  0: long RefPositions {#12@31 #14@32} physReg:NA Preferences=[rcx]
Interval  1: long RefPositions {#16@33 #28@46} physReg:NA Preferences=[rcx]
Interval  2: long (constant) RefPositions {#17@35 #19@36} physReg:NA Preferences=[rdx]
Interval  3: long RefPositions {#21@37 #30@46} physReg:NA Preferences=[rdx]
Interval  4: int (constant) RefPositions {#22@39 #24@40} physReg:NA Preferences=[r8]
Interval  5: int RefPositions {#26@41 #32@46} physReg:NA Preferences=[r8]
Interval  6: float (INTERNAL) RefPositions {#40@54 #41@54} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval  7: long RefPositions {#42@59 #44@60} physReg:NA Preferences=[rcx]
Interval  8: long RefPositions {#46@61 #58@74} physReg:NA Preferences=[rcx]
Interval  9: long (constant) RefPositions {#47@63 #49@64} physReg:NA Preferences=[rdx]
Interval 10: long RefPositions {#51@65 #60@74} physReg:NA Preferences=[rdx]
Interval 11: int (constant) RefPositions {#52@67 #54@68} physReg:NA Preferences=[r8]
Interval 12: int RefPositions {#56@69 #62@74} physReg:NA Preferences=[r8]
Interval 13: float (INTERNAL) RefPositions {#70@82 #71@82} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 14: int (constant) RefPositions {#79@99 #80@100} physReg:NA Preferences=[allIntButFP]
Interval 15: int RefPositions {#82@115 #83@116} physReg:NA Preferences=[allIntButFP]
Interval 16: int (constant) RefPositions {#85@137 #86@138} physReg:NA Preferences=[allIntButFP]
Interval 17: int RefPositions {#88@153 #89@154} physReg:NA Preferences=[allIntButFP]
Interval 18: int RefPositions {#91@179 #92@180} physReg:NA Preferences=[allIntButFP]
Interval 19: int RefPositions {#93@185 #94@188} physReg:NA Preferences=[allIntButFP] RelatedInterval <I20>
Interval 20: int RefPositions {#95@189 #96@190} physReg:NA Preferences=[allIntButFP]
Interval 21: int RefPositions {#98@201 #99@202} physReg:NA Preferences=[allIntButFP]
Interval 22: int RefPositions {#100@207 #101@210} physReg:NA Preferences=[allIntButFP] RelatedInterval <I23>
Interval 23: int RefPositions {#102@211 #103@212} physReg:NA Preferences=[allIntButFP]
Interval 24: ref (constant) RefPositions {#105@219 #107@220} physReg:NA Preferences=[rcx]
Interval 25: ref RefPositions {#109@221 #111@226} physReg:NA Preferences=[rcx]
Interval 26: float (INTERNAL) RefPositions {#119@238 #120@238} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 27: float (INTERNAL) RefPositions {#121@244 #122@244} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 28: long RefPositions {#123@247 #125@248} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#127@249 #134@258} physReg:NA Preferences=[rcx]
Interval 30: long RefPositions {#128@251 #130@252} physReg:NA Preferences=[rdx]
Interval 31: long RefPositions {#132@253 #136@258} physReg:NA Preferences=[rdx]
Interval 32: int RefPositions {#145@259 #146@260} physReg:NA Preferences=[rax]
Interval 33: int RefPositions {#147@265 #149@266} physReg:NA Preferences=[rcx]
Interval 34: int RefPositions {#151@267 #153@272} physReg:NA Preferences=[rcx]
Interval 35: ref (constant) RefPositions {#161@281 #163@282} physReg:NA Preferences=[rcx]
Interval 36: ref RefPositions {#165@283 #167@288} physReg:NA Preferences=[rcx]
Interval 37: ref (constant) RefPositions {#175@297 #176@298} physReg:NA Preferences=[allIntButFP]
Interval 38: long (constant) RefPositions {#177@303 #179@304} physReg:NA Preferences=[rcx]
Interval 39: long RefPositions {#181@305 #188@310} physReg:NA Preferences=[rcx]
Interval 40: long (constant) RefPositions {#182@307 #184@308} physReg:NA Preferences=[rdx]
Interval 41: long RefPositions {#186@309 #190@310} physReg:NA Preferences=[rdx]
Interval 42: ref RefPositions {#199@311 #200@312} physReg:NA Preferences=[rax]
Interval 43: long (constant) RefPositions {#201@317 #203@318} physReg:NA Preferences=[rcx]
Interval 44: long RefPositions {#205@319 #207@320} physReg:NA Preferences=[rcx]
Interval 45: ref RefPositions {#216@321 #217@322} physReg:NA Preferences=[rax]
Interval 46: ref RefPositions {#218@325 #220@326} physReg:NA Preferences=[rcx]
Interval 47: ref RefPositions {#222@327 #229@332} physReg:NA Preferences=[rcx]
Interval 48: ref RefPositions {#223@329 #225@330} physReg:NA Preferences=[rdx]
Interval 49: ref RefPositions {#227@331 #231@332} physReg:NA Preferences=[rdx]
Interval 50: ref RefPositions {#239@337 #240@338} physReg:NA Preferences=[allIntButFP]
Interval 51: ref RefPositions {#241@343 #243@344} physReg:NA Preferences=[rcx]
Interval 52: ref RefPositions {#245@345 #257@358} physReg:NA Preferences=[rcx]
Interval 53: ref RefPositions {#246@347 #248@348} physReg:NA Preferences=[rdx]
Interval 54: ref RefPositions {#250@349 #259@358} physReg:NA Preferences=[rdx]
Interval 55: int (constant) RefPositions {#251@351 #253@352} physReg:NA Preferences=[r8]
Interval 56: int RefPositions {#255@353 #261@358} physReg:NA Preferences=[r8]
Interval 57: ref RefPositions {#270@359 #271@360} physReg:NA Preferences=[rax]

------------
REFPOSITIONS BEFORE VALIDATING INTERVALS: 
------------
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #72  @91  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #73  @91  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #74  @91  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #75  @91  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #76  @91  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #77  @91  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #78  @91  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #79  @99  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #80  @100 RefTypeUse <Ivl:14> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #81  @106 RefTypeBB BB10 regmask=[] minReg=1 wt=100.00>
<RefPosition #82  @115 RefTypeDef <Ivl:15> LE BB10 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #83  @116 RefTypeUse <Ivl:15> BB10 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #84  @128 RefTypeBB BB06 regmask=[] minReg=1 wt=100.00>
<RefPosition #85  @137 RefTypeDef <Ivl:16> CNS_INT BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #86  @138 RefTypeUse <Ivl:16> BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #87  @144 RefTypeBB BB08 regmask=[] minReg=1 wt=100.00>
<RefPosition #88  @153 RefTypeDef <Ivl:17> LE BB08 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #89  @154 RefTypeUse <Ivl:17> BB08 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #90  @166 RefTypeBB BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #91  @179 RefTypeDef <Ivl:18> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #92  @180 RefTypeUse <Ivl:18> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #93  @185 RefTypeDef <Ivl:19> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #94  @188 RefTypeUse <Ivl:19> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #95  @189 RefTypeDef <Ivl:20> ADD BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #96  @190 RefTypeUse <Ivl:20> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #97  @192 RefTypeBB BB09 regmask=[] minReg=1 wt=100.00>
<RefPosition #98  @201 RefTypeDef <Ivl:21> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #99  @202 RefTypeUse <Ivl:21> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #100 @207 RefTypeDef <Ivl:22> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #101 @210 RefTypeUse <Ivl:22> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #102 @211 RefTypeDef <Ivl:23> ADD BB09 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #103 @212 RefTypeUse <Ivl:23> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #104 @214 RefTypeBB BB11 regmask=[] minReg=1 wt=100.00>
<RefPosition #105 @219 RefTypeDef <Ivl:24> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #106 @220 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #107 @220 RefTypeUse <Ivl:24> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #108 @221 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #109 @221 RefTypeDef <Ivl:25> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #110 @226 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #111 @226 RefTypeUse <Ivl:25> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #112 @227 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #113 @227 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #114 @227 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #115 @227 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #116 @227 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #117 @227 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #118 @227 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #119 @238 RefTypeDef <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #120 @238 RefTypeUse <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #121 @244 RefTypeDef <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #122 @244 RefTypeUse <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #123 @247 RefTypeDef <Ivl:28> LCL_ADDR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #124 @248 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #125 @248 RefTypeUse <Ivl:28> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #126 @249 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #127 @249 RefTypeDef <Ivl:29> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #128 @251 RefTypeDef <Ivl:30> LCL_ADDR BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #129 @252 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #130 @252 RefTypeUse <Ivl:30> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #131 @253 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #132 @253 RefTypeDef <Ivl:31> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #133 @258 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @258 RefTypeUse <Ivl:29> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @258 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #136 @258 RefTypeUse <Ivl:31> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #137 @259 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #138 @259 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #139 @259 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #140 @259 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #141 @259 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #142 @259 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #143 @259 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #144 @259 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #145 @259 RefTypeDef <Ivl:32> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #146 @260 RefTypeUse <Ivl:32> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #147 @265 RefTypeDef <Ivl:33> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #148 @266 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #149 @266 RefTypeUse <Ivl:33> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #150 @267 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #151 @267 RefTypeDef <Ivl:34> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #152 @272 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #153 @272 RefTypeUse <Ivl:34> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #154 @273 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #155 @273 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #156 @273 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #157 @273 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #158 @273 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #159 @273 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #160 @273 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #161 @281 RefTypeDef <Ivl:35> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #162 @282 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #163 @282 RefTypeUse <Ivl:35> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #164 @283 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #165 @283 RefTypeDef <Ivl:36> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #166 @288 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #167 @288 RefTypeUse <Ivl:36> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #168 @289 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #169 @289 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #170 @289 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #171 @289 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #172 @289 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #173 @289 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #174 @289 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #175 @297 RefTypeDef <Ivl:37> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #176 @298 RefTypeUse <Ivl:37> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #177 @303 RefTypeDef <Ivl:38> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #178 @304 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @304 RefTypeUse <Ivl:38> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #180 @305 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #181 @305 RefTypeDef <Ivl:39> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #182 @307 RefTypeDef <Ivl:40> CNS_INT BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #183 @308 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #184 @308 RefTypeUse <Ivl:40> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #185 @309 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #186 @309 RefTypeDef <Ivl:41> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #187 @310 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #188 @310 RefTypeUse <Ivl:39> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #189 @310 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #190 @310 RefTypeUse <Ivl:41> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #191 @311 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #192 @311 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #193 @311 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #194 @311 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #195 @311 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #196 @311 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #197 @311 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #198 @311 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #199 @311 RefTypeDef <Ivl:42> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #200 @312 RefTypeUse <Ivl:42> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #201 @317 RefTypeDef <Ivl:43> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #202 @318 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #203 @318 RefTypeUse <Ivl:43> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #204 @319 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @319 RefTypeDef <Ivl:44> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #206 @320 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #207 @320 RefTypeUse <Ivl:44> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @321 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #209 @321 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #210 @321 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #211 @321 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #212 @321 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #213 @321 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #214 @321 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #215 @321 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #216 @321 RefTypeDef <Ivl:45> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #217 @322 RefTypeUse <Ivl:45> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #218 @325 RefTypeDef <Ivl:46> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #219 @326 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #220 @326 RefTypeUse <Ivl:46> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #221 @327 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #222 @327 RefTypeDef <Ivl:47> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #223 @329 RefTypeDef <Ivl:48> LCL_FLD BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #224 @330 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #225 @330 RefTypeUse <Ivl:48> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #226 @331 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #227 @331 RefTypeDef <Ivl:49> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #228 @332 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #229 @332 RefTypeUse <Ivl:47> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #230 @332 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #231 @332 RefTypeUse <Ivl:49> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #232 @333 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #233 @333 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #234 @333 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #235 @333 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #236 @333 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #237 @333 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #238 @333 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #239 @337 RefTypeDef <Ivl:50> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #240 @338 RefTypeUse <Ivl:50> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #241 @343 RefTypeDef <Ivl:51> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #242 @344 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @344 RefTypeUse <Ivl:51> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #244 @345 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #245 @345 RefTypeDef <Ivl:52> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #246 @347 RefTypeDef <Ivl:53> LCL_VAR BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #247 @348 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @348 RefTypeUse <Ivl:53> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #249 @349 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #250 @349 RefTypeDef <Ivl:54> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #251 @351 RefTypeDef <Ivl:55> CNS_INT BB11 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #252 @352 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #253 @352 RefTypeUse <Ivl:55> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #254 @353 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #255 @353 RefTypeDef <Ivl:56> PUTARG_REG BB11 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #256 @358 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @358 RefTypeUse <Ivl:52> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #258 @358 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #259 @358 RefTypeUse <Ivl:54> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @358 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #261 @358 RefTypeUse <Ivl:56> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #262 @359 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #263 @359 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #264 @359 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #265 @359 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #266 @359 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #267 @359 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #268 @359 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #269 @359 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #270 @359 RefTypeDef <Ivl:57> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #271 @360 RefTypeUse <Ivl:57> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
TUPLE STYLE DUMP WITH REF POSITIONS
Incoming Parameters: 
BB01 [???..???), preds={} succs={BB02}
=====
  N002.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N006.                    CNS_INT(h) 0x7ff7c6a33128 global ptr
  N008.                    IND      
  N010.                    CNS_INT   0
  N012.                    CMP      
  N014.                    JCC       cond=UEQ

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N018.                    CALL help
        Kill: rax rcx rdx r8 r9 r10 r11 

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
=====
  N024.                    IL_OFFSET INLRT @ 0x000[E-]
  N026.                    NO_OP    
  N028.                    IL_OFFSET INLRT @ 0x001[E-]
  N030.                    LCL_ADDR  V11 tmp1         [+0] NA
        Def:<I0>(#12)
  N032.                    PUTARG_REG
                               Use:<I0>(#14) Fixed:rcx(#13) *
        Def:<I1>(#16) rcx
  N034.                    CNS_INT(h) 0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
        Def:<I2>(#17)
  N036.                    PUTARG_REG
                               Use:<I2>(#19) Fixed:rdx(#18) *
        Def:<I3>(#21) rdx
  N038.                    CNS_INT   0xF00
        Def:<I4>(#22)
  N040.                    PUTARG_REG
                               Use:<I4>(#24) Fixed:r8(#23) *
        Def:<I5>(#26) r8
  N042.                    CNS_INT(h) 0x7ff7c6a46418 ftn
  N044.                    IND      
  N046.                    CALL     
                               Use:<I1>(#28) Fixed:rcx(#27) *
                               Use:<I3>(#30) Fixed:rdx(#29) *
                               Use:<I5>(#32) Fixed:r8(#31) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N048.                    IL_OFFSET INLRT @ 0x010[--]
  N050.                    V11 MEM
  N052.                    LCL_ADDR  V01 loc0         [+0] NA
  N054.                    STORE_BLK
        Def:<T6>(#40)
                               Use:<T6>(#41) *
  N056.                    IL_OFFSET INLRT @ 0x011[E-]
  N058.                    LCL_ADDR  V12 tmp2         [+0] NA
        Def:<I7>(#42)
  N060.                    PUTARG_REG
                               Use:<I7>(#44) Fixed:rcx(#43) *
        Def:<I8>(#46) rcx
  N062.                    CNS_INT(h) 0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
        Def:<I9>(#47)
  N064.                    PUTARG_REG
                               Use:<I9>(#49) Fixed:rdx(#48) *
        Def:<I10>(#51) rdx
  N066.                    CNS_INT   0xF00
        Def:<I11>(#52)
  N068.                    PUTARG_REG
                               Use:<I11>(#54) Fixed:r8(#53) *
        Def:<I12>(#56) r8
  N070.                    CNS_INT(h) 0x7ff7c6a46418 ftn
  N072.                    IND      
  N074.                    CALL     
                               Use:<I8>(#58) Fixed:rcx(#57) *
                               Use:<I10>(#60) Fixed:rdx(#59) *
                               Use:<I12>(#62) Fixed:r8(#61) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N076.                    IL_OFFSET INLRT @ 0x020[--]
  N078.                    V12 MEM
  N080.                    LCL_ADDR  V02 loc1         [+0] NA
  N082.                    STORE_BLK
        Def:<T13>(#70)
                               Use:<T13>(#71) *
  N084.                    IL_OFFSET INLRT @ 0x021[E-]
  N086.                    CNS_INT(h) 0x7ff7c6bafba0 ftn
  N088.                    IND      
  N090.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
  N092.                    IL_OFFSET INLRT @ 0x026[E-]
  N094.                    NO_OP    
  N096.                    IL_OFFSET INLRT @ 0x027[E-]
  N098.                    CNS_INT   0
        Def:<I14>(#79)
  N100.                    V05 MEM
                               Use:<I14>(#80) *
  N102.                    IL_OFFSET INLRT @ 0x02A[E-]
  N104.                    NOP      

BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
=====
  N108.                    IL_OFFSET INLRT @ 0x054[E-]
  N110.                    V05 MEM
  N112.                    CNS_INT   0
  N114.                    LE       
        Def:<I15>(#82)
  N116.                    V09 MEM
                               Use:<I15>(#83) *
  N118.                    IL_OFFSET INLRT @ 0x05B[E-]
  N120.                    V09 MEM
  N122.                    CNS_INT   0
  N124.                    CMP      
  N126.                    JCC       cond=UNE

BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
=====
  N130.                    IL_OFFSET INLRT @ 0x02C[E-]
  N132.                    NO_OP    
  N134.                    IL_OFFSET INLRT @ 0x02D[E-]
  N136.                    CNS_INT   0
        Def:<I16>(#85)
  N138.                    V06 MEM
                               Use:<I16>(#86) *
  N140.                    IL_OFFSET INLRT @ 0x030[E-]
  N142.                    NOP      

BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
=====
  N146.                    IL_OFFSET INLRT @ 0x03E[E-]
  N148.                    V06 MEM
  N150.                    CNS_INT   0
  N152.                    LE       
        Def:<I17>(#88)
  N154.                    V08 MEM
                               Use:<I17>(#89) *
  N156.                    IL_OFFSET INLRT @ 0x045[E-]
  N158.                    V08 MEM
  N160.                    CNS_INT   0
  N162.                    CMP      
  N164.                    JCC       cond=UNE

BB07 [032..03E), preds={BB08} succs={BB08}
=====
  N168.                    IL_OFFSET INLRT @ 0x032[E-]
  N170.                    NO_OP    
  N172.                    IL_OFFSET INLRT @ 0x033[E-]
  N174.                    NO_OP    
  N176.                    IL_OFFSET INLRT @ 0x034[E-]
  N178.                    V06 MEM
        Def:<I18>(#91)
  N180.                    V07 MEM
                               Use:<I18>(#92) *
  N182.                    IL_OFFSET INLRT @ 0x038[E-]
  N184.                    V07 MEM
        Def:<I19>(#93) Pref:<I20>
  N186.                    CNS_INT   1
  N188.                    ADD      
                               Use:<I19>(#94) *
        Def:<I20>(#95)
  N190.                    V06 MEM
                               Use:<I20>(#96) *

BB09 [049..054), preds={BB08} succs={BB10}
=====
  N194.                    IL_OFFSET INLRT @ 0x049[E-]
  N196.                    NO_OP    
  N198.                    IL_OFFSET INLRT @ 0x04A[E-]
  N200.                    V05 MEM
        Def:<I21>(#98)
  N202.                    V07 MEM
                               Use:<I21>(#99) *
  N204.                    IL_OFFSET INLRT @ 0x04E[E-]
  N206.                    V07 MEM
        Def:<I22>(#100) Pref:<I23>
  N208.                    CNS_INT   1
  N210.                    ADD      
                               Use:<I22>(#101) *
        Def:<I23>(#102)
  N212.                    V05 MEM
                               Use:<I23>(#103) *

BB11 [05F..0A4) (return), preds={BB10} succs={}
=====
  N216.                    IL_OFFSET INLRT @ 0x05F[E-]
  N218.                    CNS_INT(h)  'Ascii'

        Def:<I24>(#105)
  N220.                    PUTARG_REG
                               Use:<I24>(#107) Fixed:rcx(#106) *
        Def:<I25>(#109) rcx
  N222.                    CNS_INT(h) 0x7ff7c6bafcd8 ftn
  N224.                    IND      
  N226.                    CALL     
                               Use:<I25>(#111) Fixed:rcx(#110) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N228.                    IL_OFFSET INLRT @ 0x069[E-]
  N230.                    NO_OP    
  N232.                    IL_OFFSET INLRT @ 0x06A[E-]
  N234.                    V01 MEM
  N236.                    LCL_ADDR  V17 tmp7         [+0] NA
  N238.                    STORE_BLK
        Def:<T26>(#119)
                               Use:<T26>(#120) *
  N240.                    V02 MEM
  N242.                    LCL_ADDR  V18 tmp8         [+0] NA
  N244.                    STORE_BLK
        Def:<T27>(#121)
                               Use:<T27>(#122) *
  N246.                    LCL_ADDR  V17 tmp7         [+0] NA
        Def:<I28>(#123)
  N248.                    PUTARG_REG
                               Use:<I28>(#125) Fixed:rcx(#124) *
        Def:<I29>(#127) rcx
  N250.                    LCL_ADDR  V18 tmp8         [+0] NA
        Def:<I30>(#128)
  N252.                    PUTARG_REG
                               Use:<I30>(#130) Fixed:rdx(#129) *
        Def:<I31>(#132) rdx
  N254.                    CNS_INT(h) 0x7ff7c6ad6880 ftn
  N256.                    IND      
  N258.                    CALL     
                               Use:<I29>(#134) Fixed:rcx(#133) *
                               Use:<I31>(#136) Fixed:rdx(#135) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I32>(#145) rax
  N260.                    V13 MEM
                               Use:<I32>(#146) *
  N262.                    IL_OFFSET INLRT @ 0x071[--]
  N264.                    V13 MEM
        Def:<I33>(#147)
  N266.                    PUTARG_REG
                               Use:<I33>(#149) Fixed:rcx(#148) *
        Def:<I34>(#151) rcx
  N268.                    CNS_INT(h) 0x7ff7c6bafbb8 ftn
  N270.                    IND      
  N272.                    CALL     
                               Use:<I34>(#153) Fixed:rcx(#152) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N274.                    IL_OFFSET INLRT @ 0x076[E-]
  N276.                    NO_OP    
  N278.                    IL_OFFSET INLRT @ 0x077[E-]
  N280.                    CNS_INT(h)  'String'

        Def:<I35>(#161)
  N282.                    PUTARG_REG
                               Use:<I35>(#163) Fixed:rcx(#162) *
        Def:<I36>(#165) rcx
  N284.                    CNS_INT(h) 0x7ff7c6bafcd8 ftn
  N286.                    IND      
  N288.                    CALL     
                               Use:<I36>(#167) Fixed:rcx(#166) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N290.                    IL_OFFSET INLRT @ 0x081[E-]
  N292.                    NO_OP    
  N294.                    IL_OFFSET INLRT @ 0x082[E-]
  N296.                    CNS_INT(h)  'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

        Def:<I37>(#175)
  N298.                    V03 MEM
                               Use:<I37>(#176) *
  N300.                    IL_OFFSET INLRT @ 0x088[E-]
  N302.                    CNS_INT(h) 0x7ff7c6bf3378 class
        Def:<I38>(#177)
  N304.                    PUTARG_REG
                               Use:<I38>(#179) Fixed:rcx(#178) *
        Def:<I39>(#181) rcx
  N306.                    CNS_INT   3
        Def:<I40>(#182)
  N308.                    PUTARG_REG
                               Use:<I40>(#184) Fixed:rdx(#183) *
        Def:<I41>(#186) rdx
  N310.                    CALL help
                               Use:<I39>(#188) Fixed:rcx(#187) *
                               Use:<I41>(#190) Fixed:rdx(#189) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I42>(#199) rax
  N312.                    V14 MEM
                               Use:<I42>(#200) *
  N314.                    IL_OFFSET INLRT @ 0x08E[--]
  N316.                    CNS_INT(h) 0x7ff7c6bf36f8 field
        Def:<I43>(#201)
  N318.                    PUTARG_REG
                               Use:<I43>(#203) Fixed:rcx(#202) *
        Def:<I44>(#205) rcx
  N320.                    CALL help
                               Use:<I44>(#207) Fixed:rcx(#206) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I45>(#216) rax
  N322.                    V15 MEM
                               Use:<I45>(#217) *
  N324.                    V14 MEM
        Def:<I46>(#218)
  N326.                    PUTARG_REG
                               Use:<I46>(#220) Fixed:rcx(#219) *
        Def:<I47>(#222) rcx
  N328.                    V15 MEM
        Def:<I48>(#223)
  N330.                    PUTARG_REG
                               Use:<I48>(#225) Fixed:rdx(#224) *
        Def:<I49>(#227) rdx
  N332.                    CALL     
                               Use:<I47>(#229) Fixed:rcx(#228) *
                               Use:<I49>(#231) Fixed:rdx(#230) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N334.                    IL_OFFSET INLRT @ 0x099[--]
  N336.                    V14 MEM
        Def:<I50>(#239)
  N338.                    V04 MEM
                               Use:<I50>(#240) *
  N340.                    IL_OFFSET INLRT @ 0x09A[E-]
  N342.                    V03 MEM
        Def:<I51>(#241)
  N344.                    PUTARG_REG
                               Use:<I51>(#243) Fixed:rcx(#242) *
        Def:<I52>(#245) rcx
  N346.                    V04 MEM
        Def:<I53>(#246)
  N348.                    PUTARG_REG
                               Use:<I53>(#248) Fixed:rdx(#247) *
        Def:<I54>(#250) rdx
  N350.                    CNS_INT   1
        Def:<I55>(#251)
  N352.                    PUTARG_REG
                               Use:<I55>(#253) Fixed:r8(#252) *
        Def:<I56>(#255) r8
  N354.                    CNS_INT(h) 0x7ff7c6a44678 ftn
  N356.                    IND      
  N358.                    CALL     
                               Use:<I52>(#257) Fixed:rcx(#256) *
                               Use:<I54>(#259) Fixed:rdx(#258) *
                               Use:<I56>(#261) Fixed:r8(#260) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I57>(#270) rax
  N360.                    V16 MEM
                               Use:<I57>(#271) *
  N362.                    IL_OFFSET INLRT @ 0x0A2[--]
  N364.                    NOP      
  N366.                    IL_OFFSET INLRT @ 0x0A3[E-]
  N368.                    RETURN   




Linear scan intervals after buildIntervals:
Interval  0: long RefPositions {#12@31 #14@32} physReg:NA Preferences=[rcx]
Interval  1: long RefPositions {#16@33 #28@46} physReg:NA Preferences=[rcx]
Interval  2: long (constant) RefPositions {#17@35 #19@36} physReg:NA Preferences=[rdx]
Interval  3: long RefPositions {#21@37 #30@46} physReg:NA Preferences=[rdx]
Interval  4: int (constant) RefPositions {#22@39 #24@40} physReg:NA Preferences=[r8]
Interval  5: int RefPositions {#26@41 #32@46} physReg:NA Preferences=[r8]
Interval  6: float (INTERNAL) RefPositions {#40@54 #41@54} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval  7: long RefPositions {#42@59 #44@60} physReg:NA Preferences=[rcx]
Interval  8: long RefPositions {#46@61 #58@74} physReg:NA Preferences=[rcx]
Interval  9: long (constant) RefPositions {#47@63 #49@64} physReg:NA Preferences=[rdx]
Interval 10: long RefPositions {#51@65 #60@74} physReg:NA Preferences=[rdx]
Interval 11: int (constant) RefPositions {#52@67 #54@68} physReg:NA Preferences=[r8]
Interval 12: int RefPositions {#56@69 #62@74} physReg:NA Preferences=[r8]
Interval 13: float (INTERNAL) RefPositions {#70@82 #71@82} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 14: int (constant) RefPositions {#79@99 #80@100} physReg:NA Preferences=[allIntButFP]
Interval 15: int RefPositions {#82@115 #83@116} physReg:NA Preferences=[allIntButFP]
Interval 16: int (constant) RefPositions {#85@137 #86@138} physReg:NA Preferences=[allIntButFP]
Interval 17: int RefPositions {#88@153 #89@154} physReg:NA Preferences=[allIntButFP]
Interval 18: int RefPositions {#91@179 #92@180} physReg:NA Preferences=[allIntButFP]
Interval 19: int RefPositions {#93@185 #94@188} physReg:NA Preferences=[allIntButFP] RelatedInterval <I20>
Interval 20: int RefPositions {#95@189 #96@190} physReg:NA Preferences=[allIntButFP]
Interval 21: int RefPositions {#98@201 #99@202} physReg:NA Preferences=[allIntButFP]
Interval 22: int RefPositions {#100@207 #101@210} physReg:NA Preferences=[allIntButFP] RelatedInterval <I23>
Interval 23: int RefPositions {#102@211 #103@212} physReg:NA Preferences=[allIntButFP]
Interval 24: ref (constant) RefPositions {#105@219 #107@220} physReg:NA Preferences=[rcx]
Interval 25: ref RefPositions {#109@221 #111@226} physReg:NA Preferences=[rcx]
Interval 26: float (INTERNAL) RefPositions {#119@238 #120@238} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 27: float (INTERNAL) RefPositions {#121@244 #122@244} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 28: long RefPositions {#123@247 #125@248} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#127@249 #134@258} physReg:NA Preferences=[rcx]
Interval 30: long RefPositions {#128@251 #130@252} physReg:NA Preferences=[rdx]
Interval 31: long RefPositions {#132@253 #136@258} physReg:NA Preferences=[rdx]
Interval 32: int RefPositions {#145@259 #146@260} physReg:NA Preferences=[rax]
Interval 33: int RefPositions {#147@265 #149@266} physReg:NA Preferences=[rcx]
Interval 34: int RefPositions {#151@267 #153@272} physReg:NA Preferences=[rcx]
Interval 35: ref (constant) RefPositions {#161@281 #163@282} physReg:NA Preferences=[rcx]
Interval 36: ref RefPositions {#165@283 #167@288} physReg:NA Preferences=[rcx]
Interval 37: ref (constant) RefPositions {#175@297 #176@298} physReg:NA Preferences=[allIntButFP]
Interval 38: long (constant) RefPositions {#177@303 #179@304} physReg:NA Preferences=[rcx]
Interval 39: long RefPositions {#181@305 #188@310} physReg:NA Preferences=[rcx]
Interval 40: long (constant) RefPositions {#182@307 #184@308} physReg:NA Preferences=[rdx]
Interval 41: long RefPositions {#186@309 #190@310} physReg:NA Preferences=[rdx]
Interval 42: ref RefPositions {#199@311 #200@312} physReg:NA Preferences=[rax]
Interval 43: long (constant) RefPositions {#201@317 #203@318} physReg:NA Preferences=[rcx]
Interval 44: long RefPositions {#205@319 #207@320} physReg:NA Preferences=[rcx]
Interval 45: ref RefPositions {#216@321 #217@322} physReg:NA Preferences=[rax]
Interval 46: ref RefPositions {#218@325 #220@326} physReg:NA Preferences=[rcx]
Interval 47: ref RefPositions {#222@327 #229@332} physReg:NA Preferences=[rcx]
Interval 48: ref RefPositions {#223@329 #225@330} physReg:NA Preferences=[rdx]
Interval 49: ref RefPositions {#227@331 #231@332} physReg:NA Preferences=[rdx]
Interval 50: ref RefPositions {#239@337 #240@338} physReg:NA Preferences=[allIntButFP]
Interval 51: ref RefPositions {#241@343 #243@344} physReg:NA Preferences=[rcx]
Interval 52: ref RefPositions {#245@345 #257@358} physReg:NA Preferences=[rcx]
Interval 53: ref RefPositions {#246@347 #248@348} physReg:NA Preferences=[rdx]
Interval 54: ref RefPositions {#250@349 #259@358} physReg:NA Preferences=[rdx]
Interval 55: int (constant) RefPositions {#251@351 #253@352} physReg:NA Preferences=[r8]
Interval 56: int RefPositions {#255@353 #261@358} physReg:NA Preferences=[r8]
Interval 57: ref RefPositions {#270@359 #271@360} physReg:NA Preferences=[rax]

*************** In LinearScan::allocateRegisters()

Linear scan intervals before allocateRegisters:
Interval  0: long RefPositions {#12@31 #14@32} physReg:NA Preferences=[rcx]
Interval  1: long RefPositions {#16@33 #28@46} physReg:NA Preferences=[rcx]
Interval  2: long (constant) RefPositions {#17@35 #19@36} physReg:NA Preferences=[rdx]
Interval  3: long RefPositions {#21@37 #30@46} physReg:NA Preferences=[rdx]
Interval  4: int (constant) RefPositions {#22@39 #24@40} physReg:NA Preferences=[r8]
Interval  5: int RefPositions {#26@41 #32@46} physReg:NA Preferences=[r8]
Interval  6: float (INTERNAL) RefPositions {#40@54 #41@54} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval  7: long RefPositions {#42@59 #44@60} physReg:NA Preferences=[rcx]
Interval  8: long RefPositions {#46@61 #58@74} physReg:NA Preferences=[rcx]
Interval  9: long (constant) RefPositions {#47@63 #49@64} physReg:NA Preferences=[rdx]
Interval 10: long RefPositions {#51@65 #60@74} physReg:NA Preferences=[rdx]
Interval 11: int (constant) RefPositions {#52@67 #54@68} physReg:NA Preferences=[r8]
Interval 12: int RefPositions {#56@69 #62@74} physReg:NA Preferences=[r8]
Interval 13: float (INTERNAL) RefPositions {#70@82 #71@82} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 14: int (constant) RefPositions {#79@99 #80@100} physReg:NA Preferences=[allIntButFP]
Interval 15: int RefPositions {#82@115 #83@116} physReg:NA Preferences=[allIntButFP]
Interval 16: int (constant) RefPositions {#85@137 #86@138} physReg:NA Preferences=[allIntButFP]
Interval 17: int RefPositions {#88@153 #89@154} physReg:NA Preferences=[allIntButFP]
Interval 18: int RefPositions {#91@179 #92@180} physReg:NA Preferences=[allIntButFP]
Interval 19: int RefPositions {#93@185 #94@188} physReg:NA Preferences=[allIntButFP] RelatedInterval <I20>
Interval 20: int RefPositions {#95@189 #96@190} physReg:NA Preferences=[allIntButFP]
Interval 21: int RefPositions {#98@201 #99@202} physReg:NA Preferences=[allIntButFP]
Interval 22: int RefPositions {#100@207 #101@210} physReg:NA Preferences=[allIntButFP] RelatedInterval <I23>
Interval 23: int RefPositions {#102@211 #103@212} physReg:NA Preferences=[allIntButFP]
Interval 24: ref (constant) RefPositions {#105@219 #107@220} physReg:NA Preferences=[rcx]
Interval 25: ref RefPositions {#109@221 #111@226} physReg:NA Preferences=[rcx]
Interval 26: float (INTERNAL) RefPositions {#119@238 #120@238} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 27: float (INTERNAL) RefPositions {#121@244 #122@244} physReg:NA Preferences=[mm0-mm5 mm16-mm31]
Interval 28: long RefPositions {#123@247 #125@248} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#127@249 #134@258} physReg:NA Preferences=[rcx]
Interval 30: long RefPositions {#128@251 #130@252} physReg:NA Preferences=[rdx]
Interval 31: long RefPositions {#132@253 #136@258} physReg:NA Preferences=[rdx]
Interval 32: int RefPositions {#145@259 #146@260} physReg:NA Preferences=[rax]
Interval 33: int RefPositions {#147@265 #149@266} physReg:NA Preferences=[rcx]
Interval 34: int RefPositions {#151@267 #153@272} physReg:NA Preferences=[rcx]
Interval 35: ref (constant) RefPositions {#161@281 #163@282} physReg:NA Preferences=[rcx]
Interval 36: ref RefPositions {#165@283 #167@288} physReg:NA Preferences=[rcx]
Interval 37: ref (constant) RefPositions {#175@297 #176@298} physReg:NA Preferences=[allIntButFP]
Interval 38: long (constant) RefPositions {#177@303 #179@304} physReg:NA Preferences=[rcx]
Interval 39: long RefPositions {#181@305 #188@310} physReg:NA Preferences=[rcx]
Interval 40: long (constant) RefPositions {#182@307 #184@308} physReg:NA Preferences=[rdx]
Interval 41: long RefPositions {#186@309 #190@310} physReg:NA Preferences=[rdx]
Interval 42: ref RefPositions {#199@311 #200@312} physReg:NA Preferences=[rax]
Interval 43: long (constant) RefPositions {#201@317 #203@318} physReg:NA Preferences=[rcx]
Interval 44: long RefPositions {#205@319 #207@320} physReg:NA Preferences=[rcx]
Interval 45: ref RefPositions {#216@321 #217@322} physReg:NA Preferences=[rax]
Interval 46: ref RefPositions {#218@325 #220@326} physReg:NA Preferences=[rcx]
Interval 47: ref RefPositions {#222@327 #229@332} physReg:NA Preferences=[rcx]
Interval 48: ref RefPositions {#223@329 #225@330} physReg:NA Preferences=[rdx]
Interval 49: ref RefPositions {#227@331 #231@332} physReg:NA Preferences=[rdx]
Interval 50: ref RefPositions {#239@337 #240@338} physReg:NA Preferences=[allIntButFP]
Interval 51: ref RefPositions {#241@343 #243@344} physReg:NA Preferences=[rcx]
Interval 52: ref RefPositions {#245@345 #257@358} physReg:NA Preferences=[rcx]
Interval 53: ref RefPositions {#246@347 #248@348} physReg:NA Preferences=[rdx]
Interval 54: ref RefPositions {#250@349 #259@358} physReg:NA Preferences=[rdx]
Interval 55: int (constant) RefPositions {#251@351 #253@352} physReg:NA Preferences=[r8]
Interval 56: int RefPositions {#255@353 #261@358} physReg:NA Preferences=[r8]
Interval 57: ref RefPositions {#270@359 #271@360} physReg:NA Preferences=[rax]

------------
REFPOSITIONS BEFORE ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #72  @91  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #73  @91  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #74  @91  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #75  @91  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #76  @91  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #77  @91  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #78  @91  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #79  @99  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #80  @100 RefTypeUse <Ivl:14> BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #81  @106 RefTypeBB BB10 regmask=[] minReg=1 wt=100.00>
<RefPosition #82  @115 RefTypeDef <Ivl:15> LE BB10 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #83  @116 RefTypeUse <Ivl:15> BB10 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #84  @128 RefTypeBB BB06 regmask=[] minReg=1 wt=100.00>
<RefPosition #85  @137 RefTypeDef <Ivl:16> CNS_INT BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #86  @138 RefTypeUse <Ivl:16> BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #87  @144 RefTypeBB BB08 regmask=[] minReg=1 wt=100.00>
<RefPosition #88  @153 RefTypeDef <Ivl:17> LE BB08 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #89  @154 RefTypeUse <Ivl:17> BB08 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #90  @166 RefTypeBB BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #91  @179 RefTypeDef <Ivl:18> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #92  @180 RefTypeUse <Ivl:18> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #93  @185 RefTypeDef <Ivl:19> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #94  @188 RefTypeUse <Ivl:19> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #95  @189 RefTypeDef <Ivl:20> ADD BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #96  @190 RefTypeUse <Ivl:20> BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #97  @192 RefTypeBB BB09 regmask=[] minReg=1 wt=100.00>
<RefPosition #98  @201 RefTypeDef <Ivl:21> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #99  @202 RefTypeUse <Ivl:21> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #100 @207 RefTypeDef <Ivl:22> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #101 @210 RefTypeUse <Ivl:22> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #102 @211 RefTypeDef <Ivl:23> ADD BB09 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #103 @212 RefTypeUse <Ivl:23> BB09 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #104 @214 RefTypeBB BB11 regmask=[] minReg=1 wt=100.00>
<RefPosition #105 @219 RefTypeDef <Ivl:24> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #106 @220 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #107 @220 RefTypeUse <Ivl:24> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #108 @221 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #109 @221 RefTypeDef <Ivl:25> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #110 @226 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #111 @226 RefTypeUse <Ivl:25> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #112 @227 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #113 @227 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #114 @227 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #115 @227 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #116 @227 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #117 @227 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #118 @227 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #119 @238 RefTypeDef <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #120 @238 RefTypeUse <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #121 @244 RefTypeDef <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 wt=400.00>
<RefPosition #122 @244 RefTypeUse <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0-mm5 mm16-mm31] minReg=1 last wt=400.00>
<RefPosition #123 @247 RefTypeDef <Ivl:28> LCL_ADDR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #124 @248 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #125 @248 RefTypeUse <Ivl:28> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #126 @249 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #127 @249 RefTypeDef <Ivl:29> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #128 @251 RefTypeDef <Ivl:30> LCL_ADDR BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #129 @252 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #130 @252 RefTypeUse <Ivl:30> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #131 @253 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #132 @253 RefTypeDef <Ivl:31> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #133 @258 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @258 RefTypeUse <Ivl:29> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @258 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #136 @258 RefTypeUse <Ivl:31> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #137 @259 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #138 @259 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #139 @259 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #140 @259 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #141 @259 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #142 @259 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #143 @259 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #144 @259 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #145 @259 RefTypeDef <Ivl:32> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #146 @260 RefTypeUse <Ivl:32> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #147 @265 RefTypeDef <Ivl:33> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #148 @266 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #149 @266 RefTypeUse <Ivl:33> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #150 @267 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #151 @267 RefTypeDef <Ivl:34> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #152 @272 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #153 @272 RefTypeUse <Ivl:34> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #154 @273 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #155 @273 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #156 @273 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #157 @273 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #158 @273 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #159 @273 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #160 @273 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #161 @281 RefTypeDef <Ivl:35> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #162 @282 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #163 @282 RefTypeUse <Ivl:35> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #164 @283 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #165 @283 RefTypeDef <Ivl:36> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #166 @288 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #167 @288 RefTypeUse <Ivl:36> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #168 @289 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #169 @289 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #170 @289 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #171 @289 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #172 @289 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #173 @289 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #174 @289 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #175 @297 RefTypeDef <Ivl:37> CNS_INT BB11 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #176 @298 RefTypeUse <Ivl:37> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #177 @303 RefTypeDef <Ivl:38> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #178 @304 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @304 RefTypeUse <Ivl:38> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #180 @305 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #181 @305 RefTypeDef <Ivl:39> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #182 @307 RefTypeDef <Ivl:40> CNS_INT BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #183 @308 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #184 @308 RefTypeUse <Ivl:40> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #185 @309 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #186 @309 RefTypeDef <Ivl:41> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #187 @310 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #188 @310 RefTypeUse <Ivl:39> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #189 @310 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #190 @310 RefTypeUse <Ivl:41> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #191 @311 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #192 @311 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #193 @311 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #194 @311 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #195 @311 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #196 @311 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #197 @311 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #198 @311 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #199 @311 RefTypeDef <Ivl:42> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #200 @312 RefTypeUse <Ivl:42> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #201 @317 RefTypeDef <Ivl:43> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #202 @318 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #203 @318 RefTypeUse <Ivl:43> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #204 @319 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @319 RefTypeDef <Ivl:44> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #206 @320 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #207 @320 RefTypeUse <Ivl:44> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @321 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #209 @321 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #210 @321 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #211 @321 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #212 @321 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #213 @321 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #214 @321 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #215 @321 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #216 @321 RefTypeDef <Ivl:45> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #217 @322 RefTypeUse <Ivl:45> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #218 @325 RefTypeDef <Ivl:46> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #219 @326 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #220 @326 RefTypeUse <Ivl:46> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #221 @327 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #222 @327 RefTypeDef <Ivl:47> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #223 @329 RefTypeDef <Ivl:48> LCL_FLD BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #224 @330 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #225 @330 RefTypeUse <Ivl:48> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #226 @331 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #227 @331 RefTypeDef <Ivl:49> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #228 @332 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #229 @332 RefTypeUse <Ivl:47> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #230 @332 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #231 @332 RefTypeUse <Ivl:49> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #232 @333 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #233 @333 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #234 @333 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #235 @333 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #236 @333 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #237 @333 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #238 @333 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #239 @337 RefTypeDef <Ivl:50> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #240 @338 RefTypeUse <Ivl:50> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #241 @343 RefTypeDef <Ivl:51> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #242 @344 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @344 RefTypeUse <Ivl:51> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #244 @345 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #245 @345 RefTypeDef <Ivl:52> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #246 @347 RefTypeDef <Ivl:53> LCL_VAR BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #247 @348 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @348 RefTypeUse <Ivl:53> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #249 @349 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #250 @349 RefTypeDef <Ivl:54> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #251 @351 RefTypeDef <Ivl:55> CNS_INT BB11 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #252 @352 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #253 @352 RefTypeUse <Ivl:55> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #254 @353 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #255 @353 RefTypeDef <Ivl:56> PUTARG_REG BB11 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #256 @358 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @358 RefTypeUse <Ivl:52> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #258 @358 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #259 @358 RefTypeUse <Ivl:54> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @358 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #261 @358 RefTypeUse <Ivl:56> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #262 @359 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #263 @359 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #264 @359 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #265 @359 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #266 @359 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #267 @359 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #268 @359 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #269 @359 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #270 @359 RefTypeDef <Ivl:57> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #271 @360 RefTypeUse <Ivl:57> BB11 regmask=[allIntButFP] minReg=1 last wt=100.00>


Allocating Registers
--------------------
The following table has one or more rows for each RefPosition that is handled during allocation.
The columns are: (1) Loc: LSRA location, (2) RP#: RefPosition number, (3) Name, (4) Type (e.g. Def, Use,
Fixd, Parm, DDef (Dummy Def), ExpU (Exposed Use), Kill) followed by a '*' if it is a last use, and a 'D'
if it is delayRegFree, (5) Action taken during allocation. Some actions include (a) Alloc a new register,
(b) Keep an existing register, (c) Spill a register, (d) ReLod (Reload) a register. If an ALL-CAPS name
such as COVRS is displayed, it is a score name from lsra_score.h, with a trailing '(A)' indicating alloc,
'(C)' indicating copy, and '(R)' indicating re-use. See dumpLsraAllocationEvent() for details.
The subsequent columns show the Interval occupying each register, if any, followed by 'a' if it is
active, 'p' if it is a large vector that has been partially spilled, and 'i' if it is inactive.
Columns are only printed up to the last modified register, which may increase during allocation,
in which case additional columns will appear. Registers which are not marked modified have ---- in
their column.

--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
                                            |    |    |    |    |    |    |    |    |    |
           0.#0   BB1  PredBB0              |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
           4.#1   BB2  PredBB1              |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          16.#2   BB3  PredBB2              |    |    |    |    |    |    |    |    |    |
[000093]  19.#3   rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          19.#4   rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          19.#5   rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          19.#6   r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          19.#7   r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          19.#8   r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          19.#9   r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          20.#10  BB4  PredBB2              |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          22.#11  BB5  PredBB4              |    |    |    |    |    |    |    |    |    |
[000004]  31.#12  I0   Def    Alloc    rcx  |    |I0 a|    |    |    |    |    |    |    |
[000142]  32.#13  rcx  Fixd   Keep     rcx  |    |I0 a|    |    |    |    |    |    |    |
          32.#14  I0   Use *  Keep     rcx  |    |I0 a|    |    |    |    |    |    |    |
          33.#15  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          33.#16  I1   Def    Alloc    rcx  |    |I1 a|    |    |    |    |    |    |    |
[000002]  35.#17  C2   Def    Alloc    rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
[000143]  36.#18  rdx  Fixd   Keep     rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
          36.#19  C2   Use *  Keep     rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
          37.#20  rdx  Fixd   Keep     rdx  |    |I1 a|    |    |    |    |    |    |    |
          37.#21  I3   Def    Alloc    rdx  |    |I1 a|I3 a|    |    |    |    |    |    |
[000003]  39.#22  C4   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
[000144]  40.#23  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
          40.#24  C4   Use *  Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
          41.#25  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |    |    |
          41.#26  I5   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
[000005]  46.#27  rcx  Fixd   Keep     rcx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#28  I1   Use *  Keep     rcx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#29  rdx  Fixd   Keep     rdx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#30  I3   Use *  Keep     rdx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#31  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#32  I5   Use *  Keep     r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          47.#33  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          47.#34  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          47.#35  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          47.#36  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          47.#37  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          47.#38  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          47.#39  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000007]  54.#40  I6   Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
          54.#41  I6   Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000010]  59.#42  I7   Def    Alloc    rcx  |    |I7 a|    |    |    |    |    |    |    |
[000148]  60.#43  rcx  Fixd   Keep     rcx  |    |I7 a|    |    |    |    |    |    |    |
          60.#44  I7   Use *  Keep     rcx  |    |I7 a|    |    |    |    |    |    |    |
          61.#45  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          61.#46  I8   Def    Alloc    rcx  |    |I8 a|    |    |    |    |    |    |    |
[000008]  63.#47  C9   Def    Alloc    rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
[000149]  64.#48  rdx  Fixd   Keep     rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
          64.#49  C9   Use *  Keep     rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
          65.#50  rdx  Fixd   Keep     rdx  |    |I8 a|    |    |    |    |    |    |    |
          65.#51  I10  Def    Alloc    rdx  |    |I8 a|I10a|    |    |    |    |    |    |
[000009]  67.#52  C11  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
[000150]  68.#53  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
          68.#54  C11  Use *  Keep     r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
          69.#55  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |    |    |
          69.#56  I12  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
[000011]  74.#57  rcx  Fixd   Keep     rcx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#58  I8   Use *  Keep     rcx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#59  rdx  Fixd   Keep     rdx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#60  I10  Use *  Keep     rdx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#61  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          74.#62  I12  Use *  Keep     r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
          75.#63  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          75.#64  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          75.#65  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          75.#66  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          75.#67  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          75.#68  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          75.#69  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000013]  82.#70  I13  Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
          82.#71  I13  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000014]  91.#72  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          91.#73  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          91.#74  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          91.#75  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          91.#76  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          91.#77  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          91.#78  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000016]  99.#79  C14  Def    BSFIT(A) rcx  |    |C14a|    |    |    |    |    |    |    |
[000017] 100.#80  C14  Use *  Keep     rcx  |    |C14a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         106.#81  BB10 PredBB5              |    |    |    |    |    |    |    |    |    |
[000021] 115.#82  I15  Def    BSFIT(A) rcx  |    |I15a|    |    |    |    |    |    |    |
[000022] 116.#83  I15  Use *  Keep     rcx  |    |I15a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         128.#84  BB6  PredBB10             |    |    |    |    |    |    |    |    |    |
[000028] 137.#85  C16  Def    BSFIT(A) rcx  |    |C16a|    |    |    |    |    |    |    |
[000029] 138.#86  C16  Use *  Keep     rcx  |    |C16a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         144.#87  BB8  PredBB6              |    |    |    |    |    |    |    |    |    |
[000033] 153.#88  I17  Def    BSFIT(A) rcx  |    |I17a|    |    |    |    |    |    |    |
[000034] 154.#89  I17  Use *  Keep     rcx  |    |I17a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         166.#90  BB7  PredBB8              |    |    |    |    |    |    |    |    |    |
[000041] 179.#91  I18  Def    BSFIT(A) rcx  |    |I18a|    |    |    |    |    |    |    |
[000042] 180.#92  I18  Use *  Keep     rcx  |    |I18a|    |    |    |    |    |    |    |
[000043] 185.#93  I19  Def    BSFIT(A) rcx  |    |I19a|    |    |    |    |    |    |    |
[000045] 188.#94  I19  Use *  Keep     rcx  |    |I19a|    |    |    |    |    |    |    |
         189.#95  I20  Def    COVRS(A) rcx  |    |I20a|    |    |    |    |    |    |    |
[000046] 190.#96  I20  Use *  Keep     rcx  |    |I20a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         192.#97  BB9  PredBB8              |    |    |    |    |    |    |    |    |    |
[000048] 201.#98  I21  Def    BSFIT(A) rcx  |    |I21a|    |    |    |    |    |    |    |
[000049] 202.#99  I21  Use *  Keep     rcx  |    |I21a|    |    |    |    |    |    |    |
[000050] 207.#100 I22  Def    BSFIT(A) rcx  |    |I22a|    |    |    |    |    |    |    |
[000052] 210.#101 I22  Use *  Keep     rcx  |    |I22a|    |    |    |    |    |    |    |
         211.#102 I23  Def    COVRS(A) rcx  |    |I23a|    |    |    |    |    |    |    |
[000053] 212.#103 I23  Use *  Keep     rcx  |    |I23a|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         214.#104 BB11 PredBB10             |    |    |    |    |    |    |    |    |    |
[000097] 219.#105 C24  Def    Alloc    rcx  |    |C24a|    |    |    |    |    |    |    |
[000156] 220.#106 rcx  Fixd   Keep     rcx  |    |C24a|    |    |    |    |    |    |    |
         220.#107 C24  Use *  Keep     rcx  |    |C24a|    |    |    |    |    |    |    |
         221.#108 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         221.#109 I25  Def    Alloc    rcx  |    |I25a|    |    |    |    |    |    |    |
[000055] 226.#110 rcx  Fixd   Keep     rcx  |    |I25a|    |    |    |    |    |    |    |
         226.#111 I25  Use *  Keep     rcx  |    |I25a|    |    |    |    |    |    |    |
         227.#112 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         227.#113 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         227.#114 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         227.#115 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         227.#116 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         227.#117 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         227.#118 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000098] 238.#119 I26  Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
         238.#120 I26  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000099] 244.#121 I27  Def    ORDER(A) mm0  |    |    |    |    |    |    |    |    |    |
         244.#122 I27  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000100] 247.#123 I28  Def    Alloc    rcx  |    |I28a|    |    |    |    |    |    |    |
[000161] 248.#124 rcx  Fixd   Keep     rcx  |    |I28a|    |    |    |    |    |    |    |
         248.#125 I28  Use *  Keep     rcx  |    |I28a|    |    |    |    |    |    |    |
         249.#126 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         249.#127 I29  Def    Alloc    rcx  |    |I29a|    |    |    |    |    |    |    |
[000101] 251.#128 I30  Def    Alloc    rdx  |    |I29a|I30a|    |    |    |    |    |    |
[000162] 252.#129 rdx  Fixd   Keep     rdx  |    |I29a|I30a|    |    |    |    |    |    |
         252.#130 I30  Use *  Keep     rdx  |    |I29a|I30a|    |    |    |    |    |    |
         253.#131 rdx  Fixd   Keep     rdx  |    |I29a|    |    |    |    |    |    |    |
         253.#132 I31  Def    Alloc    rdx  |    |I29a|I31a|    |    |    |    |    |    |
[000059] 258.#133 rcx  Fixd   Keep     rcx  |    |I29a|I31a|    |    |    |    |    |    |
         258.#134 I29  Use *  Keep     rcx  |    |I29a|I31a|    |    |    |    |    |    |
         258.#135 rdx  Fixd   Keep     rdx  |    |I29a|I31a|    |    |    |    |    |    |
         258.#136 I31  Use *  Keep     rdx  |    |I29a|I31a|    |    |    |    |    |    |
         259.#137 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         259.#138 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         259.#139 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         259.#140 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         259.#141 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         259.#142 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         259.#143 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         259.#144 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         259.#145 I32  Def    Alloc    rax  |I32a|    |    |    |    |    |    |    |    |
[000060] 260.#146 I32  Use *  Keep     rax  |I32a|    |    |    |    |    |    |    |    |
[000061] 265.#147 I33  Def    Alloc    rcx  |    |I33a|    |    |    |    |    |    |    |
[000165] 266.#148 rcx  Fixd   Keep     rcx  |    |I33a|    |    |    |    |    |    |    |
         266.#149 I33  Use *  Keep     rcx  |    |I33a|    |    |    |    |    |    |    |
         267.#150 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         267.#151 I34  Def    Alloc    rcx  |    |I34a|    |    |    |    |    |    |    |
[000062] 272.#152 rcx  Fixd   Keep     rcx  |    |I34a|    |    |    |    |    |    |    |
         272.#153 I34  Use *  Keep     rcx  |    |I34a|    |    |    |    |    |    |    |
         273.#154 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         273.#155 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         273.#156 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         273.#157 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         273.#158 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         273.#159 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         273.#160 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
[000102] 281.#161 C35  Def    Alloc    rcx  |    |C35a|    |    |    |    |    |    |    |
[000168] 282.#162 rcx  Fixd   Keep     rcx  |    |C35a|    |    |    |    |    |    |    |
         282.#163 C35  Use *  Keep     rcx  |    |C35a|    |    |    |    |    |    |    |
         283.#164 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         283.#165 I36  Def    Alloc    rcx  |    |I36a|    |    |    |    |    |    |    |
[000065] 288.#166 rcx  Fixd   Keep     rcx  |    |I36a|    |    |    |    |    |    |    |
         288.#167 I36  Use *  Keep     rcx  |    |I36a|    |    |    |    |    |    |    |
         289.#168 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         289.#169 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         289.#170 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         289.#171 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         289.#172 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         289.#173 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         289.#174 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000103] 297.#175 C37  Def    BSFIT(A) rcx  |    |C37a|    |    |    |    |    |    |    |
[000068] 298.#176 C37  Use *  Keep     rcx  |    |C37a|    |    |    |    |    |    |    |
[000070] 303.#177 C38  Def    Alloc    rcx  |    |C38a|    |    |    |    |    |    |    |
[000171] 304.#178 rcx  Fixd   Keep     rcx  |    |C38a|    |    |    |    |    |    |    |
         304.#179 C38  Use *  Keep     rcx  |    |C38a|    |    |    |    |    |    |    |
         305.#180 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         305.#181 I39  Def    Alloc    rcx  |    |I39a|    |    |    |    |    |    |    |
[000069] 307.#182 C40  Def    Alloc    rdx  |    |I39a|C40a|    |    |    |    |    |    |
[000172] 308.#183 rdx  Fixd   Keep     rdx  |    |I39a|C40a|    |    |    |    |    |    |
         308.#184 C40  Use *  Keep     rdx  |    |I39a|C40a|    |    |    |    |    |    |
         309.#185 rdx  Fixd   Keep     rdx  |    |I39a|    |    |    |    |    |    |    |
         309.#186 I41  Def    Alloc    rdx  |    |I39a|I41a|    |    |    |    |    |    |
[000071] 310.#187 rcx  Fixd   Keep     rcx  |    |I39a|I41a|    |    |    |    |    |    |
         310.#188 I39  Use *  Keep     rcx  |    |I39a|I41a|    |    |    |    |    |    |
         310.#189 rdx  Fixd   Keep     rdx  |    |I39a|I41a|    |    |    |    |    |    |
         310.#190 I41  Use *  Keep     rdx  |    |I39a|I41a|    |    |    |    |    |    |
         311.#191 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         311.#192 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         311.#193 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         311.#194 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         311.#195 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         311.#196 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         311.#197 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         311.#198 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         311.#199 I42  Def    Alloc    rax  |I42a|    |    |    |    |    |    |    |    |
[000072] 312.#200 I42  Use *  Keep     rax  |I42a|    |    |    |    |    |    |    |    |
[000075] 317.#201 C43  Def    Alloc    rcx  |    |C43a|    |    |    |    |    |    |    |
[000173] 318.#202 rcx  Fixd   Keep     rcx  |    |C43a|    |    |    |    |    |    |    |
         318.#203 C43  Use *  Keep     rcx  |    |C43a|    |    |    |    |    |    |    |
         319.#204 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         319.#205 I44  Def    Alloc    rcx  |    |I44a|    |    |    |    |    |    |    |
[000076] 320.#206 rcx  Fixd   Keep     rcx  |    |I44a|    |    |    |    |    |    |    |
         320.#207 I44  Use *  Keep     rcx  |    |I44a|    |    |    |    |    |    |    |
         321.#208 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         321.#209 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         321.#210 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         321.#211 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         321.#212 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         321.#213 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         321.#214 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         321.#215 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         321.#216 I45  Def    Alloc    rax  |I45a|    |    |    |    |    |    |    |    |
[000078] 322.#217 I45  Use *  Keep     rax  |I45a|    |    |    |    |    |    |    |    |
[000074] 325.#218 I46  Def    Alloc    rcx  |    |I46a|    |    |    |    |    |    |    |
[000174] 326.#219 rcx  Fixd   Keep     rcx  |    |I46a|    |    |    |    |    |    |    |
         326.#220 I46  Use *  Keep     rcx  |    |I46a|    |    |    |    |    |    |    |
         327.#221 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         327.#222 I47  Def    Alloc    rcx  |    |I47a|    |    |    |    |    |    |    |
[000079] 329.#223 I48  Def    Alloc    rdx  |    |I47a|I48a|    |    |    |    |    |    |
[000175] 330.#224 rdx  Fixd   Keep     rdx  |    |I47a|I48a|    |    |    |    |    |    |
         330.#225 I48  Use *  Keep     rdx  |    |I47a|I48a|    |    |    |    |    |    |
         331.#226 rdx  Fixd   Keep     rdx  |    |I47a|    |    |    |    |    |    |    |
         331.#227 I49  Def    Alloc    rdx  |    |I47a|I49a|    |    |    |    |    |    |
[000077] 332.#228 rcx  Fixd   Keep     rcx  |    |I47a|I49a|    |    |    |    |    |    |
         332.#229 I47  Use *  Keep     rcx  |    |I47a|I49a|    |    |    |    |    |    |
         332.#230 rdx  Fixd   Keep     rdx  |    |I47a|I49a|    |    |    |    |    |    |
         332.#231 I49  Use *  Keep     rdx  |    |I47a|I49a|    |    |    |    |    |    |
         333.#232 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         333.#233 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         333.#234 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         333.#235 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         333.#236 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         333.#237 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         333.#238 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000073] 337.#239 I50  Def    BSFIT(A) rcx  |    |I50a|    |    |    |    |    |    |    |
[000080] 338.#240 I50  Use *  Keep     rcx  |    |I50a|    |    |    |    |    |    |    |
[000081] 343.#241 I51  Def    Alloc    rcx  |    |I51a|    |    |    |    |    |    |    |
[000176] 344.#242 rcx  Fixd   Keep     rcx  |    |I51a|    |    |    |    |    |    |    |
         344.#243 I51  Use *  Keep     rcx  |    |I51a|    |    |    |    |    |    |    |
         345.#244 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         345.#245 I52  Def    Alloc    rcx  |    |I52a|    |    |    |    |    |    |    |
[000082] 347.#246 I53  Def    Alloc    rdx  |    |I52a|I53a|    |    |    |    |    |    |
[000177] 348.#247 rdx  Fixd   Keep     rdx  |    |I52a|I53a|    |    |    |    |    |    |
         348.#248 I53  Use *  Keep     rdx  |    |I52a|I53a|    |    |    |    |    |    |
         349.#249 rdx  Fixd   Keep     rdx  |    |I52a|    |    |    |    |    |    |    |
         349.#250 I54  Def    Alloc    rdx  |    |I52a|I54a|    |    |    |    |    |    |
[000083] 351.#251 C55  Def    Alloc    r8   |    |I52a|I54a|    |    |    |    |C55a|    |
[000178] 352.#252 r8   Fixd   Keep     r8   |    |I52a|I54a|    |    |    |    |C55a|    |
         352.#253 C55  Use *  Keep     r8   |    |I52a|I54a|    |    |    |    |C55a|    |
         353.#254 r8   Fixd   Keep     r8   |    |I52a|I54a|    |    |    |    |    |    |
         353.#255 I56  Def    Alloc    r8   |    |I52a|I54a|    |    |    |    |I56a|    |
[000084] 358.#256 rcx  Fixd   Keep     rcx  |    |I52a|I54a|    |    |    |    |I56a|    |
         358.#257 I52  Use *  Keep     rcx  |    |I52a|I54a|    |    |    |    |I56a|    |
         358.#258 rdx  Fixd   Keep     rdx  |    |I52a|I54a|    |    |    |    |I56a|    |
         358.#259 I54  Use *  Keep     rdx  |    |I52a|I54a|    |    |    |    |I56a|    |
         358.#260 r8   Fixd   Keep     r8   |    |I52a|I54a|    |    |    |    |I56a|    |
         358.#261 I56  Use *  Keep     r8   |    |I52a|I54a|    |    |    |    |I56a|    |
         359.#262 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         359.#263 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         359.#264 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         359.#265 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         359.#266 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         359.#267 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         359.#268 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         359.#269 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         359.#270 I57  Def    Alloc    rax  |I57a|    |    |    |    |    |    |    |    |
[000085] 360.#271 I57  Use *  Keep     rax  |    |    |    |    |    |    |    |    |    |

------------
REFPOSITIONS AFTER ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeBB BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax> BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx> BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx> BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 > BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 > BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10> BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11> BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeDef <Ivl:0> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @32  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @32  RefTypeUse <Ivl:0> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @33  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @33  RefTypeDef <Ivl:1> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @35  RefTypeDef <Ivl:2> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #18  @36  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #19  @36  RefTypeUse <Ivl:2> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #20  @37  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #21  @37  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #22  @39  RefTypeDef <Ivl:4> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #23  @40  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #24  @40  RefTypeUse <Ivl:4> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #25  @41  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #26  @41  RefTypeDef <Ivl:5> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #27  @46  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @46  RefTypeUse <Ivl:1> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @46  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #32  @46  RefTypeUse <Ivl:5> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #39  @47  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #40  @54  RefTypeDef <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #41  @54  RefTypeUse <Ivl:6 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #42  @59  RefTypeDef <Ivl:7> LCL_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #43  @60  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #44  @60  RefTypeUse <Ivl:7> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @61  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #46  @61  RefTypeDef <Ivl:8> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #47  @63  RefTypeDef <Ivl:9> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #48  @64  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #49  @64  RefTypeUse <Ivl:9> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #50  @65  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #51  @65  RefTypeDef <Ivl:10> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #52  @67  RefTypeDef <Ivl:11> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #53  @68  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #54  @68  RefTypeUse <Ivl:11> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #55  @69  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #56  @69  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #57  @74  RefTypeFixedReg <Reg:rcx> BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #58  @74  RefTypeUse <Ivl:8> BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #59  @74  RefTypeFixedReg <Reg:rdx> BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @74  RefTypeUse <Ivl:10> BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #61  @74  RefTypeFixedReg <Reg:r8 > BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #62  @74  RefTypeUse <Ivl:12> BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #63  @75  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #64  @75  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #65  @75  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #66  @75  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #67  @75  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #68  @75  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #69  @75  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #70  @82  RefTypeDef <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #71  @82  RefTypeUse <Ivl:13 internal> STORE_BLK BB05 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #72  @91  RefTypeKill <Reg:rax> BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #73  @91  RefTypeKill <Reg:rcx> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #74  @91  RefTypeKill <Reg:rdx> BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #75  @91  RefTypeKill <Reg:r8 > BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #76  @91  RefTypeKill <Reg:r9 > BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #77  @91  RefTypeKill <Reg:r10> BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #78  @91  RefTypeKill <Reg:r11> BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #79  @99  RefTypeDef <Ivl:14> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #80  @100 RefTypeUse <Ivl:14> BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #81  @106 RefTypeBB BB10 regmask=[] minReg=1 wt=100.00>
<RefPosition #82  @115 RefTypeDef <Ivl:15> LE BB10 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #83  @116 RefTypeUse <Ivl:15> BB10 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #84  @128 RefTypeBB BB06 regmask=[] minReg=1 wt=100.00>
<RefPosition #85  @137 RefTypeDef <Ivl:16> CNS_INT BB06 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #86  @138 RefTypeUse <Ivl:16> BB06 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #87  @144 RefTypeBB BB08 regmask=[] minReg=1 wt=100.00>
<RefPosition #88  @153 RefTypeDef <Ivl:17> LE BB08 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #89  @154 RefTypeUse <Ivl:17> BB08 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #90  @166 RefTypeBB BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #91  @179 RefTypeDef <Ivl:18> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #92  @180 RefTypeUse <Ivl:18> BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #93  @185 RefTypeDef <Ivl:19> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #94  @188 RefTypeUse <Ivl:19> BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #95  @189 RefTypeDef <Ivl:20> ADD BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #96  @190 RefTypeUse <Ivl:20> BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #97  @192 RefTypeBB BB09 regmask=[] minReg=1 wt=100.00>
<RefPosition #98  @201 RefTypeDef <Ivl:21> LCL_VAR BB09 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #99  @202 RefTypeUse <Ivl:21> BB09 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #100 @207 RefTypeDef <Ivl:22> LCL_VAR BB09 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #101 @210 RefTypeUse <Ivl:22> BB09 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #102 @211 RefTypeDef <Ivl:23> ADD BB09 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #103 @212 RefTypeUse <Ivl:23> BB09 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #104 @214 RefTypeBB BB11 regmask=[] minReg=1 wt=100.00>
<RefPosition #105 @219 RefTypeDef <Ivl:24> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #106 @220 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #107 @220 RefTypeUse <Ivl:24> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #108 @221 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #109 @221 RefTypeDef <Ivl:25> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #110 @226 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #111 @226 RefTypeUse <Ivl:25> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #112 @227 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #113 @227 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #114 @227 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #115 @227 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #116 @227 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #117 @227 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #118 @227 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #119 @238 RefTypeDef <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #120 @238 RefTypeUse <Ivl:26 internal> STORE_BLK BB11 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #121 @244 RefTypeDef <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0] minReg=1 wt=400.00>
<RefPosition #122 @244 RefTypeUse <Ivl:27 internal> STORE_BLK BB11 regmask=[mm0] minReg=1 last wt=400.00>
<RefPosition #123 @247 RefTypeDef <Ivl:28> LCL_ADDR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #124 @248 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #125 @248 RefTypeUse <Ivl:28> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #126 @249 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #127 @249 RefTypeDef <Ivl:29> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #128 @251 RefTypeDef <Ivl:30> LCL_ADDR BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #129 @252 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #130 @252 RefTypeUse <Ivl:30> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #131 @253 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #132 @253 RefTypeDef <Ivl:31> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #133 @258 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #134 @258 RefTypeUse <Ivl:29> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #135 @258 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #136 @258 RefTypeUse <Ivl:31> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #137 @259 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #138 @259 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #139 @259 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #140 @259 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #141 @259 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #142 @259 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #143 @259 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #144 @259 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #145 @259 RefTypeDef <Ivl:32> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #146 @260 RefTypeUse <Ivl:32> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #147 @265 RefTypeDef <Ivl:33> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #148 @266 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #149 @266 RefTypeUse <Ivl:33> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #150 @267 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #151 @267 RefTypeDef <Ivl:34> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #152 @272 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #153 @272 RefTypeUse <Ivl:34> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #154 @273 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #155 @273 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #156 @273 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #157 @273 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #158 @273 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #159 @273 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #160 @273 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #161 @281 RefTypeDef <Ivl:35> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #162 @282 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #163 @282 RefTypeUse <Ivl:35> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #164 @283 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #165 @283 RefTypeDef <Ivl:36> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #166 @288 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #167 @288 RefTypeUse <Ivl:36> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #168 @289 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #169 @289 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #170 @289 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #171 @289 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #172 @289 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #173 @289 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #174 @289 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #175 @297 RefTypeDef <Ivl:37> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #176 @298 RefTypeUse <Ivl:37> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #177 @303 RefTypeDef <Ivl:38> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #178 @304 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @304 RefTypeUse <Ivl:38> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #180 @305 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #181 @305 RefTypeDef <Ivl:39> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #182 @307 RefTypeDef <Ivl:40> CNS_INT BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #183 @308 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #184 @308 RefTypeUse <Ivl:40> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #185 @309 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #186 @309 RefTypeDef <Ivl:41> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #187 @310 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #188 @310 RefTypeUse <Ivl:39> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #189 @310 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #190 @310 RefTypeUse <Ivl:41> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #191 @311 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #192 @311 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #193 @311 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #194 @311 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #195 @311 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #196 @311 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #197 @311 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #198 @311 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #199 @311 RefTypeDef <Ivl:42> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #200 @312 RefTypeUse <Ivl:42> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #201 @317 RefTypeDef <Ivl:43> CNS_INT BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #202 @318 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #203 @318 RefTypeUse <Ivl:43> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #204 @319 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @319 RefTypeDef <Ivl:44> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #206 @320 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #207 @320 RefTypeUse <Ivl:44> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @321 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #209 @321 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #210 @321 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #211 @321 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #212 @321 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #213 @321 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #214 @321 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #215 @321 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #216 @321 RefTypeDef <Ivl:45> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #217 @322 RefTypeUse <Ivl:45> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #218 @325 RefTypeDef <Ivl:46> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #219 @326 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #220 @326 RefTypeUse <Ivl:46> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #221 @327 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #222 @327 RefTypeDef <Ivl:47> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #223 @329 RefTypeDef <Ivl:48> LCL_FLD BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #224 @330 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #225 @330 RefTypeUse <Ivl:48> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #226 @331 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #227 @331 RefTypeDef <Ivl:49> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #228 @332 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #229 @332 RefTypeUse <Ivl:47> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #230 @332 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #231 @332 RefTypeUse <Ivl:49> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #232 @333 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #233 @333 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #234 @333 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #235 @333 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #236 @333 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #237 @333 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #238 @333 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #239 @337 RefTypeDef <Ivl:50> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #240 @338 RefTypeUse <Ivl:50> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #241 @343 RefTypeDef <Ivl:51> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #242 @344 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #243 @344 RefTypeUse <Ivl:51> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #244 @345 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #245 @345 RefTypeDef <Ivl:52> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #246 @347 RefTypeDef <Ivl:53> LCL_VAR BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #247 @348 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #248 @348 RefTypeUse <Ivl:53> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #249 @349 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #250 @349 RefTypeDef <Ivl:54> PUTARG_REG BB11 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #251 @351 RefTypeDef <Ivl:55> CNS_INT BB11 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #252 @352 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #253 @352 RefTypeUse <Ivl:55> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #254 @353 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #255 @353 RefTypeDef <Ivl:56> PUTARG_REG BB11 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #256 @358 RefTypeFixedReg <Reg:rcx> BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @358 RefTypeUse <Ivl:52> BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #258 @358 RefTypeFixedReg <Reg:rdx> BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #259 @358 RefTypeUse <Ivl:54> BB11 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @358 RefTypeFixedReg <Reg:r8 > BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #261 @358 RefTypeUse <Ivl:56> BB11 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #262 @359 RefTypeKill <Reg:rax> BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #263 @359 RefTypeKill <Reg:rcx> BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #264 @359 RefTypeKill <Reg:rdx> BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #265 @359 RefTypeKill <Reg:r8 > BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #266 @359 RefTypeKill <Reg:r9 > BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #267 @359 RefTypeKill <Reg:r10> BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #268 @359 RefTypeKill <Reg:r11> BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #269 @359 RefTypeFixedReg <Reg:rax> BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #270 @359 RefTypeDef <Ivl:57> CALL BB11 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #271 @360 RefTypeUse <Ivl:57> BB11 regmask=[rax] minReg=1 last wt=100.00>
Active intervals at end of allocation:

Trees after linear scan register allocator (LSRA)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe LIR 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target LIR 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target LIR 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src LIR 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd LIR 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src LIR 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N002 (  0,  0) [000000] -----------                            NOP       void   REG NA

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N006 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr REG NA
                                                            /--*  t89    long   
N008 (  5, 12) [000090] nc--G------                   t90 = *  IND       int    REG NA
N010 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0 REG NA
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N012 (  7, 14) [000092] ----G--N---                         *  CMP       void   REG NA
N014 (  9, 16) [000104] ----G------                            JCC       void   cond=UEQ REG NA

------------ BB03 [???..???), preds={BB02} succs={BB04}
N018 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
N024 (???,???) [000105] -----------                            IL_OFFSET void   INLRT @ 0x000[E-] REG NA
N026 (  1,  1) [000001] -----------                            NO_OP     void   REG NA
N028 (???,???) [000106] -----------                            IL_OFFSET void   INLRT @ 0x001[E-] REG NA
N030 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0] rcx REG rcx
                                                            /--*  t4     long   
N032 (???,???) [000142] -----------                  t142 = *  PUTARG_REG long   REG rcx
N034 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t2     long   
N036 (???,???) [000143] -----------                  t143 = *  PUTARG_REG long   REG rdx
N038 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t3     int    
N040 (???,???) [000144] -----------                  t144 = *  PUTARG_REG int    REG r8
N042 (  3, 10) [000145] Hc---------                  t145 =    CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
                                                            /--*  t145   long   
N044 (  5, 12) [000146] nc--G------                  t146 = *  IND       long   REG NA
                                                            /--*  t142   long   this in rcx
                                                            +--*  t143   long   arg1 in rdx
                                                            +--*  t144   int    arg2 in r8
                                                            +--*  t146   long   control expr
N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N048 (???,???) [000107] -----------                            IL_OFFSET void   INLRT @ 0x010[--] REG NA
N050 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
N052 (???,???) [000147] Dc---------                  t147 =    LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
                                                            /--*  t147   byref  
                                                            +--*  t6     struct 
N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N056 (???,???) [000108] -----------                            IL_OFFSET void   INLRT @ 0x011[E-] REG NA
N058 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0] rcx REG rcx
                                                            /--*  t10    long   
N060 (???,???) [000148] -----------                  t148 = *  PUTARG_REG long   REG rcx
N062 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t8     long   
N064 (???,???) [000149] -----------                  t149 = *  PUTARG_REG long   REG rdx
N066 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t9     int    
N068 (???,???) [000150] -----------                  t150 = *  PUTARG_REG int    REG r8
N070 (  3, 10) [000151] Hc---------                  t151 =    CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
                                                            /--*  t151   long   
N072 (  5, 12) [000152] nc--G------                  t152 = *  IND       long   REG NA
                                                            /--*  t148   long   this in rcx
                                                            +--*  t149   long   arg1 in rdx
                                                            +--*  t150   int    arg2 in r8
                                                            +--*  t152   long   control expr
N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N076 (???,???) [000109] -----------                            IL_OFFSET void   INLRT @ 0x020[--] REG NA
N078 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
N080 (???,???) [000153] Dc---------                  t153 =    LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
                                                            /--*  t153   byref  
                                                            +--*  t12    struct 
N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N084 (???,???) [000110] -----------                            IL_OFFSET void   INLRT @ 0x021[E-] REG NA
N086 (  3, 10) [000154] Hc---------                  t154 =    CNS_INT(h) long   0x7ff7c6bafba0 ftn REG NA
                                                            /--*  t154   long   
N088 (  5, 12) [000155] nc--G------                  t155 = *  IND       long   REG NA
                                                            /--*  t155   long   control expr
N090 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine() REG NA
N092 (???,???) [000111] -----------                            IL_OFFSET void   INLRT @ 0x026[E-] REG NA
N094 (  1,  1) [000015] -----------                            NO_OP     void   REG NA
N096 (???,???) [000112] -----------                            IL_OFFSET void   INLRT @ 0x027[E-] REG NA
N098 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0 REG rcx
                                                            /--*  t16    int    
N100 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA
N102 (???,???) [000113] -----------                            IL_OFFSET void   INLRT @ 0x02A[E-] REG NA
N104 (  0,  0) [000018] -----------                            NOP       void   REG NA

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
N130 (???,???) [000114] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-] REG NA
N132 (  1,  1) [000027] -----------                            NO_OP     void   REG NA
N134 (???,???) [000115] -----------                            IL_OFFSET void   INLRT @ 0x02D[E-] REG NA
N136 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0 REG rcx
                                                            /--*  t28    int    
N138 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA
N140 (???,???) [000116] -----------                            IL_OFFSET void   INLRT @ 0x030[E-] REG NA
N142 (  0,  0) [000030] -----------                            NOP       void   REG NA

------------ BB07 [032..03E), preds={BB08} succs={BB08}
N168 (???,???) [000117] -----------                            IL_OFFSET void   INLRT @ 0x032[E-] REG NA
N170 (  1,  1) [000039] -----------                            NO_OP     void   REG NA
N172 (???,???) [000118] -----------                            IL_OFFSET void   INLRT @ 0x033[E-] REG NA
N174 (  1,  1) [000040] -----------                            NO_OP     void   REG NA
N176 (???,???) [000119] -----------                            IL_OFFSET void   INLRT @ 0x034[E-] REG NA
N178 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5          rcx REG rcx
                                                            /--*  t41    int    
N180 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
N182 (???,???) [000120] -----------                            IL_OFFSET void   INLRT @ 0x038[E-] REG NA
N184 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6          rcx REG rcx
N186 (  1,  1) [000044] -c---------                   t44 =    CNS_INT   int    1 REG NA
                                                            /--*  t43    int    
                                                            +--*  t44    int    
N188 (  5,  4) [000045] -----------                   t45 = *  ADD       int    REG rcx
                                                            /--*  t45    int    
N190 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
N146 (???,???) [000121] -----------                            IL_OFFSET void   INLRT @ 0x03E[E-] REG NA
N148 (  3,  2) [000031] -c---------                   t31 =    LCL_VAR   int    V06 loc5          NA REG NA
N150 (  1,  1) [000032] -c---------                   t32 =    CNS_INT   int    0 REG NA
                                                            /--*  t31    int    
                                                            +--*  t32    int    
N152 (  8,  4) [000033] -----------                   t33 = *  LE        int    REG rcx
                                                            /--*  t33    int    
N154 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7          NA REG NA
N156 (???,???) [000122] -----------                            IL_OFFSET void   INLRT @ 0x045[E-] REG NA
N158 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7          NA REG NA
N160 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0 REG NA
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N162 (  5,  4) [000037] -------N---                         *  CMP       void   REG NA
N164 (  7,  6) [000038] -----------                            JCC       void   cond=UNE REG NA

------------ BB09 [049..054), preds={BB08} succs={BB10}
N194 (???,???) [000123] -----------                            IL_OFFSET void   INLRT @ 0x049[E-] REG NA
N196 (  1,  1) [000047] -----------                            NO_OP     void   REG NA
N198 (???,???) [000124] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-] REG NA
N200 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4          rcx REG rcx
                                                            /--*  t48    int    
N202 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
N204 (???,???) [000125] -----------                            IL_OFFSET void   INLRT @ 0x04E[E-] REG NA
N206 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6          rcx REG rcx
N208 (  1,  1) [000051] -c---------                   t51 =    CNS_INT   int    1 REG NA
                                                            /--*  t50    int    
                                                            +--*  t51    int    
N210 (  5,  4) [000052] -----------                   t52 = *  ADD       int    REG rcx
                                                            /--*  t52    int    
N212 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
N108 (???,???) [000126] -----------                            IL_OFFSET void   INLRT @ 0x054[E-] REG NA
N110 (  3,  2) [000019] -c---------                   t19 =    LCL_VAR   int    V05 loc4          NA REG NA
N112 (  1,  1) [000020] -c---------                   t20 =    CNS_INT   int    0 REG NA
                                                            /--*  t19    int    
                                                            +--*  t20    int    
N114 (  8,  4) [000021] -----------                   t21 = *  LE        int    REG rcx
                                                            /--*  t21    int    
N116 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8          NA REG NA
N118 (???,???) [000127] -----------                            IL_OFFSET void   INLRT @ 0x05B[E-] REG NA
N120 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8          NA REG NA
N122 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0 REG NA
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N124 (  5,  4) [000025] -------N---                         *  CMP       void   REG NA
N126 (  7,  6) [000026] -----------                            JCC       void   cond=UNE REG NA

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}
N216 (???,???) [000128] -----------                            IL_OFFSET void   INLRT @ 0x05F[E-] REG NA
N218 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'
 REG rcx
                                                            /--*  t97    ref    
N220 (???,???) [000156] -----------                  t156 = *  PUTARG_REG ref    REG rcx
N222 (  3, 10) [000157] Hc---------                  t157 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
                                                            /--*  t157   long   
N224 (  5, 12) [000158] nc--G------                  t158 = *  IND       long   REG NA
                                                            /--*  t156   ref    arg0 in rcx
                                                            +--*  t158   long   control expr
N226 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N228 (???,???) [000129] -----------                            IL_OFFSET void   INLRT @ 0x069[E-] REG NA
N230 (  1,  1) [000056] -----------                            NO_OP     void   REG NA
N232 (???,???) [000130] -----------                            IL_OFFSET void   INLRT @ 0x06A[E-] REG NA
N234 (  9,  6) [000057] -c---------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
N236 (???,???) [000159] Dc---------                  t159 =    LCL_ADDR  byref  V17 tmp7         [+0] NA REG NA
                                                            /--*  t159   byref  
                                                            +--*  t57    struct 
N238 ( 19, 13) [000098] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N240 (  9,  6) [000058] -c---------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
N242 (???,???) [000160] Dc---------                  t160 =    LCL_ADDR  byref  V18 tmp8         [+0] NA REG NA
                                                            /--*  t160   byref  
                                                            +--*  t58    struct 
N244 ( 19, 13) [000099] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N246 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0] rcx REG rcx
                                                            /--*  t100   long   
N248 (???,???) [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
N250 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0] rdx REG rdx
                                                            /--*  t101   long   
N252 (???,???) [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
N254 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn REG NA
                                                            /--*  t163   long   
N256 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                            /--*  t161   long   arg0 in rcx
                                                            +--*  t162   long   arg1 in rdx
                                                            +--*  t164   long   control expr
N258 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG rax
                                                            /--*  t59    int    
N260 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
N262 (???,???) [000131] -----------                            IL_OFFSET void   INLRT @ 0x071[--] REG NA
N264 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3          rcx REG rcx
                                                            /--*  t61    int    
N266 (???,???) [000165] -----------                  t165 = *  PUTARG_REG int    REG rcx
N268 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ff7c6bafbb8 ftn REG NA
                                                            /--*  t166   long   
N270 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t165   int    arg0 in rcx
                                                            +--*  t167   long   control expr
N272 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
N274 (???,???) [000132] -----------                            IL_OFFSET void   INLRT @ 0x076[E-] REG NA
N276 (  1,  1) [000063] -----------                            NO_OP     void   REG NA
N278 (???,???) [000133] -----------                            IL_OFFSET void   INLRT @ 0x077[E-] REG NA
N280 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'
 REG rcx
                                                            /--*  t102   ref    
N282 (???,???) [000168] -----------                  t168 = *  PUTARG_REG ref    REG rcx
N284 (  3, 10) [000169] Hc---------                  t169 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
                                                            /--*  t169   long   
N286 (  5, 12) [000170] nc--G------                  t170 = *  IND       long   REG NA
                                                            /--*  t168   ref    arg0 in rcx
                                                            +--*  t170   long   control expr
N288 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N290 (???,???) [000134] -----------                            IL_OFFSET void   INLRT @ 0x081[E-] REG NA
N292 (  1,  1) [000066] -----------                            NO_OP     void   REG NA
N294 (???,???) [000135] -----------                            IL_OFFSET void   INLRT @ 0x082[E-] REG NA
N296 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG rcx
                                                            /--*  t103   ref    
N298 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
N300 (???,???) [000136] -----------                            IL_OFFSET void   INLRT @ 0x088[E-] REG NA
N302 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class REG rcx
                                                            /--*  t70    long   
N304 (???,???) [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
N306 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3 REG rdx
                                                            /--*  t69    long   
N308 (???,???) [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                            /--*  t171   long   arg0 in rcx
                                                            +--*  t172   long   arg1 in rdx
N310 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
                                                            /--*  t71    ref    
N312 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
N314 (???,???) [000137] -----------                            IL_OFFSET void   INLRT @ 0x08E[--] REG NA
N316 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field REG rcx
                                                            /--*  t75    long   
N318 (???,???) [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                            /--*  t173   long   arg0 in rcx
N320 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
                                                            /--*  t76    ref    
N322 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
N324 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t74    ref    
N326 (???,???) [000174] -----------                  t174 = *  PUTARG_REG ref    REG rcx
N328 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0] rdx REG rdx
                                                            /--*  t79    ref    
N330 (???,???) [000175] -----------                  t175 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t174   ref    arg0 in rcx
                                                            +--*  t175   ref    arg1 in rdx
N332 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
N334 (???,???) [000138] -----------                            IL_OFFSET void   INLRT @ 0x099[--] REG NA
N336 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t73    ref    
N338 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
N340 (???,???) [000139] -----------                            IL_OFFSET void   INLRT @ 0x09A[E-] REG NA
N342 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
                                                            /--*  t81    ref    
N344 (???,???) [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
N346 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3          rdx REG rdx
                                                            /--*  t82    ref    
N348 (???,???) [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
N350 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1 REG r8
                                                            /--*  t83    int    
N352 (???,???) [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
N354 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn REG NA
                                                            /--*  t179   long   
N356 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                            /--*  t176   ref    arg0 in rcx
                                                            +--*  t177   ref    arg1 in rdx
                                                            +--*  t178   int    arg2 in r8
                                                            +--*  t180   long   control expr
N358 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[] REG rax
                                                            /--*  t84    ref    
N360 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
N362 (???,???) [000140] -----------                            IL_OFFSET void   INLRT @ 0x0A2[--] REG NA
N364 (  0,  0) [000087] -----------                            NOP       void   REG NA
N366 (???,???) [000141] -----------                            IL_OFFSET void   INLRT @ 0x0A3[E-] REG NA
N368 (  0,  0) [000088] -----------                            RETURN    void   REG NA

-------------------------------------------------------------------------------------------------------------------

Final allocation
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
           0.#0   BB1  PredBB0              |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
           4.#1   BB2  PredBB1              |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          16.#2   BB3  PredBB2              |    |    |    |    |    |    |    |    |    |
[000093]  19.#3   rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          19.#4   rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          19.#5   rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          19.#6   r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          19.#7   r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          19.#8   r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          19.#9   r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          20.#10  BB4  PredBB2              |    |    |    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
          22.#11  BB5  PredBB4              |    |    |    |    |    |    |    |    |    |
[000004]  31.#12  I0   Def    Alloc    rcx  |    |I0 a|    |    |    |    |    |    |    |
[000142]  32.#13  rcx  Fixd   Keep     rcx  |    |I0 a|    |    |    |    |    |    |    |
          32.#14  I0   Use *  Keep     rcx  |    |I0 i|    |    |    |    |    |    |    |
          33.#15  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          33.#16  I1   Def    Alloc    rcx  |    |I1 a|    |    |    |    |    |    |    |
[000002]  35.#17  C2   Def    Alloc    rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
[000143]  36.#18  rdx  Fixd   Keep     rdx  |    |I1 a|C2 a|    |    |    |    |    |    |
          36.#19  C2   Use *  Keep     rdx  |    |I1 a|C2 i|    |    |    |    |    |    |
          37.#20  rdx  Fixd   Keep     rdx  |    |I1 a|    |    |    |    |    |    |    |
          37.#21  I3   Def    Alloc    rdx  |    |I1 a|I3 a|    |    |    |    |    |    |
[000003]  39.#22  C4   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
[000144]  40.#23  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 a|    |
          40.#24  C4   Use *  Keep     r8   |    |I1 a|I3 a|    |    |    |    |C4 i|    |
          41.#25  r8   Fixd   Keep     r8   |    |I1 a|I3 a|    |    |    |    |    |    |
          41.#26  I5   Def    Alloc    r8   |    |I1 a|I3 a|    |    |    |    |I5 a|    |
[000005]  46.#27  rcx  Fixd   Keep     rcx  |    |I1 a|I3 a|    |    |    |    |I5 a|    |
          46.#28  I1   Use *  Keep     rcx  |    |I1 i|I3 a|    |    |    |    |I5 a|    |
          46.#29  rdx  Fixd   Keep     rdx  |    |    |I3 a|    |    |    |    |I5 a|    |
          46.#30  I3   Use *  Keep     rdx  |    |    |I3 i|    |    |    |    |I5 a|    |
          46.#31  r8   Fixd   Keep     r8   |    |    |    |    |    |    |    |I5 a|    |
          46.#32  I5   Use *  Keep     r8   |    |    |    |    |    |    |    |I5 i|    |
          47.#33  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          47.#34  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          47.#35  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          47.#36  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          47.#37  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          47.#38  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          47.#39  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000007]  54.#40  I6   Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
          54.#41  I6   Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000010]  59.#42  I7   Def    Alloc    rcx  |    |I7 a|    |    |    |    |    |    |    |
[000148]  60.#43  rcx  Fixd   Keep     rcx  |    |I7 a|    |    |    |    |    |    |    |
          60.#44  I7   Use *  Keep     rcx  |    |I7 i|    |    |    |    |    |    |    |
          61.#45  rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          61.#46  I8   Def    Alloc    rcx  |    |I8 a|    |    |    |    |    |    |    |
[000008]  63.#47  C9   Def    Alloc    rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
[000149]  64.#48  rdx  Fixd   Keep     rdx  |    |I8 a|C9 a|    |    |    |    |    |    |
          64.#49  C9   Use *  Keep     rdx  |    |I8 a|C9 i|    |    |    |    |    |    |
          65.#50  rdx  Fixd   Keep     rdx  |    |I8 a|    |    |    |    |    |    |    |
          65.#51  I10  Def    Alloc    rdx  |    |I8 a|I10a|    |    |    |    |    |    |
[000009]  67.#52  C11  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
[000150]  68.#53  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |C11a|    |
          68.#54  C11  Use *  Keep     r8   |    |I8 a|I10a|    |    |    |    |C11i|    |
          69.#55  r8   Fixd   Keep     r8   |    |I8 a|I10a|    |    |    |    |    |    |
          69.#56  I12  Def    Alloc    r8   |    |I8 a|I10a|    |    |    |    |I12a|    |
[000011]  74.#57  rcx  Fixd   Keep     rcx  |    |I8 a|I10a|    |    |    |    |I12a|    |
          74.#58  I8   Use *  Keep     rcx  |    |I8 i|I10a|    |    |    |    |I12a|    |
          74.#59  rdx  Fixd   Keep     rdx  |    |    |I10a|    |    |    |    |I12a|    |
          74.#60  I10  Use *  Keep     rdx  |    |    |I10i|    |    |    |    |I12a|    |
          74.#61  r8   Fixd   Keep     r8   |    |    |    |    |    |    |    |I12a|    |
          74.#62  I12  Use *  Keep     r8   |    |    |    |    |    |    |    |I12i|    |
          75.#63  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          75.#64  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          75.#65  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          75.#66  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          75.#67  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          75.#68  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          75.#69  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000013]  82.#70  I13  Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
          82.#71  I13  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000014]  91.#72  rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
          91.#73  rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
          91.#74  rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
          91.#75  r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
          91.#76  r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
          91.#77  r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
          91.#78  r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000016]  99.#79  C14  Def    Alloc    rcx  |    |C14a|    |    |    |    |    |    |    |
[000017] 100.#80  C14  Use *  Keep     rcx  |    |C14i|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         106.#81  BB10 PredBB5              |    |    |    |    |    |    |    |    |    |
[000021] 115.#82  I15  Def    Alloc    rcx  |    |I15a|    |    |    |    |    |    |    |
[000022] 116.#83  I15  Use *  Keep     rcx  |    |I15i|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         128.#84  BB6  PredBB10             |    |    |    |    |    |    |    |    |    |
[000028] 137.#85  C16  Def    Alloc    rcx  |    |C16a|    |    |    |    |    |    |    |
[000029] 138.#86  C16  Use *  Keep     rcx  |    |C16i|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         144.#87  BB8  PredBB6              |    |    |    |    |    |    |    |    |    |
[000033] 153.#88  I17  Def    Alloc    rcx  |    |I17a|    |    |    |    |    |    |    |
[000034] 154.#89  I17  Use *  Keep     rcx  |    |I17i|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         166.#90  BB7  PredBB8              |    |    |    |    |    |    |    |    |    |
[000041] 179.#91  I18  Def    Alloc    rcx  |    |I18a|    |    |    |    |    |    |    |
[000042] 180.#92  I18  Use *  Keep     rcx  |    |I18i|    |    |    |    |    |    |    |
[000043] 185.#93  I19  Def    Alloc    rcx  |    |I19a|    |    |    |    |    |    |    |
[000045] 188.#94  I19  Use *  Keep     rcx  |    |I19i|    |    |    |    |    |    |    |
         189.#95  I20  Def    Alloc    rcx  |    |I20a|    |    |    |    |    |    |    |
[000046] 190.#96  I20  Use *  Keep     rcx  |    |I20i|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         192.#97  BB9  PredBB8              |    |    |    |    |    |    |    |    |    |
[000048] 201.#98  I21  Def    Alloc    rcx  |    |I21a|    |    |    |    |    |    |    |
[000049] 202.#99  I21  Use *  Keep     rcx  |    |I21i|    |    |    |    |    |    |    |
[000050] 207.#100 I22  Def    Alloc    rcx  |    |I22a|    |    |    |    |    |    |    |
[000052] 210.#101 I22  Use *  Keep     rcx  |    |I22i|    |    |    |    |    |    |    |
         211.#102 I23  Def    Alloc    rcx  |    |I23a|    |    |    |    |    |    |    |
[000053] 212.#103 I23  Use *  Keep     rcx  |    |I23i|    |    |    |    |    |    |    |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
TreeID   Loc RP#  Name Type  Action    Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------------------+----+----+----+----+----+----+----+----+----+
         214.#104 BB11 PredBB10             |    |    |    |    |    |    |    |    |    |
[000097] 219.#105 C24  Def    Alloc    rcx  |    |C24a|    |    |    |    |    |    |    |
[000156] 220.#106 rcx  Fixd   Keep     rcx  |    |C24a|    |    |    |    |    |    |    |
         220.#107 C24  Use *  Keep     rcx  |    |C24i|    |    |    |    |    |    |    |
         221.#108 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         221.#109 I25  Def    Alloc    rcx  |    |I25a|    |    |    |    |    |    |    |
[000055] 226.#110 rcx  Fixd   Keep     rcx  |    |I25a|    |    |    |    |    |    |    |
         226.#111 I25  Use *  Keep     rcx  |    |I25i|    |    |    |    |    |    |    |
         227.#112 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         227.#113 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         227.#114 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         227.#115 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         227.#116 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         227.#117 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         227.#118 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000098] 238.#119 I26  Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
         238.#120 I26  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000099] 244.#121 I27  Def    Alloc    mm0  |    |    |    |    |    |    |    |    |    |
         244.#122 I27  Use *  Keep     mm0  |    |    |    |    |    |    |    |    |    |
[000100] 247.#123 I28  Def    Alloc    rcx  |    |I28a|    |    |    |    |    |    |    |
[000161] 248.#124 rcx  Fixd   Keep     rcx  |    |I28a|    |    |    |    |    |    |    |
         248.#125 I28  Use *  Keep     rcx  |    |I28i|    |    |    |    |    |    |    |
         249.#126 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         249.#127 I29  Def    Alloc    rcx  |    |I29a|    |    |    |    |    |    |    |
[000101] 251.#128 I30  Def    Alloc    rdx  |    |I29a|I30a|    |    |    |    |    |    |
[000162] 252.#129 rdx  Fixd   Keep     rdx  |    |I29a|I30a|    |    |    |    |    |    |
         252.#130 I30  Use *  Keep     rdx  |    |I29a|I30i|    |    |    |    |    |    |
         253.#131 rdx  Fixd   Keep     rdx  |    |I29a|    |    |    |    |    |    |    |
         253.#132 I31  Def    Alloc    rdx  |    |I29a|I31a|    |    |    |    |    |    |
[000059] 258.#133 rcx  Fixd   Keep     rcx  |    |I29a|I31a|    |    |    |    |    |    |
         258.#134 I29  Use *  Keep     rcx  |    |I29i|I31a|    |    |    |    |    |    |
         258.#135 rdx  Fixd   Keep     rdx  |    |    |I31a|    |    |    |    |    |    |
         258.#136 I31  Use *  Keep     rdx  |    |    |I31i|    |    |    |    |    |    |
         259.#137 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         259.#138 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         259.#139 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         259.#140 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         259.#141 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         259.#142 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         259.#143 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         259.#144 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         259.#145 I32  Def    Alloc    rax  |I32a|    |    |    |    |    |    |    |    |
[000060] 260.#146 I32  Use *  Keep     rax  |I32i|    |    |    |    |    |    |    |    |
[000061] 265.#147 I33  Def    Alloc    rcx  |    |I33a|    |    |    |    |    |    |    |
[000165] 266.#148 rcx  Fixd   Keep     rcx  |    |I33a|    |    |    |    |    |    |    |
         266.#149 I33  Use *  Keep     rcx  |    |I33i|    |    |    |    |    |    |    |
         267.#150 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         267.#151 I34  Def    Alloc    rcx  |    |I34a|    |    |    |    |    |    |    |
[000062] 272.#152 rcx  Fixd   Keep     rcx  |    |I34a|    |    |    |    |    |    |    |
         272.#153 I34  Use *  Keep     rcx  |    |I34i|    |    |    |    |    |    |    |
         273.#154 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         273.#155 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         273.#156 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         273.#157 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         273.#158 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         273.#159 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         273.#160 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000102] 281.#161 C35  Def    Alloc    rcx  |    |C35a|    |    |    |    |    |    |    |
[000168] 282.#162 rcx  Fixd   Keep     rcx  |    |C35a|    |    |    |    |    |    |    |
         282.#163 C35  Use *  Keep     rcx  |    |C35i|    |    |    |    |    |    |    |
         283.#164 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         283.#165 I36  Def    Alloc    rcx  |    |I36a|    |    |    |    |    |    |    |
[000065] 288.#166 rcx  Fixd   Keep     rcx  |    |I36a|    |    |    |    |    |    |    |
         288.#167 I36  Use *  Keep     rcx  |    |I36i|    |    |    |    |    |    |    |
         289.#168 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         289.#169 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         289.#170 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         289.#171 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         289.#172 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         289.#173 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         289.#174 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000103] 297.#175 C37  Def    Alloc    rcx  |    |C37a|    |    |    |    |    |    |    |
[000068] 298.#176 C37  Use *  Keep     rcx  |    |C37i|    |    |    |    |    |    |    |
[000070] 303.#177 C38  Def    Alloc    rcx  |    |C38a|    |    |    |    |    |    |    |
[000171] 304.#178 rcx  Fixd   Keep     rcx  |    |C38a|    |    |    |    |    |    |    |
         304.#179 C38  Use *  Keep     rcx  |    |C38i|    |    |    |    |    |    |    |
         305.#180 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         305.#181 I39  Def    Alloc    rcx  |    |I39a|    |    |    |    |    |    |    |
[000069] 307.#182 C40  Def    Alloc    rdx  |    |I39a|C40a|    |    |    |    |    |    |
[000172] 308.#183 rdx  Fixd   Keep     rdx  |    |I39a|C40a|    |    |    |    |    |    |
         308.#184 C40  Use *  Keep     rdx  |    |I39a|C40i|    |    |    |    |    |    |
         309.#185 rdx  Fixd   Keep     rdx  |    |I39a|    |    |    |    |    |    |    |
         309.#186 I41  Def    Alloc    rdx  |    |I39a|I41a|    |    |    |    |    |    |
[000071] 310.#187 rcx  Fixd   Keep     rcx  |    |I39a|I41a|    |    |    |    |    |    |
         310.#188 I39  Use *  Keep     rcx  |    |I39i|I41a|    |    |    |    |    |    |
         310.#189 rdx  Fixd   Keep     rdx  |    |    |I41a|    |    |    |    |    |    |
         310.#190 I41  Use *  Keep     rdx  |    |    |I41i|    |    |    |    |    |    |
         311.#191 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         311.#192 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         311.#193 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         311.#194 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         311.#195 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         311.#196 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         311.#197 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         311.#198 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         311.#199 I42  Def    Alloc    rax  |I42a|    |    |    |    |    |    |    |    |
[000072] 312.#200 I42  Use *  Keep     rax  |I42i|    |    |    |    |    |    |    |    |
[000075] 317.#201 C43  Def    Alloc    rcx  |    |C43a|    |    |    |    |    |    |    |
[000173] 318.#202 rcx  Fixd   Keep     rcx  |    |C43a|    |    |    |    |    |    |    |
         318.#203 C43  Use *  Keep     rcx  |    |C43i|    |    |    |    |    |    |    |
         319.#204 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         319.#205 I44  Def    Alloc    rcx  |    |I44a|    |    |    |    |    |    |    |
[000076] 320.#206 rcx  Fixd   Keep     rcx  |    |I44a|    |    |    |    |    |    |    |
         320.#207 I44  Use *  Keep     rcx  |    |I44i|    |    |    |    |    |    |    |
         321.#208 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         321.#209 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         321.#210 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         321.#211 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         321.#212 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         321.#213 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         321.#214 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         321.#215 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         321.#216 I45  Def    Alloc    rax  |I45a|    |    |    |    |    |    |    |    |
[000078] 322.#217 I45  Use *  Keep     rax  |I45i|    |    |    |    |    |    |    |    |
[000074] 325.#218 I46  Def    Alloc    rcx  |    |I46a|    |    |    |    |    |    |    |
[000174] 326.#219 rcx  Fixd   Keep     rcx  |    |I46a|    |    |    |    |    |    |    |
         326.#220 I46  Use *  Keep     rcx  |    |I46i|    |    |    |    |    |    |    |
         327.#221 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         327.#222 I47  Def    Alloc    rcx  |    |I47a|    |    |    |    |    |    |    |
[000079] 329.#223 I48  Def    Alloc    rdx  |    |I47a|I48a|    |    |    |    |    |    |
[000175] 330.#224 rdx  Fixd   Keep     rdx  |    |I47a|I48a|    |    |    |    |    |    |
         330.#225 I48  Use *  Keep     rdx  |    |I47a|I48i|    |    |    |    |    |    |
         331.#226 rdx  Fixd   Keep     rdx  |    |I47a|    |    |    |    |    |    |    |
         331.#227 I49  Def    Alloc    rdx  |    |I47a|I49a|    |    |    |    |    |    |
[000077] 332.#228 rcx  Fixd   Keep     rcx  |    |I47a|I49a|    |    |    |    |    |    |
         332.#229 I47  Use *  Keep     rcx  |    |I47i|I49a|    |    |    |    |    |    |
         332.#230 rdx  Fixd   Keep     rdx  |    |    |I49a|    |    |    |    |    |    |
         332.#231 I49  Use *  Keep     rdx  |    |    |I49i|    |    |    |    |    |    |
         333.#232 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         333.#233 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         333.#234 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         333.#235 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         333.#236 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         333.#237 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         333.#238 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
[000073] 337.#239 I50  Def    Alloc    rcx  |    |I50a|    |    |    |    |    |    |    |
[000080] 338.#240 I50  Use *  Keep     rcx  |    |I50i|    |    |    |    |    |    |    |
[000081] 343.#241 I51  Def    Alloc    rcx  |    |I51a|    |    |    |    |    |    |    |
[000176] 344.#242 rcx  Fixd   Keep     rcx  |    |I51a|    |    |    |    |    |    |    |
         344.#243 I51  Use *  Keep     rcx  |    |I51i|    |    |    |    |    |    |    |
         345.#244 rcx  Fixd   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         345.#245 I52  Def    Alloc    rcx  |    |I52a|    |    |    |    |    |    |    |
[000082] 347.#246 I53  Def    Alloc    rdx  |    |I52a|I53a|    |    |    |    |    |    |
[000177] 348.#247 rdx  Fixd   Keep     rdx  |    |I52a|I53a|    |    |    |    |    |    |
         348.#248 I53  Use *  Keep     rdx  |    |I52a|I53i|    |    |    |    |    |    |
         349.#249 rdx  Fixd   Keep     rdx  |    |I52a|    |    |    |    |    |    |    |
         349.#250 I54  Def    Alloc    rdx  |    |I52a|I54a|    |    |    |    |    |    |
[000083] 351.#251 C55  Def    Alloc    r8   |    |I52a|I54a|    |    |    |    |C55a|    |
[000178] 352.#252 r8   Fixd   Keep     r8   |    |I52a|I54a|    |    |    |    |C55a|    |
         352.#253 C55  Use *  Keep     r8   |    |I52a|I54a|    |    |    |    |C55i|    |
         353.#254 r8   Fixd   Keep     r8   |    |I52a|I54a|    |    |    |    |    |    |
         353.#255 I56  Def    Alloc    r8   |    |I52a|I54a|    |    |    |    |I56a|    |
[000084] 358.#256 rcx  Fixd   Keep     rcx  |    |I52a|I54a|    |    |    |    |I56a|    |
         358.#257 I52  Use *  Keep     rcx  |    |I52i|I54a|    |    |    |    |I56a|    |
         358.#258 rdx  Fixd   Keep     rdx  |    |    |I54a|    |    |    |    |I56a|    |
         358.#259 I54  Use *  Keep     rdx  |    |    |I54i|    |    |    |    |I56a|    |
         358.#260 r8   Fixd   Keep     r8   |    |    |    |    |    |    |    |I56a|    |
         358.#261 I56  Use *  Keep     r8   |    |    |    |    |    |    |    |I56i|    |
         359.#262 rax  Kill   Keep     rax  |    |    |    |    |    |    |    |    |    |
         359.#263 rcx  Kill   Keep     rcx  |    |    |    |    |    |    |    |    |    |
         359.#264 rdx  Kill   Keep     rdx  |    |    |    |    |    |    |    |    |    |
         359.#265 r8   Kill   Keep     r8   |    |    |    |    |    |    |    |    |    |
         359.#266 r9   Kill   Keep     r9   |    |    |    |    |    |    |    |    |    |
         359.#267 r10  Kill   Keep     r10  |    |    |    |    |    |    |    |    |    |
         359.#268 r11  Kill   Keep     r11  |    |    |    |    |    |    |    |    |    |
         359.#269 rax  Fixd   Keep     rax  |    |    |    |    |    |    |    |    |    |
         359.#270 I57  Def    Alloc    rax  |I57a|    |    |    |    |    |    |    |    |
[000085] 360.#271 I57  Use *  Keep     rax  |I57i|    |    |    |    |    |    |    |    |

Recording the maximum number of concurrent spills:

----------
LSRA Stats
----------
Register selection order: ABCDEFGHIJKLMNOPQ
Total Tracked Vars:  0
Total Reg Cand Vars: 0
Total number of Intervals: 57
Total number of RefPositions: 271
Total Number of spill temps created: 0
..........
BB05 [  100.00]: BEST_FIT = 1, REG_ORDER = 2
BB06 [  100.00]: BEST_FIT = 1
BB07 [  100.00]: COVERS = 1, BEST_FIT = 2
BB08 [  100.00]: BEST_FIT = 1
BB09 [  100.00]: COVERS = 1, BEST_FIT = 2
BB10 [  100.00]: BEST_FIT = 1
BB11 [  100.00]: BEST_FIT = 2, REG_ORDER = 2
..........
Total SpillCount : 0   Weighted: 0.000000
Total CopyReg : 0   Weighted: 0.000000
Total ResolutionMovs : 0   Weighted: 0.000000
Total SplitEdges : 0   Weighted: 0.000000
..........
Total COVERS [# 4] : 2   Weighted: 200.000000
Total BEST_FIT [#11] : 10   Weighted: 1000.000000
Total REG_ORDER [#13] : 4   Weighted: 400.000000

TUPLE STYLE DUMP WITH REGISTER ASSIGNMENTS
Incoming Parameters: 
BB01 [???..???), preds={} succs={BB02}
=====
  N002.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N006.                    CNS_INT(h) 0x7ff7c6a33128 global ptr
  N008.                    IND      
  N010.                    CNS_INT   0
  N012.                    CMP      
  N014.                    JCC       cond=UEQ

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N018.                    CALL help

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
=====
  N024.                    IL_OFFSET INLRT @ 0x000[E-]
  N026.                    NO_OP    
  N028.                    IL_OFFSET INLRT @ 0x001[E-]
  N030. rcx             =  LCL_ADDR  V11 tmp1         [+0] rcx
  N032. rcx             =  PUTARG_REG; rcx
  N034. rdx             =  CNS_INT(h) 0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N036. rdx             =  PUTARG_REG; rdx
  N038. r8              =  CNS_INT   0xF00
  N040. r8              =  PUTARG_REG; r8
  N042.                    CNS_INT(h) 0x7ff7c6a46418 ftn
  N044.                    IND      
  N046.                    CALL     ; rcx,rdx,r8
  N048.                    IL_OFFSET INLRT @ 0x010[--]
  N050.                    V11 MEM
  N052.                    LCL_ADDR  V01 loc0         [+0] NA
  N054.                    STORE_BLK
  N056.                    IL_OFFSET INLRT @ 0x011[E-]
  N058. rcx             =  LCL_ADDR  V12 tmp2         [+0] rcx
  N060. rcx             =  PUTARG_REG; rcx
  N062. rdx             =  CNS_INT(h) 0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE]
  N064. rdx             =  PUTARG_REG; rdx
  N066. r8              =  CNS_INT   0xF00
  N068. r8              =  PUTARG_REG; r8
  N070.                    CNS_INT(h) 0x7ff7c6a46418 ftn
  N072.                    IND      
  N074.                    CALL     ; rcx,rdx,r8
  N076.                    IL_OFFSET INLRT @ 0x020[--]
  N078.                    V12 MEM
  N080.                    LCL_ADDR  V02 loc1         [+0] NA
  N082.                    STORE_BLK
  N084.                    IL_OFFSET INLRT @ 0x021[E-]
  N086.                    CNS_INT(h) 0x7ff7c6bafba0 ftn
  N088.                    IND      
  N090.                    CALL     
  N092.                    IL_OFFSET INLRT @ 0x026[E-]
  N094.                    NO_OP    
  N096.                    IL_OFFSET INLRT @ 0x027[E-]
  N098. rcx             =  CNS_INT   0
  N100.                    V05 MEM; rcx
  N102.                    IL_OFFSET INLRT @ 0x02A[E-]
  N104.                    NOP      

BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
=====
  N108.                    IL_OFFSET INLRT @ 0x054[E-]
  N110.                    V05 MEM
  N112.                    CNS_INT   0
  N114. rcx             =  LE       
  N116.                    V09 MEM; rcx
  N118.                    IL_OFFSET INLRT @ 0x05B[E-]
  N120.                    V09 MEM
  N122.                    CNS_INT   0
  N124.                    CMP      
  N126.                    JCC       cond=UNE

BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
=====
  N130.                    IL_OFFSET INLRT @ 0x02C[E-]
  N132.                    NO_OP    
  N134.                    IL_OFFSET INLRT @ 0x02D[E-]
  N136. rcx             =  CNS_INT   0
  N138.                    V06 MEM; rcx
  N140.                    IL_OFFSET INLRT @ 0x030[E-]
  N142.                    NOP      

BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
=====
  N146.                    IL_OFFSET INLRT @ 0x03E[E-]
  N148.                    V06 MEM
  N150.                    CNS_INT   0
  N152. rcx             =  LE       
  N154.                    V08 MEM; rcx
  N156.                    IL_OFFSET INLRT @ 0x045[E-]
  N158.                    V08 MEM
  N160.                    CNS_INT   0
  N162.                    CMP      
  N164.                    JCC       cond=UNE

BB07 [032..03E), preds={BB08} succs={BB08}
=====
  N168.                    IL_OFFSET INLRT @ 0x032[E-]
  N170.                    NO_OP    
  N172.                    IL_OFFSET INLRT @ 0x033[E-]
  N174.                    NO_OP    
  N176.                    IL_OFFSET INLRT @ 0x034[E-]
  N178. rcx             =  V06 MEM
  N180.                    V07 MEM; rcx
  N182.                    IL_OFFSET INLRT @ 0x038[E-]
  N184. rcx             =  V07 MEM
  N186.                    CNS_INT   1
  N188. rcx             =  ADD      ; rcx
  N190.                    V06 MEM; rcx

BB09 [049..054), preds={BB08} succs={BB10}
=====
  N194.                    IL_OFFSET INLRT @ 0x049[E-]
  N196.                    NO_OP    
  N198.                    IL_OFFSET INLRT @ 0x04A[E-]
  N200. rcx             =  V05 MEM
  N202.                    V07 MEM; rcx
  N204.                    IL_OFFSET INLRT @ 0x04E[E-]
  N206. rcx             =  V07 MEM
  N208.                    CNS_INT   1
  N210. rcx             =  ADD      ; rcx
  N212.                    V05 MEM; rcx

BB11 [05F..0A4) (return), preds={BB10} succs={}
=====
  N216.                    IL_OFFSET INLRT @ 0x05F[E-]
  N218. rcx             =  CNS_INT(h)  'Ascii'

  N220. rcx             =  PUTARG_REG; rcx
  N222.                    CNS_INT(h) 0x7ff7c6bafcd8 ftn
  N224.                    IND      
  N226.                    CALL     ; rcx
  N228.                    IL_OFFSET INLRT @ 0x069[E-]
  N230.                    NO_OP    
  N232.                    IL_OFFSET INLRT @ 0x06A[E-]
  N234.                    V01 MEM
  N236.                    LCL_ADDR  V17 tmp7         [+0] NA
  N238.                    STORE_BLK
  N240.                    V02 MEM
  N242.                    LCL_ADDR  V18 tmp8         [+0] NA
  N244.                    STORE_BLK
  N246. rcx             =  LCL_ADDR  V17 tmp7         [+0] rcx
  N248. rcx             =  PUTARG_REG; rcx
  N250. rdx             =  LCL_ADDR  V18 tmp8         [+0] rdx
  N252. rdx             =  PUTARG_REG; rdx
  N254.                    CNS_INT(h) 0x7ff7c6ad6880 ftn
  N256.                    IND      
  N258. rax             =  CALL     ; rcx,rdx
  N260.                    V13 MEM; rax
  N262.                    IL_OFFSET INLRT @ 0x071[--]
  N264. rcx             =  V13 MEM
  N266. rcx             =  PUTARG_REG; rcx
  N268.                    CNS_INT(h) 0x7ff7c6bafbb8 ftn
  N270.                    IND      
  N272.                    CALL     ; rcx
  N274.                    IL_OFFSET INLRT @ 0x076[E-]
  N276.                    NO_OP    
  N278.                    IL_OFFSET INLRT @ 0x077[E-]
  N280. rcx             =  CNS_INT(h)  'String'

  N282. rcx             =  PUTARG_REG; rcx
  N284.                    CNS_INT(h) 0x7ff7c6bafcd8 ftn
  N286.                    IND      
  N288.                    CALL     ; rcx
  N290.                    IL_OFFSET INLRT @ 0x081[E-]
  N292.                    NO_OP    
  N294.                    IL_OFFSET INLRT @ 0x082[E-]
  N296. rcx             =  CNS_INT(h)  'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

  N298.                    V03 MEM; rcx
  N300.                    IL_OFFSET INLRT @ 0x088[E-]
  N302. rcx             =  CNS_INT(h) 0x7ff7c6bf3378 class
  N304. rcx             =  PUTARG_REG; rcx
  N306. rdx             =  CNS_INT   3
  N308. rdx             =  PUTARG_REG; rdx
  N310. rax             =  CALL help; rcx,rdx
  N312.                    V14 MEM; rax
  N314.                    IL_OFFSET INLRT @ 0x08E[--]
  N316. rcx             =  CNS_INT(h) 0x7ff7c6bf36f8 field
  N318. rcx             =  PUTARG_REG; rcx
  N320. rax             =  CALL help; rcx
  N322.                    V15 MEM; rax
  N324. rcx             =  V14 MEM
  N326. rcx             =  PUTARG_REG; rcx
  N328. rdx             =  V15 MEM
  N330. rdx             =  PUTARG_REG; rdx
  N332.                    CALL     ; rcx,rdx
  N334.                    IL_OFFSET INLRT @ 0x099[--]
  N336. rcx             =  V14 MEM
  N338.                    V04 MEM; rcx
  N340.                    IL_OFFSET INLRT @ 0x09A[E-]
  N342. rcx             =  V03 MEM
  N344. rcx             =  PUTARG_REG; rcx
  N346. rdx             =  V04 MEM
  N348. rdx             =  PUTARG_REG; rdx
  N350. r8              =  CNS_INT   1
  N352. r8              =  PUTARG_REG; r8
  N354.                    CNS_INT(h) 0x7ff7c6a44678 ftn
  N356.                    IND      
  N358. rax             =  CALL     ; rcx,rdx,r8
  N360.                    V16 MEM; rax
  N362.                    IL_OFFSET INLRT @ 0x0A2[--]
  N364.                    NOP      
  N366.                    IL_OFFSET INLRT @ 0x0A3[E-]
  N368.                    RETURN   




*************** Finishing PHASE Linear scan register alloc
Trees after Linear scan register alloc

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe LIR 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target LIR 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target LIR 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src LIR 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd LIR 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src LIR 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N002 (  0,  0) [000000] -----------                            NOP       void   REG NA

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N006 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr REG NA
                                                            /--*  t89    long   
N008 (  5, 12) [000090] nc--G------                   t90 = *  IND       int    REG NA
N010 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0 REG NA
                                                            /--*  t90    int    
                                                            +--*  t91    int    
N012 (  7, 14) [000092] ----G--N---                         *  CMP       void   REG NA
N014 (  9, 16) [000104] ----G------                            JCC       void   cond=UEQ REG NA

------------ BB03 [???..???), preds={BB02} succs={BB04}
N018 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10}
N024 (???,???) [000105] -----------                            IL_OFFSET void   INLRT @ 0x000[E-] REG NA
N026 (  1,  1) [000001] -----------                            NO_OP     void   REG NA
N028 (???,???) [000106] -----------                            IL_OFFSET void   INLRT @ 0x001[E-] REG NA
N030 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0] rcx REG rcx
                                                            /--*  t4     long   
N032 (???,???) [000142] -----------                  t142 = *  PUTARG_REG long   REG rcx
N034 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t2     long   
N036 (???,???) [000143] -----------                  t143 = *  PUTARG_REG long   REG rdx
N038 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t3     int    
N040 (???,???) [000144] -----------                  t144 = *  PUTARG_REG int    REG r8
N042 (  3, 10) [000145] Hc---------                  t145 =    CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
                                                            /--*  t145   long   
N044 (  5, 12) [000146] nc--G------                  t146 = *  IND       long   REG NA
                                                            /--*  t142   long   this in rcx
                                                            +--*  t143   long   arg1 in rdx
                                                            +--*  t144   int    arg2 in r8
                                                            +--*  t146   long   control expr
N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N048 (???,???) [000107] -----------                            IL_OFFSET void   INLRT @ 0x010[--] REG NA
N050 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
N052 (???,???) [000147] Dc---------                  t147 =    LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
                                                            /--*  t147   byref  
                                                            +--*  t6     struct 
N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N056 (???,???) [000108] -----------                            IL_OFFSET void   INLRT @ 0x011[E-] REG NA
N058 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0] rcx REG rcx
                                                            /--*  t10    long   
N060 (???,???) [000148] -----------                  t148 = *  PUTARG_REG long   REG rcx
N062 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
                                                            /--*  t8     long   
N064 (???,???) [000149] -----------                  t149 = *  PUTARG_REG long   REG rdx
N066 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00 REG r8
                                                            /--*  t9     int    
N068 (???,???) [000150] -----------                  t150 = *  PUTARG_REG int    REG r8
N070 (  3, 10) [000151] Hc---------                  t151 =    CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
                                                            /--*  t151   long   
N072 (  5, 12) [000152] nc--G------                  t152 = *  IND       long   REG NA
                                                            /--*  t148   long   this in rcx
                                                            +--*  t149   long   arg1 in rdx
                                                            +--*  t150   int    arg2 in r8
                                                            +--*  t152   long   control expr
N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
N076 (???,???) [000109] -----------                            IL_OFFSET void   INLRT @ 0x020[--] REG NA
N078 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
N080 (???,???) [000153] Dc---------                  t153 =    LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
                                                            /--*  t153   byref  
                                                            +--*  t12    struct 
N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N084 (???,???) [000110] -----------                            IL_OFFSET void   INLRT @ 0x021[E-] REG NA
N086 (  3, 10) [000154] Hc---------                  t154 =    CNS_INT(h) long   0x7ff7c6bafba0 ftn REG NA
                                                            /--*  t154   long   
N088 (  5, 12) [000155] nc--G------                  t155 = *  IND       long   REG NA
                                                            /--*  t155   long   control expr
N090 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine() REG NA
N092 (???,???) [000111] -----------                            IL_OFFSET void   INLRT @ 0x026[E-] REG NA
N094 (  1,  1) [000015] -----------                            NO_OP     void   REG NA
N096 (???,???) [000112] -----------                            IL_OFFSET void   INLRT @ 0x027[E-] REG NA
N098 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0 REG rcx
                                                            /--*  t16    int    
N100 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA
N102 (???,???) [000113] -----------                            IL_OFFSET void   INLRT @ 0x02A[E-] REG NA
N104 (  0,  0) [000018] -----------                            NOP       void   REG NA

------------ BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08}
N130 (???,???) [000114] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-] REG NA
N132 (  1,  1) [000027] -----------                            NO_OP     void   REG NA
N134 (???,???) [000115] -----------                            IL_OFFSET void   INLRT @ 0x02D[E-] REG NA
N136 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0 REG rcx
                                                            /--*  t28    int    
N138 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA
N140 (???,???) [000116] -----------                            IL_OFFSET void   INLRT @ 0x030[E-] REG NA
N142 (  0,  0) [000030] -----------                            NOP       void   REG NA

------------ BB07 [032..03E), preds={BB08} succs={BB08}
N168 (???,???) [000117] -----------                            IL_OFFSET void   INLRT @ 0x032[E-] REG NA
N170 (  1,  1) [000039] -----------                            NO_OP     void   REG NA
N172 (???,???) [000118] -----------                            IL_OFFSET void   INLRT @ 0x033[E-] REG NA
N174 (  1,  1) [000040] -----------                            NO_OP     void   REG NA
N176 (???,???) [000119] -----------                            IL_OFFSET void   INLRT @ 0x034[E-] REG NA
N178 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5          rcx REG rcx
                                                            /--*  t41    int    
N180 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
N182 (???,???) [000120] -----------                            IL_OFFSET void   INLRT @ 0x038[E-] REG NA
N184 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6          rcx REG rcx
N186 (  1,  1) [000044] -c---------                   t44 =    CNS_INT   int    1 REG NA
                                                            /--*  t43    int    
                                                            +--*  t44    int    
N188 (  5,  4) [000045] -----------                   t45 = *  ADD       int    REG rcx
                                                            /--*  t45    int    
N190 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA

------------ BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07}
N146 (???,???) [000121] -----------                            IL_OFFSET void   INLRT @ 0x03E[E-] REG NA
N148 (  3,  2) [000031] -c---------                   t31 =    LCL_VAR   int    V06 loc5          NA REG NA
N150 (  1,  1) [000032] -c---------                   t32 =    CNS_INT   int    0 REG NA
                                                            /--*  t31    int    
                                                            +--*  t32    int    
N152 (  8,  4) [000033] -----------                   t33 = *  LE        int    REG rcx
                                                            /--*  t33    int    
N154 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7          NA REG NA
N156 (???,???) [000122] -----------                            IL_OFFSET void   INLRT @ 0x045[E-] REG NA
N158 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7          NA REG NA
N160 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0 REG NA
                                                            /--*  t35    int    
                                                            +--*  t36    int    
N162 (  5,  4) [000037] -------N---                         *  CMP       void   REG NA
N164 (  7,  6) [000038] -----------                            JCC       void   cond=UNE REG NA

------------ BB09 [049..054), preds={BB08} succs={BB10}
N194 (???,???) [000123] -----------                            IL_OFFSET void   INLRT @ 0x049[E-] REG NA
N196 (  1,  1) [000047] -----------                            NO_OP     void   REG NA
N198 (???,???) [000124] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-] REG NA
N200 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4          rcx REG rcx
                                                            /--*  t48    int    
N202 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
N204 (???,???) [000125] -----------                            IL_OFFSET void   INLRT @ 0x04E[E-] REG NA
N206 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6          rcx REG rcx
N208 (  1,  1) [000051] -c---------                   t51 =    CNS_INT   int    1 REG NA
                                                            /--*  t50    int    
                                                            +--*  t51    int    
N210 (  5,  4) [000052] -----------                   t52 = *  ADD       int    REG rcx
                                                            /--*  t52    int    
N212 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA

------------ BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06}
N108 (???,???) [000126] -----------                            IL_OFFSET void   INLRT @ 0x054[E-] REG NA
N110 (  3,  2) [000019] -c---------                   t19 =    LCL_VAR   int    V05 loc4          NA REG NA
N112 (  1,  1) [000020] -c---------                   t20 =    CNS_INT   int    0 REG NA
                                                            /--*  t19    int    
                                                            +--*  t20    int    
N114 (  8,  4) [000021] -----------                   t21 = *  LE        int    REG rcx
                                                            /--*  t21    int    
N116 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8          NA REG NA
N118 (???,???) [000127] -----------                            IL_OFFSET void   INLRT @ 0x05B[E-] REG NA
N120 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8          NA REG NA
N122 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0 REG NA
                                                            /--*  t23    int    
                                                            +--*  t24    int    
N124 (  5,  4) [000025] -------N---                         *  CMP       void   REG NA
N126 (  7,  6) [000026] -----------                            JCC       void   cond=UNE REG NA

------------ BB11 [05F..0A4) (return), preds={BB10} succs={}
N216 (???,???) [000128] -----------                            IL_OFFSET void   INLRT @ 0x05F[E-] REG NA
N218 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'
 REG rcx
                                                            /--*  t97    ref    
N220 (???,???) [000156] -----------                  t156 = *  PUTARG_REG ref    REG rcx
N222 (  3, 10) [000157] Hc---------                  t157 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
                                                            /--*  t157   long   
N224 (  5, 12) [000158] nc--G------                  t158 = *  IND       long   REG NA
                                                            /--*  t156   ref    arg0 in rcx
                                                            +--*  t158   long   control expr
N226 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N228 (???,???) [000129] -----------                            IL_OFFSET void   INLRT @ 0x069[E-] REG NA
N230 (  1,  1) [000056] -----------                            NO_OP     void   REG NA
N232 (???,???) [000130] -----------                            IL_OFFSET void   INLRT @ 0x06A[E-] REG NA
N234 (  9,  6) [000057] -c---------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
N236 (???,???) [000159] Dc---------                  t159 =    LCL_ADDR  byref  V17 tmp7         [+0] NA REG NA
                                                            /--*  t159   byref  
                                                            +--*  t57    struct 
N238 ( 19, 13) [000098] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N240 (  9,  6) [000058] -c---------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
N242 (???,???) [000160] Dc---------                  t160 =    LCL_ADDR  byref  V18 tmp8         [+0] NA REG NA
                                                            /--*  t160   byref  
                                                            +--*  t58    struct 
N244 ( 19, 13) [000099] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
N246 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0] rcx REG rcx
                                                            /--*  t100   long   
N248 (???,???) [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
N250 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0] rdx REG rdx
                                                            /--*  t101   long   
N252 (???,???) [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
N254 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn REG NA
                                                            /--*  t163   long   
N256 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                            /--*  t161   long   arg0 in rcx
                                                            +--*  t162   long   arg1 in rdx
                                                            +--*  t164   long   control expr
N258 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG rax
                                                            /--*  t59    int    
N260 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
N262 (???,???) [000131] -----------                            IL_OFFSET void   INLRT @ 0x071[--] REG NA
N264 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3          rcx REG rcx
                                                            /--*  t61    int    
N266 (???,???) [000165] -----------                  t165 = *  PUTARG_REG int    REG rcx
N268 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ff7c6bafbb8 ftn REG NA
                                                            /--*  t166   long   
N270 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                            /--*  t165   int    arg0 in rcx
                                                            +--*  t167   long   control expr
N272 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
N274 (???,???) [000132] -----------                            IL_OFFSET void   INLRT @ 0x076[E-] REG NA
N276 (  1,  1) [000063] -----------                            NO_OP     void   REG NA
N278 (???,???) [000133] -----------                            IL_OFFSET void   INLRT @ 0x077[E-] REG NA
N280 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'
 REG rcx
                                                            /--*  t102   ref    
N282 (???,???) [000168] -----------                  t168 = *  PUTARG_REG ref    REG rcx
N284 (  3, 10) [000169] Hc---------                  t169 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
                                                            /--*  t169   long   
N286 (  5, 12) [000170] nc--G------                  t170 = *  IND       long   REG NA
                                                            /--*  t168   ref    arg0 in rcx
                                                            +--*  t170   long   control expr
N288 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
N290 (???,???) [000134] -----------                            IL_OFFSET void   INLRT @ 0x081[E-] REG NA
N292 (  1,  1) [000066] -----------                            NO_OP     void   REG NA
N294 (???,???) [000135] -----------                            IL_OFFSET void   INLRT @ 0x082[E-] REG NA
N296 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG rcx
                                                            /--*  t103   ref    
N298 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
N300 (???,???) [000136] -----------                            IL_OFFSET void   INLRT @ 0x088[E-] REG NA
N302 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class REG rcx
                                                            /--*  t70    long   
N304 (???,???) [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
N306 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3 REG rdx
                                                            /--*  t69    long   
N308 (???,???) [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                            /--*  t171   long   arg0 in rcx
                                                            +--*  t172   long   arg1 in rdx
N310 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
                                                            /--*  t71    ref    
N312 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
N314 (???,???) [000137] -----------                            IL_OFFSET void   INLRT @ 0x08E[--] REG NA
N316 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field REG rcx
                                                            /--*  t75    long   
N318 (???,???) [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                            /--*  t173   long   arg0 in rcx
N320 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
                                                            /--*  t76    ref    
N322 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
N324 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t74    ref    
N326 (???,???) [000174] -----------                  t174 = *  PUTARG_REG ref    REG rcx
N328 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0] rdx REG rdx
                                                            /--*  t79    ref    
N330 (???,???) [000175] -----------                  t175 = *  PUTARG_REG ref    REG rdx
                                                            /--*  t174   ref    arg0 in rcx
                                                            +--*  t175   ref    arg1 in rdx
N332 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
N334 (???,???) [000138] -----------                            IL_OFFSET void   INLRT @ 0x099[--] REG NA
N336 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
                                                            /--*  t73    ref    
N338 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
N340 (???,???) [000139] -----------                            IL_OFFSET void   INLRT @ 0x09A[E-] REG NA
N342 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
                                                            /--*  t81    ref    
N344 (???,???) [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
N346 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3          rdx REG rdx
                                                            /--*  t82    ref    
N348 (???,???) [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
N350 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1 REG r8
                                                            /--*  t83    int    
N352 (???,???) [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
N354 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn REG NA
                                                            /--*  t179   long   
N356 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                            /--*  t176   ref    arg0 in rcx
                                                            +--*  t177   ref    arg1 in rdx
                                                            +--*  t178   int    arg2 in r8
                                                            +--*  t180   long   control expr
N358 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[] REG rax
                                                            /--*  t84    ref    
N360 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
N362 (???,???) [000140] -----------                            IL_OFFSET void   INLRT @ 0x0A2[--] REG NA
N364 (  0,  0) [000087] -----------                            NOP       void   REG NA
N366 (???,???) [000141] -----------                            IL_OFFSET void   INLRT @ 0x0A3[E-] REG NA
N368 (  0,  0) [000088] -----------                            RETURN    void   REG NA

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
*************** In fgDebugCheckLoopTable: loop table not valid

*************** Starting PHASE Place 'align' instructions

*************** Finishing PHASE Place 'align' instructions [no changes]
*************** In genGenerateCode()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe LIR 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i bwd bwd-target LIR 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i bwd bwd-target LIR 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i bwd bwd-src LIR 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd LIR 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i bwd bwd-src LIR 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Generate code
*************** In fgDebugCheckBBlist
Finalizing stack frame
must init V01 because it has a GC ref
must init V02 because it has a GC ref
must init V03 because it has a GC ref
must init V04 because it has a GC ref
must init V05 because compInitMem is set and it is not a temp
must init V06 because compInitMem is set and it is not a temp
must init V07 because compInitMem is set and it is not a temp
must init V08 because compInitMem is set and it is not a temp
must init V09 because compInitMem is set and it is not a temp
must init V11 because it has a GC ref
must init V12 because it has a GC ref
must init V14 because it has a GC ref
must init V15 because it has a GC ref
must init V16 because it has a GC ref
must init V17 because it has a GC ref
must init V18 because it has a GC ref
Modified regs: [rax rcx rdx r8-r11 mm0]
Callee-saved registers pushed: 0 []
*************** In lvaAssignFrameOffsets(FINAL_FRAME_LAYOUT)
Assign V01 loc0, size=16, stkOffs=-0x20
Assign V02 loc1, size=16, stkOffs=-0x30
Assign V03 loc2, size=8, stkOffs=-0x38
Assign V04 loc3, size=8, stkOffs=-0x40
Assign V05 loc4, size=4, stkOffs=-0x44
Assign V06 loc5, size=4, stkOffs=-0x48
Assign V07 loc6, size=4, stkOffs=-0x4c
Assign V08 loc7, size=4, stkOffs=-0x50
Assign V09 loc8, size=4, stkOffs=-0x54
Pad V11 tmp1, size=16, stkOffs=-0x58, pad=4
Assign V11 tmp1, size=16, stkOffs=-0x68
Assign V12 tmp2, size=16, stkOffs=-0x78
Assign V13 tmp3, size=4, stkOffs=-0x7c
Pad V14 tmp4, size=8, stkOffs=-0x80, pad=4
Assign V14 tmp4, size=8, stkOffs=-0x88
Assign V15 tmp5, size=8, stkOffs=-0x90
Assign V16 tmp6, size=8, stkOffs=-0x98
Assign V17 tmp7, size=16, stkOffs=-0xa8
Assign V18 tmp8, size=16, stkOffs=-0xb8
Assign V10 OutArgs, size=32, stkOffs=-0xd8
--- delta bump 8 for RA
--- delta bump 8 for FP
--- delta bump 0 for FP frame
--- virtual stack offset to actual stack offset delta is 16
-- V00 was 0, now 16
-- V01 was -32, now -16
-- V02 was -48, now -32
-- V03 was -56, now -40
-- V04 was -64, now -48
-- V05 was -68, now -52
-- V06 was -72, now -56
-- V07 was -76, now -60
-- V08 was -80, now -64
-- V09 was -84, now -68
-- V10 was -216, now -200
-- V11 was -104, now -88
-- V12 was -120, now -104
-- V13 was -124, now -108
-- V14 was -136, now -120
-- V15 was -144, now -128
-- V16 was -152, now -136
-- V17 was -168, now -152
-- V18 was -184, now -168
; Final local variable assignments
;
;  V00 arg0         [V00    ] (  1,  1   )     ref  ->  [rbp+10H]   do-not-enreg[] class-hnd <System.String[]>
;  V01 loc0         [V01    ] (  1,  1   )  struct (16) [rbp-10H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1         [V02    ] (  1,  1   )  struct (16) [rbp-20H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2         [V03    ] (  1,  1   )     ref  ->  [rbp-28H]   do-not-enreg[] must-init class-hnd exact <System.String>
;  V04 loc3         [V04    ] (  1,  1   )     ref  ->  [rbp-30H]   do-not-enreg[] must-init class-hnd exact <ushort[]>
;  V05 loc4         [V05    ] (  1,  1   )     int  ->  [rbp-34H]   do-not-enreg[] must-init
;  V06 loc5         [V06    ] (  1,  1   )     int  ->  [rbp-38H]   do-not-enreg[] must-init
;  V07 loc6         [V07    ] (  1,  1   )     int  ->  [rbp-3CH]   do-not-enreg[] must-init
;  V08 loc7         [V08    ] (  1,  1   )    bool  ->  [rbp-40H]   do-not-enreg[] must-init
;  V09 loc8         [V09    ] (  1,  1   )    bool  ->  [rbp-44H]   do-not-enreg[] must-init
;  V10 OutArgs      [V10    ] (  1,  1   )  struct (32) [rsp+00H]   do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
;  V11 tmp1         [V11    ] (  1,  1   )  struct (16) [rbp-58H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V12 tmp2         [V12    ] (  1,  1   )  struct (16) [rbp-68H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V13 tmp3         [V13    ] (  1,  1   )     int  ->  [rbp-6CH]   do-not-enreg[] "impSpillStackEnsure"
;  V14 tmp4         [V14    ] (  1,  1   )     ref  ->  [rbp-78H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <ushort[]>
;  V15 tmp5         [V15    ] (  1,  1   )  struct ( 8) [rbp-80H]   do-not-enreg[S] must-init "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V16 tmp6         [V16    ] (  1,  1   )     ref  ->  [rbp-88H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String[]>
;  V17 tmp7         [V17    ] (  1,  1   )  struct (16) [rbp-98H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V18 tmp8         [V18    ] (  1,  1   )  struct (16) [rbp-A8H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;
; Lcl frame size = 208
Created:
      G_M4045_IG02:        ; offs=000000H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mark labels for codegen
  BB01 : first block
  BB04 : branch target
  BB10 : branch target
  BB08 : branch target
  BB07 : branch target
  BB06 : branch target
*************** After genMarkLabelsForCodegen()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal label hascall LIR 
BB02 [0009]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0010]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0008]  2       BB02,BB03             1       [???..???)                                     i internal label hascall LIR 
BB05 [0001]  1       BB04                  1       [000..02C)-> BB10 (always)                     i hascall gcsafe LIR 
BB06 [0002]  1       BB10                  1       [02C..032)-> BB08 (always)                     i label bwd bwd-target LIR 
BB07 [0003]  1       BB08                  1       [032..03E)                                     i label bwd bwd-target LIR 
BB08 [0004]  2       BB06,BB07             1       [03E..049)-> BB07 ( cond )                     i label bwd bwd-src LIR 
BB09 [0005]  1       BB08                  1       [049..054)                                     i bwd LIR 
BB10 [0006]  2       BB05,BB09             1       [054..05F)-> BB06 ( cond )                     i label bwd bwd-src LIR 
BB11 [0007]  1       BB10                  1       [05F..0A4)        (return)                     i hascall gcsafe LIR 
-----------------------------------------------------------------------------------------------------------------------------------------
Setting stack level from -572662307 to 0

=============== Generating BB01 [???..???), preds={} succs={BB02} flags=0x00000001.00020031: i internal label hascall LIR 
BB01 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB01:
Label: G_M4045_IG02, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB01, IL range [???..???)
Scope info: ignoring block beginning
Generating: N002 (  0,  0) [000000] -----------                            NOP       void   REG NA
Scope info: ignoring block end

Variable Live Range History Dump for BB01
..None..

=============== Generating BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04} flags=0x00000000.00000021: internal LIR 
BB02 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB02:

Scope info: begin block BB02, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP (G_M4045_IG02,ins#0,ofs#0) label
Generating: N006 (  3, 10) [000089] Hc---------                   t89 =    CNS_INT(h) long   0x7ff7c6a33128 global ptr REG NA
                                                                        /--*  t89    long   
Generating: N008 (  5, 12) [000090] nc--G------                   t90 = *  IND       int    REG NA
Generating: N010 (  1,  1) [000091] -c---------                   t91 =    CNS_INT   int    0 REG NA
                                                                        /--*  t90    int    
                                                                        +--*  t91    int    
Generating: N012 (  7, 14) [000092] ----G--N---                         *  CMP       void   REG NA
Mapped BB02 to G_M4045_IG02
IN0001:        cmp      dword ptr [(reloc 0x7ff7c6a33128)], 0
Generating: N014 (  9, 16) [000104] ----G------                            JCC       void   cond=UEQ REG NA
IN0002:        je       L_M4045_BB04
Scope info: ignoring block end

Variable Live Range History Dump for BB02
..None..

=============== Generating BB03 [???..???), preds={BB02} succs={BB04} flags=0x00000000.00000021: internal LIR 
BB03 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB03:
Adding label due to BB weight difference: BBJ_COND BB02 with weight 100 different from BB03 with weight 50
Saved:
      G_M4045_IG02:        ; offs=000000H, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0009], byref
Created:
      G_M4045_IG03:        ; offs=00000DH, size=0000H, bbWeight=0.50, gcrefRegs=0000 {}
Label: G_M4045_IG03, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB03, IL range [???..???)
Scope info: ignoring block beginning
genIPmappingAdd: ignoring duplicate IL offset 0xffffffff
Generating: N018 ( 14,  5) [000093] --C-G-?----                            CALL help void   CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Mapped BB03 to G_M4045_IG03
IN0003:        call     CORINFO_HELP_DBG_IS_JUST_MY_CODE
Scope info: ignoring block end

Variable Live Range History Dump for BB03
..None..

=============== Generating BB04 [???..???), preds={BB02,BB03} succs={BB05} flags=0x00000001.00020031: i internal label hascall LIR 
BB04 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB04:
Saved:
      G_M4045_IG03:        ; offs=00000DH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0010], byref
Created:
      G_M4045_IG04:        ; offs=000012H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Label: G_M4045_IG04, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB04, IL range [???..???)
Scope info: ignoring block beginning
genIPmappingAdd: ignoring duplicate IL offset 0xffffffff
Scope info: ignoring block end

Variable Live Range History Dump for BB04
..None..

=============== Generating BB05 [000..02C) -> BB10 (always), preds={BB04} succs={BB10} flags=0x00000001.00200011: i hascall gcsafe LIR 
BB05 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB05:

Scope info: begin block BB05, IL range [000..02C)
Scope info: opening scope, LVnum=0 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=8 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=7 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=6 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=5 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=4 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=3 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=2 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=1 [000..0A4)
New debug range: first
Scope info: opening scope, LVnum=9 [000..0A4)
New debug range: first
Added IP mapping: 0x0000 STACK_EMPTY (G_M4045_IG04,ins#0,ofs#0) label
Generating: N024 (???,???) [000105] -----------                            IL_OFFSET void   INLRT @ 0x000[E-] REG NA
Generating: N026 (  1,  1) [000001] -----------                            NO_OP     void   REG NA
Mapped BB05 to G_M4045_IG04
IN0004:        nop      
Added IP mapping: 0x0001 STACK_EMPTY (G_M4045_IG04,ins#1,ofs#1)
Generating: N028 (???,???) [000106] -----------                            IL_OFFSET void   INLRT @ 0x001[E-] REG NA
Generating: N030 (  3,  3) [000004] -----------                    t4 =    LCL_ADDR  long   V11 tmp1         [+0] rcx REG rcx
IN0005:        lea      rcx, [V11 rbp-58H]
                                                                        /--*  t4     long   
Generating: N032 (???,???) [000142] -----------                  t142 = *  PUTARG_REG long   REG rcx
Generating: N034 (  3, 10) [000002] H----------                    t2 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
IN0006:        mov      rdx, 0x1FAA0E02AC0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
                                                                        /--*  t2     long   
Generating: N036 (???,???) [000143] -----------                  t143 = *  PUTARG_REG long   REG rdx
Generating: N038 (  1,  4) [000003] -----------                    t3 =    CNS_INT   int    0xF00 REG r8
IN0007:        mov      r8d, 0xF00
                                                                        /--*  t3     int    
Generating: N040 (???,???) [000144] -----------                  t144 = *  PUTARG_REG int    REG r8
Generating: N042 (  3, 10) [000145] Hc---------                  t145 =    CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
                                                                        /--*  t145   long   
Generating: N044 (  5, 12) [000146] nc--G------                  t146 = *  IND       long   REG NA
                                                                        /--*  t142   long   this in rcx
                                                                        +--*  t143   long   arg1 in rdx
                                                                        +--*  t144   int    arg2 in r8
                                                                        +--*  t146   long   control expr
Generating: N046 ( 21, 25) [000005] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x000B CALL_INSTRUCTION (G_M4045_IG04,ins#4,ofs#21)
IN0008:        call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
Added IP mapping: 0x0010 (G_M4045_IG04,ins#5,ofs#27)
Generating: N048 (???,???) [000107] -----------                            IL_OFFSET void   INLRT @ 0x010[--] REG NA
Generating: N050 (  9,  6) [000006] -c---------                    t6 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V11 tmp1          NA REG NA
Generating: N052 (???,???) [000147] Dc---------                  t147 =    LCL_ADDR  byref  V01 loc0         [+0] NA REG NA
                                                                        /--*  t147   byref  
                                                                        +--*  t6     struct 
Generating: N054 ( 19, 13) [000007] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M4045_IG04:        ; offs=000012H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
Created:
      G_M4045_IG05:        ; offs=00002DH, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB05 to G_M4045_IG05
IN0009:        vmovdqu32 xmm0, xmmword ptr [V11 rbp-58H]
IN000a:        vmovdqu32 xmmword ptr [V01 rbp-10H], xmm0
Enable GC
Added IP mapping: 0x0011 STACK_EMPTY (G_M4045_IG05,ins#2,ofs#20)
Generating: N056 (???,???) [000108] -----------                            IL_OFFSET void   INLRT @ 0x011[E-] REG NA
Generating: N058 (  3,  3) [000010] -----------                   t10 =    LCL_ADDR  long   V12 tmp2         [+0] rcx REG rcx
Saved:
      G_M4045_IG05:        ; offs=00002DH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Created:
      G_M4045_IG06:        ; offs=000041H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mapped BB05 to G_M4045_IG06
IN000b:        lea      rcx, [V12 rbp-68H]
                                                                        /--*  t10    long   
Generating: N060 (???,???) [000148] -----------                  t148 = *  PUTARG_REG long   REG rcx
Generating: N062 (  3, 10) [000008] H----------                    t8 =    CNS_INT(h) long   0x1faa0e02ac0 static Fseq[7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE] REG rdx
IN000c:        mov      rdx, 0x1FAA0E02AC0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
                                                                        /--*  t8     long   
Generating: N064 (???,???) [000149] -----------                  t149 = *  PUTARG_REG long   REG rdx
Generating: N066 (  1,  4) [000009] -----------                    t9 =    CNS_INT   int    0xF00 REG r8
IN000d:        mov      r8d, 0xF00
                                                                        /--*  t9     int    
Generating: N068 (???,???) [000150] -----------                  t150 = *  PUTARG_REG int    REG r8
Generating: N070 (  3, 10) [000151] Hc---------                  t151 =    CNS_INT(h) long   0x7ff7c6a46418 ftn REG NA
                                                                        /--*  t151   long   
Generating: N072 (  5, 12) [000152] nc--G------                  t152 = *  IND       long   REG NA
                                                                        /--*  t148   long   this in rcx
                                                                        +--*  t149   long   arg1 in rdx
                                                                        +--*  t150   int    arg2 in r8
                                                                        +--*  t152   long   control expr
Generating: N074 ( 21, 25) [000011] --CXG------                         *  CALL      void   System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x001B CALL_INSTRUCTION (G_M4045_IG06,ins#3,ofs#20)
IN000e:        call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
Added IP mapping: 0x0020 (G_M4045_IG06,ins#4,ofs#26)
Generating: N076 (???,???) [000109] -----------                            IL_OFFSET void   INLRT @ 0x020[--] REG NA
Generating: N078 (  9,  6) [000012] -c---------                   t12 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16>(AX) V12 tmp2          NA REG NA
Generating: N080 (???,???) [000153] Dc---------                  t153 =    LCL_ADDR  byref  V02 loc1         [+0] NA REG NA
                                                                        /--*  t153   byref  
                                                                        +--*  t12    struct 
Generating: N082 ( 19, 13) [000013] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M4045_IG06:        ; offs=000041H, size=001AH, bbWeight=1, BB05 [0001], extend
Created:
      G_M4045_IG07:        ; offs=00005BH, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB05 to G_M4045_IG07
IN000f:        vmovdqu32 xmm0, xmmword ptr [V12 rbp-68H]
IN0010:        vmovdqu32 xmmword ptr [V02 rbp-20H], xmm0
Enable GC
Added IP mapping: 0x0021 STACK_EMPTY (G_M4045_IG07,ins#2,ofs#20)
Generating: N084 (???,???) [000110] -----------                            IL_OFFSET void   INLRT @ 0x021[E-] REG NA
Generating: N086 (  3, 10) [000154] Hc---------                  t154 =    CNS_INT(h) long   0x7ff7c6bafba0 ftn REG NA
                                                                        /--*  t154   long   
Generating: N088 (  5, 12) [000155] nc--G------                  t155 = *  IND       long   REG NA
                                                                        /--*  t155   long   control expr
Generating: N090 ( 14,  5) [000014] --CXG------                         *  CALL      void   System.Console:WriteLine() REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0021 STACK_EMPTY CALL_INSTRUCTION (G_M4045_IG07,ins#2,ofs#20)
Saved:
      G_M4045_IG07:        ; offs=00005BH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Created:
      G_M4045_IG08:        ; offs=00006FH, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mapped BB05 to G_M4045_IG08
IN0011:        call     [System.Console:WriteLine()]
Added IP mapping: 0x0026 STACK_EMPTY (G_M4045_IG08,ins#1,ofs#6)
Generating: N092 (???,???) [000111] -----------                            IL_OFFSET void   INLRT @ 0x026[E-] REG NA
Generating: N094 (  1,  1) [000015] -----------                            NO_OP     void   REG NA
IN0012:        nop      
Added IP mapping: 0x0027 STACK_EMPTY (G_M4045_IG08,ins#2,ofs#7)
Generating: N096 (???,???) [000112] -----------                            IL_OFFSET void   INLRT @ 0x027[E-] REG NA
Generating: N098 (  1,  1) [000016] -----------                   t16 =    CNS_INT   int    0 REG rcx
IN0013:        xor      ecx, ecx
                                                                        /--*  t16    int    
Generating: N100 (  5,  4) [000017] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA
IN0014:        mov      dword ptr [V05 rbp-34H], ecx
Added IP mapping: 0x002A STACK_EMPTY (G_M4045_IG08,ins#4,ofs#12)
Generating: N102 (???,???) [000113] -----------                            IL_OFFSET void   INLRT @ 0x02A[E-] REG NA
Generating: N104 (  0,  0) [000018] -----------                            NOP       void   REG NA
IN0015:        nop      
IN0016:        jmp      L_M4045_BB10

Variable Live Range History Dump for BB05
V00 arg0: rbp[16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V01 loc0: rbp[-16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V02 loc1: rbp[-32] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V03 loc2: rbp[-40] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V04 loc3: rbp[-48] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V05 loc4: rbp[-52] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V06 loc5: rbp[-56] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V07 loc6: rbp[-60] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V08 loc7: rbp[-64] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V09 loc8: rbp[-68] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]

=============== Generating BB06 [02C..032) -> BB08 (always), preds={BB10} succs={BB08} flags=0x00000014.00020011: i label bwd bwd-target LIR 
BB06 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB06:
Saved:
      G_M4045_IG08:        ; offs=00006FH, size=0012H, bbWeight=1, BB05 [0001], extend
Created:
      G_M4045_IG09:        ; offs=000081H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Label: G_M4045_IG09, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB06, IL range [02C..032)
Added IP mapping: 0x002C STACK_EMPTY (G_M4045_IG09,ins#0,ofs#0) label
Generating: N130 (???,???) [000114] -----------                            IL_OFFSET void   INLRT @ 0x02C[E-] REG NA
Generating: N132 (  1,  1) [000027] -----------                            NO_OP     void   REG NA
Mapped BB06 to G_M4045_IG09
IN0017:        nop      
Added IP mapping: 0x002D STACK_EMPTY (G_M4045_IG09,ins#1,ofs#1)
Generating: N134 (???,???) [000115] -----------                            IL_OFFSET void   INLRT @ 0x02D[E-] REG NA
Generating: N136 (  1,  1) [000028] -----------                   t28 =    CNS_INT   int    0 REG rcx
IN0018:        xor      ecx, ecx
                                                                        /--*  t28    int    
Generating: N138 (  5,  4) [000029] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA
IN0019:        mov      dword ptr [V06 rbp-38H], ecx
Added IP mapping: 0x0030 STACK_EMPTY (G_M4045_IG09,ins#3,ofs#6)
Generating: N140 (???,???) [000116] -----------                            IL_OFFSET void   INLRT @ 0x030[E-] REG NA
Generating: N142 (  0,  0) [000030] -----------                            NOP       void   REG NA
IN001a:        nop      
IN001b:        jmp      L_M4045_BB08

Variable Live Range History Dump for BB06
V00 arg0: rbp[16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V01 loc0: rbp[-16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V02 loc1: rbp[-32] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V03 loc2: rbp[-40] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V04 loc3: rbp[-48] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V05 loc4: rbp[-52] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V06 loc5: rbp[-56] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V07 loc6: rbp[-60] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V08 loc7: rbp[-64] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V09 loc8: rbp[-68] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]

=============== Generating BB07 [032..03E), preds={BB08} succs={BB08} flags=0x00000014.00020011: i label bwd bwd-target LIR 
BB07 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB07:
Saved:
      G_M4045_IG09:        ; offs=000081H, size=000CH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB06 [0002], byref
Created:
      G_M4045_IG10:        ; offs=00008DH, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Label: G_M4045_IG10, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB07, IL range [032..03E)
Added IP mapping: 0x0032 STACK_EMPTY (G_M4045_IG10,ins#0,ofs#0) label
Generating: N168 (???,???) [000117] -----------                            IL_OFFSET void   INLRT @ 0x032[E-] REG NA
Generating: N170 (  1,  1) [000039] -----------                            NO_OP     void   REG NA
Mapped BB07 to G_M4045_IG10
IN001c:        nop      
Added IP mapping: 0x0033 STACK_EMPTY (G_M4045_IG10,ins#1,ofs#1)
Generating: N172 (???,???) [000118] -----------                            IL_OFFSET void   INLRT @ 0x033[E-] REG NA
Generating: N174 (  1,  1) [000040] -----------                            NO_OP     void   REG NA
IN001d:        nop      
Added IP mapping: 0x0034 STACK_EMPTY (G_M4045_IG10,ins#2,ofs#2)
Generating: N176 (???,???) [000119] -----------                            IL_OFFSET void   INLRT @ 0x034[E-] REG NA
Generating: N178 (  3,  2) [000041] -----------                   t41 =    LCL_VAR   int    V06 loc5          rcx REG rcx
IN001e:        mov      ecx, dword ptr [V06 rbp-38H]
                                                                        /--*  t41    int    
Generating: N180 (  7,  5) [000042] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
IN001f:        mov      dword ptr [V07 rbp-3CH], ecx
Added IP mapping: 0x0038 STACK_EMPTY (G_M4045_IG10,ins#4,ofs#8)
Generating: N182 (???,???) [000120] -----------                            IL_OFFSET void   INLRT @ 0x038[E-] REG NA
Generating: N184 (  3,  2) [000043] -----------                   t43 =    LCL_VAR   int    V07 loc6          rcx REG rcx
IN0020:        mov      ecx, dword ptr [V07 rbp-3CH]
Generating: N186 (  1,  1) [000044] -c---------                   t44 =    CNS_INT   int    1 REG NA
                                                                        /--*  t43    int    
                                                                        +--*  t44    int    
Generating: N188 (  5,  4) [000045] -----------                   t45 = *  ADD       int    REG rcx
IN0021:        inc      ecx
                                                                        /--*  t45    int    
Generating: N190 (  9,  7) [000046] DA---------                         *  STORE_LCL_VAR int    V06 loc5          NA REG NA
IN0022:        mov      dword ptr [V06 rbp-38H], ecx

Variable Live Range History Dump for BB07
V00 arg0: rbp[16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V01 loc0: rbp[-16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V02 loc1: rbp[-32] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V03 loc2: rbp[-40] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V04 loc3: rbp[-48] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V05 loc4: rbp[-52] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V06 loc5: rbp[-56] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V07 loc6: rbp[-60] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V08 loc7: rbp[-64] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V09 loc8: rbp[-68] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]

=============== Generating BB08 [03E..049) -> BB07 (cond), preds={BB06,BB07} succs={BB09,BB07} flags=0x0000000c.00020011: i label bwd bwd-src LIR 
BB08 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB08:
Saved:
      G_M4045_IG10:        ; offs=00008DH, size=0010H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB07 [0003], byref
Created:
      G_M4045_IG11:        ; offs=00009DH, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Label: G_M4045_IG11, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB08, IL range [03E..049)
Added IP mapping: 0x003E STACK_EMPTY (G_M4045_IG11,ins#0,ofs#0) label
Generating: N146 (???,???) [000121] -----------                            IL_OFFSET void   INLRT @ 0x03E[E-] REG NA
Generating: N148 (  3,  2) [000031] -c---------                   t31 =    LCL_VAR   int    V06 loc5          NA REG NA
Generating: N150 (  1,  1) [000032] -c---------                   t32 =    CNS_INT   int    0 REG NA
                                                                        /--*  t31    int    
                                                                        +--*  t32    int    
Generating: N152 (  8,  4) [000033] -----------                   t33 = *  LE        int    REG rcx
Mapped BB08 to G_M4045_IG11
IN0023:        xor      rcx, rcx
IN0024:        cmp      dword ptr [V06 rbp-38H], 0
IN0025:        setle    cl
                                                                        /--*  t33    int    
Generating: N154 ( 12,  7) [000034] DA---------                         *  STORE_LCL_VAR int    V08 loc7          NA REG NA
IN0026:        mov      dword ptr [V08 rbp-40H], ecx
Added IP mapping: 0x0045 STACK_EMPTY (G_M4045_IG11,ins#4,ofs#12)
Generating: N156 (???,???) [000122] -----------                            IL_OFFSET void   INLRT @ 0x045[E-] REG NA
Generating: N158 (  3,  2) [000035] -c---------                   t35 =    LCL_VAR   int    V08 loc7          NA REG NA
Generating: N160 (  1,  1) [000036] -c---------                   t36 =    CNS_INT   int    0 REG NA
                                                                        /--*  t35    int    
                                                                        +--*  t36    int    
Generating: N162 (  5,  4) [000037] -------N---                         *  CMP       void   REG NA
IN0027:        cmp      dword ptr [V08 rbp-40H], 0
Generating: N164 (  7,  6) [000038] -----------                            JCC       void   cond=UNE REG NA
IN0028:        jne      SHORT L_M4045_BB07

Variable Live Range History Dump for BB08
V00 arg0: rbp[16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V01 loc0: rbp[-16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V02 loc1: rbp[-32] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V03 loc2: rbp[-40] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V04 loc3: rbp[-48] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V05 loc4: rbp[-52] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V06 loc5: rbp[-56] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V07 loc6: rbp[-60] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V08 loc7: rbp[-64] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V09 loc8: rbp[-68] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]

=============== Generating BB09 [049..054), preds={BB08} succs={BB10} flags=0x00000004.00000011: i bwd LIR 
BB09 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB09:

Scope info: begin block BB09, IL range [049..054)
Added IP mapping: 0x0049 STACK_EMPTY (G_M4045_IG11,ins#6,ofs#18) label
Generating: N194 (???,???) [000123] -----------                            IL_OFFSET void   INLRT @ 0x049[E-] REG NA
Generating: N196 (  1,  1) [000047] -----------                            NO_OP     void   REG NA
Mapped BB09 to G_M4045_IG11
IN0029:        nop      
Added IP mapping: 0x004A STACK_EMPTY (G_M4045_IG11,ins#7,ofs#19)
Generating: N198 (???,???) [000124] -----------                            IL_OFFSET void   INLRT @ 0x04A[E-] REG NA
Generating: N200 (  3,  2) [000048] -----------                   t48 =    LCL_VAR   int    V05 loc4          rcx REG rcx
IN002a:        mov      ecx, dword ptr [V05 rbp-34H]
                                                                        /--*  t48    int    
Generating: N202 (  7,  5) [000049] DA---------                         *  STORE_LCL_VAR int    V07 loc6          NA REG NA
IN002b:        mov      dword ptr [V07 rbp-3CH], ecx
Added IP mapping: 0x004E STACK_EMPTY (G_M4045_IG11,ins#9,ofs#25)
Generating: N204 (???,???) [000125] -----------                            IL_OFFSET void   INLRT @ 0x04E[E-] REG NA
Generating: N206 (  3,  2) [000050] -----------                   t50 =    LCL_VAR   int    V07 loc6          rcx REG rcx
IN002c:        mov      ecx, dword ptr [V07 rbp-3CH]
Generating: N208 (  1,  1) [000051] -c---------                   t51 =    CNS_INT   int    1 REG NA
                                                                        /--*  t50    int    
                                                                        +--*  t51    int    
Generating: N210 (  5,  4) [000052] -----------                   t52 = *  ADD       int    REG rcx
IN002d:        inc      ecx
                                                                        /--*  t52    int    
Generating: N212 (  9,  7) [000053] DA---------                         *  STORE_LCL_VAR int    V05 loc4          NA REG NA
IN002e:        mov      dword ptr [V05 rbp-34H], ecx

Variable Live Range History Dump for BB09
V00 arg0: rbp[16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V01 loc0: rbp[-16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V02 loc1: rbp[-32] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V03 loc2: rbp[-40] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V04 loc3: rbp[-48] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V05 loc4: rbp[-52] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V06 loc5: rbp[-56] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V07 loc6: rbp[-60] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V08 loc7: rbp[-64] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V09 loc8: rbp[-68] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]

=============== Generating BB10 [054..05F) -> BB06 (cond), preds={BB05,BB09} succs={BB11,BB06} flags=0x0000000c.00020011: i label bwd bwd-src LIR 
BB10 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB10:
Saved:
      G_M4045_IG11:        ; offs=00009DH, size=0021H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB08 [0004], BB09 [0005], byref
Created:
      G_M4045_IG12:        ; offs=0000BEH, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Label: G_M4045_IG12, GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}

Scope info: begin block BB10, IL range [054..05F)
Added IP mapping: 0x0054 STACK_EMPTY (G_M4045_IG12,ins#0,ofs#0) label
Generating: N108 (???,???) [000126] -----------                            IL_OFFSET void   INLRT @ 0x054[E-] REG NA
Generating: N110 (  3,  2) [000019] -c---------                   t19 =    LCL_VAR   int    V05 loc4          NA REG NA
Generating: N112 (  1,  1) [000020] -c---------                   t20 =    CNS_INT   int    0 REG NA
                                                                        /--*  t19    int    
                                                                        +--*  t20    int    
Generating: N114 (  8,  4) [000021] -----------                   t21 = *  LE        int    REG rcx
Mapped BB10 to G_M4045_IG12
IN002f:        xor      rcx, rcx
IN0030:        cmp      dword ptr [V05 rbp-34H], 0
IN0031:        setle    cl
                                                                        /--*  t21    int    
Generating: N116 ( 12,  7) [000022] DA---------                         *  STORE_LCL_VAR int    V09 loc8          NA REG NA
IN0032:        mov      dword ptr [V09 rbp-44H], ecx
Added IP mapping: 0x005B STACK_EMPTY (G_M4045_IG12,ins#4,ofs#12)
Generating: N118 (???,???) [000127] -----------                            IL_OFFSET void   INLRT @ 0x05B[E-] REG NA
Generating: N120 (  3,  2) [000023] -c---------                   t23 =    LCL_VAR   int    V09 loc8          NA REG NA
Generating: N122 (  1,  1) [000024] -c---------                   t24 =    CNS_INT   int    0 REG NA
                                                                        /--*  t23    int    
                                                                        +--*  t24    int    
Generating: N124 (  5,  4) [000025] -------N---                         *  CMP       void   REG NA
IN0033:        cmp      dword ptr [V09 rbp-44H], 0
Generating: N126 (  7,  6) [000026] -----------                            JCC       void   cond=UNE REG NA
IN0034:        jne      SHORT L_M4045_BB06

Variable Live Range History Dump for BB10
V00 arg0: rbp[16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V01 loc0: rbp[-16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V02 loc1: rbp[-32] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V03 loc2: rbp[-40] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V04 loc3: rbp[-48] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V05 loc4: rbp[-52] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V06 loc5: rbp[-56] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V07 loc6: rbp[-60] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V08 loc7: rbp[-64] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]
V09 loc8: rbp[-68] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), ...]

=============== Generating BB11 [05F..0A4) (return), preds={BB10} succs={} flags=0x00000001.00200011: i hascall gcsafe LIR 
BB11 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 0000 {}
							GC regs: (unchanged) 0000 {}
							Byref regs: (unchanged) 0000 {}

      L_M4045_BB11:

Scope info: begin block BB11, IL range [05F..0A4)
Added IP mapping: 0x005F STACK_EMPTY (G_M4045_IG12,ins#6,ofs#18) label
Generating: N216 (???,???) [000128] -----------                            IL_OFFSET void   INLRT @ 0x05F[E-] REG NA
Generating: N218 (  3, 10) [000097] H----------                   t97 =    CNS_INT(h) ref     'Ascii'
 REG rcx
Mapped BB11 to G_M4045_IG12
IN0035:        mov      rcx, 0x27BA4E31760      ; 'Ascii'

							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t97    ref    
Generating: N220 (???,???) [000156] -----------                  t156 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N222 (  3, 10) [000157] Hc---------                  t157 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
                                                                        /--*  t157   long   
Generating: N224 (  5, 12) [000158] nc--G------                  t158 = *  IND       long   REG NA
                                                                        /--*  t156   ref    arg0 in rcx
                                                                        +--*  t158   long   control expr
Generating: N226 ( 17, 16) [000055] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
							GC regs: 0002 {rcx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0064 CALL_INSTRUCTION (G_M4045_IG12,ins#7,ofs#28)
IN0036:        call     [System.Console:WriteLine(System.String)]
Added IP mapping: 0x0069 STACK_EMPTY (G_M4045_IG12,ins#8,ofs#34)
Generating: N228 (???,???) [000129] -----------                            IL_OFFSET void   INLRT @ 0x069[E-] REG NA
Generating: N230 (  1,  1) [000056] -----------                            NO_OP     void   REG NA
IN0037:        nop      
Added IP mapping: 0x006A STACK_EMPTY (G_M4045_IG12,ins#9,ofs#35)
Generating: N232 (???,???) [000130] -----------                            IL_OFFSET void   INLRT @ 0x06A[E-] REG NA
Generating: N234 (  9,  6) [000057] -c---------                   t57 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V01 loc0          NA REG NA
Generating: N236 (???,???) [000159] Dc---------                  t159 =    LCL_ADDR  byref  V17 tmp7         [+0] NA REG NA
                                                                        /--*  t159   byref  
                                                                        +--*  t57    struct 
Generating: N238 ( 19, 13) [000098] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M4045_IG12:        ; offs=0000BEH, size=0023H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB10 [0006], BB11 [0007], byref
Created:
      G_M4045_IG13:        ; offs=0000E1H, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB11 to G_M4045_IG13
IN0038:        vmovdqu32 xmm0, xmmword ptr [V01 rbp-10H]
IN0039:        vmovdqu32 xmmword ptr [V17 rbp-98H], xmm0
Enable GC
Generating: N240 (  9,  6) [000058] -c---------                   t58 =    LCL_VAR   struct<System.ReadOnlySpan`1, 16> V02 loc1          NA REG NA
Generating: N242 (???,???) [000160] Dc---------                  t160 =    LCL_ADDR  byref  V18 tmp8         [+0] NA REG NA
                                                                        /--*  t160   byref  
                                                                        +--*  t58    struct 
Generating: N244 ( 19, 13) [000099] sA---------                         *  STORE_BLK struct<System.ReadOnlySpan`1, 16> (copy) (Unroll) REG NA
Disable GC
Saved:
      G_M4045_IG13:        ; offs=0000E1H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
Created:
      G_M4045_IG14:        ; offs=0000F5H, size=0000H, bbWeight=1, gcrefRegs=0000 {}, nogc
Mapped BB11 to G_M4045_IG14
IN003a:        vmovdqu32 xmm0, xmmword ptr [V02 rbp-20H]
IN003b:        vmovdqu32 xmmword ptr [V18 rbp-A8H], xmm0
Enable GC
Generating: N246 (  3,  3) [000100] -----------                  t100 =    LCL_ADDR  long   V17 tmp7         [+0] rcx REG rcx
Saved:
      G_M4045_IG14:        ; offs=0000F5H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
Created:
      G_M4045_IG15:        ; offs=000109H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
Mapped BB11 to G_M4045_IG15
IN003c:        lea      rcx, [V17 rbp-98H]
                                                                        /--*  t100   long   
Generating: N248 (???,???) [000161] -----------                  t161 = *  PUTARG_REG long   REG rcx
Generating: N250 (  3,  3) [000101] -----------                  t101 =    LCL_ADDR  long   V18 tmp8         [+0] rdx REG rdx
IN003d:        lea      rdx, [V18 rbp-A8H]
                                                                        /--*  t101   long   
Generating: N252 (???,???) [000162] -----------                  t162 = *  PUTARG_REG long   REG rdx
Generating: N254 (  3, 10) [000163] Hc---------                  t163 =    CNS_INT(h) long   0x7ff7c6ad6880 ftn REG NA
                                                                        /--*  t163   long   
Generating: N256 (  5, 12) [000164] nc--G------                  t164 = *  IND       long   REG NA
                                                                        /--*  t161   long   arg0 in rcx
                                                                        +--*  t162   long   arg1 in rdx
                                                                        +--*  t164   long   control expr
Generating: N258 ( 64, 39) [000059] --CXG------                   t59 = *  CALL      int    System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x006C CALL_INSTRUCTION (G_M4045_IG15,ins#2,ofs#14)
IN003e:        call     [System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool]
                                                                        /--*  t59    int    
Generating: N260 ( 68, 42) [000060] DA-XG------                         *  STORE_LCL_VAR int    V13 tmp3          NA REG NA
IN003f:        mov      dword ptr [V13 rbp-6CH], eax
Added IP mapping: 0x0071 (G_M4045_IG15,ins#4,ofs#23)
Generating: N262 (???,???) [000131] -----------                            IL_OFFSET void   INLRT @ 0x071[--] REG NA
Generating: N264 (  3,  2) [000061] -----------                   t61 =    LCL_VAR   int    V13 tmp3          rcx REG rcx
IN0040:        mov      ecx, dword ptr [V13 rbp-6CH]
                                                                        /--*  t61    int    
Generating: N266 (???,???) [000165] -----------                  t165 = *  PUTARG_REG int    REG rcx
Generating: N268 (  3, 10) [000166] Hc---------                  t166 =    CNS_INT(h) long   0x7ff7c6bafbb8 ftn REG NA
                                                                        /--*  t166   long   
Generating: N270 (  5, 12) [000167] nc--G------                  t167 = *  IND       long   REG NA
                                                                        /--*  t165   int    arg0 in rcx
                                                                        +--*  t167   long   control expr
Generating: N272 ( 17,  8) [000062] --CXG------                         *  CALL      void   System.Console:WriteLine(bool) REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0071 CALL_INSTRUCTION (G_M4045_IG15,ins#5,ofs#26)
IN0041:        call     [System.Console:WriteLine(bool)]
Added IP mapping: 0x0076 STACK_EMPTY (G_M4045_IG15,ins#6,ofs#32)
Generating: N274 (???,???) [000132] -----------                            IL_OFFSET void   INLRT @ 0x076[E-] REG NA
Generating: N276 (  1,  1) [000063] -----------                            NO_OP     void   REG NA
IN0042:        nop      
Added IP mapping: 0x0077 STACK_EMPTY (G_M4045_IG15,ins#7,ofs#33)
Generating: N278 (???,???) [000133] -----------                            IL_OFFSET void   INLRT @ 0x077[E-] REG NA
Generating: N280 (  3, 10) [000102] H----------                  t102 =    CNS_INT(h) ref     'String'
 REG rcx
IN0043:        mov      rcx, 0x27BA4E31780      ; 'String'

							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t102   ref    
Generating: N282 (???,???) [000168] -----------                  t168 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N284 (  3, 10) [000169] Hc---------                  t169 =    CNS_INT(h) long   0x7ff7c6bafcd8 ftn REG NA
                                                                        /--*  t169   long   
Generating: N286 (  5, 12) [000170] nc--G------                  t170 = *  IND       long   REG NA
                                                                        /--*  t168   ref    arg0 in rcx
                                                                        +--*  t170   long   control expr
Generating: N288 ( 17, 16) [000065] --CXG------                         *  CALL      void   System.Console:WriteLine(System.String) REG NA
							GC regs: 0002 {rcx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x007C CALL_INSTRUCTION (G_M4045_IG15,ins#8,ofs#43)
IN0044:        call     [System.Console:WriteLine(System.String)]
Added IP mapping: 0x0081 STACK_EMPTY (G_M4045_IG15,ins#9,ofs#49)
Generating: N290 (???,???) [000134] -----------                            IL_OFFSET void   INLRT @ 0x081[E-] REG NA
Generating: N292 (  1,  1) [000066] -----------                            NO_OP     void   REG NA
IN0045:        nop      
Added IP mapping: 0x0082 STACK_EMPTY (G_M4045_IG15,ins#10,ofs#50)
Generating: N294 (???,???) [000135] -----------                            IL_OFFSET void   INLRT @ 0x082[E-] REG NA
Generating: N296 (  3, 10) [000103] H----------                  t103 =    CNS_INT(h) ref     'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '
 REG rcx
IN0046:        mov      rcx, 0x27BA4E317A8      ; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t103   ref    
Generating: N298 (  7, 13) [000068] DA---------                         *  STORE_LCL_VAR ref    V03 loc2          NA REG NA
							GC regs: 0002 {rcx} => 0000 {}
IN0047:        mov      gword ptr [V03 rbp-28H], rcx
Added IP mapping: 0x0088 STACK_EMPTY (G_M4045_IG15,ins#12,ofs#64)
Generating: N300 (???,???) [000136] -----------                            IL_OFFSET void   INLRT @ 0x088[E-] REG NA
Generating: N302 (  3, 10) [000070] H----------                   t70 =    CNS_INT(h) long   0x7ff7c6bf3378 class REG rcx
IN0048:        mov      rcx, 0x7FF7C6BF3378      ; ushort[]
                                                                        /--*  t70    long   
Generating: N304 (???,???) [000171] -----------                  t171 = *  PUTARG_REG long   REG rcx
Generating: N306 (  1,  1) [000069] -----------                   t69 =    CNS_INT   long   3 REG rdx
IN0049:        mov      edx, 3
                                                                        /--*  t69    long   
Generating: N308 (???,???) [000172] -----------                  t172 = *  PUTARG_REG long   REG rdx
                                                                        /--*  t171   long   arg0 in rcx
                                                                        +--*  t172   long   arg1 in rdx
Generating: N310 ( 18, 18) [000071] --CXG------                   t71 = *  CALL help ref    CORINFO_HELP_NEWARR_1_VC REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN004a:        call     CORINFO_HELP_NEWARR_1_VC
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t71    ref    
Generating: N312 ( 22, 21) [000072] DA-XG------                         *  STORE_LCL_VAR ref    V14 tmp4          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN004b:        mov      gword ptr [V14 rbp-78H], rax
Added IP mapping: 0x008E (G_M4045_IG15,ins#16,ofs#88)
Generating: N314 (???,???) [000137] -----------                            IL_OFFSET void   INLRT @ 0x08E[--] REG NA
Generating: N316 (  3, 10) [000075] H----------                   t75 =    CNS_INT(h) long   0x7ff7c6bf36f8 field REG rcx
IN004c:        mov      rcx, 0x7FF7C6BF36F8      ; <PrivateImplementationDetails>:8EF6341A03FE4690DA03E4B9770B67F1FB07C68BBE1CE709341225060715D4A5
                                                                        /--*  t75    long   
Generating: N318 (???,???) [000173] -----------                  t173 = *  PUTARG_REG long   REG rcx
                                                                        /--*  t173   long   arg0 in rcx
Generating: N320 ( 17, 16) [000076] --CXG------                   t76 = *  CALL help ref    CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN004d:        call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t76    ref    
Generating: N322 ( 27, 23) [000078] DA-XG------                         *  STORE_LCL_VAR struct<System.RuntimeFieldHandle, 8> V15 tmp5          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN004e:        mov      gword ptr [V15 rbp-80H], rax
Generating: N324 (  3,  2) [000074] -----------                   t74 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
IN004f:        mov      rcx, gword ptr [V14 rbp-78H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t74    ref    
Generating: N326 (???,???) [000174] -----------                  t174 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N328 (  3,  4) [000079] -----------                   t79 =    LCL_FLD   ref    V15 tmp5         [+0] rdx REG rdx
IN0050:        mov      rdx, gword ptr [V15 rbp-80H]
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t79    ref    
Generating: N330 (???,???) [000175] -----------                  t175 = *  PUTARG_REG ref    REG rdx
							GC regs: 0006 {rcx rdx} => 0002 {rcx}
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t174   ref    arg0 in rcx
                                                                        +--*  t175   ref    arg1 in rdx
Generating: N332 ( 20, 13) [000077] --CXG------                         *  CALL      void   System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle) REG NA
							GC regs: 0006 {rcx rdx} => 0004 {rdx}
							GC regs: 0004 {rdx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x0094 CALL_INSTRUCTION (G_M4045_IG15,ins#21,ofs#115)
IN0051:        call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
Added IP mapping: 0x0099 (G_M4045_IG15,ins#22,ofs#120)
Generating: N334 (???,???) [000138] -----------                            IL_OFFSET void   INLRT @ 0x099[--] REG NA
Generating: N336 (  3,  2) [000073] -----------                   t73 =    LCL_VAR   ref    V14 tmp4          rcx REG rcx
IN0052:        mov      rcx, gword ptr [V14 rbp-78H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t73    ref    
Generating: N338 (  7,  5) [000080] DA---------                         *  STORE_LCL_VAR ref    V04 loc3          NA REG NA
							GC regs: 0002 {rcx} => 0000 {}
IN0053:        mov      gword ptr [V04 rbp-30H], rcx
Added IP mapping: 0x009A STACK_EMPTY (G_M4045_IG15,ins#24,ofs#128)
Generating: N340 (???,???) [000139] -----------                            IL_OFFSET void   INLRT @ 0x09A[E-] REG NA
Generating: N342 (  3,  2) [000081] -----------                   t81 =    LCL_VAR   ref    V03 loc2          rcx REG rcx
IN0054:        mov      rcx, gword ptr [V03 rbp-28H]
							GC regs: 0000 {} => 0002 {rcx}
                                                                        /--*  t81    ref    
Generating: N344 (???,???) [000176] -----------                  t176 = *  PUTARG_REG ref    REG rcx
							GC regs: 0002 {rcx} => 0000 {}
							GC regs: 0000 {} => 0002 {rcx}
Generating: N346 (  3,  2) [000082] -----------                   t82 =    LCL_VAR   ref    V04 loc3          rdx REG rdx
IN0055:        mov      rdx, gword ptr [V04 rbp-30H]
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
                                                                        /--*  t82    ref    
Generating: N348 (???,???) [000177] -----------                  t177 = *  PUTARG_REG ref    REG rdx
							GC regs: 0006 {rcx rdx} => 0002 {rcx}
							GC regs: 0002 {rcx} => 0006 {rcx rdx}
Generating: N350 (  1,  1) [000083] -----------                   t83 =    CNS_INT   int    1 REG r8
IN0056:        mov      r8d, 1
                                                                        /--*  t83    int    
Generating: N352 (???,???) [000178] -----------                  t178 = *  PUTARG_REG int    REG r8
Generating: N354 (  3, 10) [000179] Hc---------                  t179 =    CNS_INT(h) long   0x7ff7c6a44678 ftn REG NA
                                                                        /--*  t179   long   
Generating: N356 (  5, 12) [000180] nc--G------                  t180 = *  IND       long   REG NA
                                                                        /--*  t176   ref    arg0 in rcx
                                                                        +--*  t177   ref    arg1 in rdx
                                                                        +--*  t178   int    arg2 in r8
                                                                        +--*  t180   long   control expr
Generating: N358 ( 21, 13) [000084] --CXG------                   t84 = *  CALL      ref    System.Program:Split(System.String,ushort[],int):System.String[] REG rax
							GC regs: 0006 {rcx rdx} => 0004 {rdx}
							GC regs: 0004 {rdx} => 0000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
Added IP mapping: 0x009D CALL_INSTRUCTION (G_M4045_IG15,ins#27,ofs#142)
IN0057:        call     [System.Program:Split(System.String,ushort[],int):System.String[]]
							GC regs: 0000 {} => 0001 {rax}
                                                                        /--*  t84    ref    
Generating: N360 ( 25, 16) [000085] DA-XG------                         *  STORE_LCL_VAR ref    V16 tmp6          NA REG NA
							GC regs: 0001 {rax} => 0000 {}
IN0058:        mov      gword ptr [V16 rbp-88H], rax
Added IP mapping: 0x00A2 (G_M4045_IG15,ins#29,ofs#155)
Generating: N362 (???,???) [000140] -----------                            IL_OFFSET void   INLRT @ 0x0A2[--] REG NA
Generating: N364 (  0,  0) [000087] -----------                            NOP       void   REG NA
IN0059:        nop      
Added IP mapping: 0x00A3 STACK_EMPTY (G_M4045_IG15,ins#30,ofs#156)
Generating: N366 (???,???) [000141] -----------                            IL_OFFSET void   INLRT @ 0x0A3[E-] REG NA
Generating: N368 (  0,  0) [000088] -----------                            RETURN    void   REG NA
IN005a:        nop      
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Closing debug range.
Added IP mapping: EPILOG (G_M4045_IG15,ins#31,ofs#157) label
Reserving epilog IG for block BB11
Saved:
      G_M4045_IG15:        ; offs=000109H, size=009DH, bbWeight=1, BB11 [0007], extend
Created:
      G_M4045_IG16:        ; offs=0001A6H, size=0000H, bbWeight=1, gcrefRegs=0000 {}
*************** After placeholder IG creation
G_M4045_IG01:        ; func=00, offs=000000H, size=0000H, bbWeight=1, gcrefRegs=0000 {} <-- Prolog IG
G_M4045_IG02:        ; offs=000000H, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0009], byref
G_M4045_IG03:        ; offs=00000DH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0010], byref
G_M4045_IG04:        ; offs=000012H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
G_M4045_IG05:        ; offs=00002DH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M4045_IG06:        ; offs=000041H, size=001AH, bbWeight=1, BB05 [0001], extend
G_M4045_IG07:        ; offs=00005BH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M4045_IG08:        ; offs=00006FH, size=0012H, bbWeight=1, BB05 [0001], extend
G_M4045_IG09:        ; offs=000081H, size=000CH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB06 [0002], byref
G_M4045_IG10:        ; offs=00008DH, size=0010H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB07 [0003], byref
G_M4045_IG11:        ; offs=00009DH, size=0021H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB08 [0004], BB09 [0005], byref
G_M4045_IG12:        ; offs=0000BEH, size=0023H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB10 [0006], BB11 [0007], byref
G_M4045_IG13:        ; offs=0000E1H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
G_M4045_IG14:        ; offs=0000F5H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
G_M4045_IG15:        ; offs=000109H, size=009DH, bbWeight=1, BB11 [0007], extend
G_M4045_IG16:        ; epilog placeholder, next placeholder=<END>, BB11 [0007], epilog, extend <-- First placeholder <-- Last placeholder
                     ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=0000 {}, PrevByrefRegs=0000 {}
                     ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=0000 {}, InitByrefRegs=0000 {}

Variable Live Range History Dump for BB11
V00 arg0: rbp[16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V01 loc0: rbp[-16] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V02 loc1: rbp[-32] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V03 loc2: rbp[-40] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V04 loc3: rbp[-48] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V05 loc4: rbp[-52] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V06 loc5: rbp[-56] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V07 loc6: rbp[-60] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V08 loc7: rbp[-64] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
V09 loc8: rbp[-68] (1 slot) [(G_M4045_IG04,ins#0,ofs#0), (G_M4045_IG15,ins#31,ofs#157)]
Liveness not changing: 0000000000000000 {}

# compCycleEstimate =    433, compSizeEstimate =   342 System.Program:Main(System.String[])
; Final local variable assignments
;
;  V00 arg0         [V00    ] (  1,  1   )     ref  ->  [rbp+10H]   do-not-enreg[] class-hnd <System.String[]>
;  V01 loc0         [V01    ] (  1,  1   )  struct (16) [rbp-10H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V02 loc1         [V02    ] (  1,  1   )  struct (16) [rbp-20H]   do-not-enreg[S] must-init <System.ReadOnlySpan`1[ubyte]>
;  V03 loc2         [V03    ] (  1,  1   )     ref  ->  [rbp-28H]   do-not-enreg[] must-init class-hnd exact <System.String>
;  V04 loc3         [V04    ] (  1,  1   )     ref  ->  [rbp-30H]   do-not-enreg[] must-init class-hnd exact <ushort[]>
;  V05 loc4         [V05    ] (  1,  1   )     int  ->  [rbp-34H]   do-not-enreg[] must-init
;  V06 loc5         [V06    ] (  1,  1   )     int  ->  [rbp-38H]   do-not-enreg[] must-init
;  V07 loc6         [V07    ] (  1,  1   )     int  ->  [rbp-3CH]   do-not-enreg[] must-init
;  V08 loc7         [V08    ] (  1,  1   )    bool  ->  [rbp-40H]   do-not-enreg[] must-init
;  V09 loc8         [V09    ] (  1,  1   )    bool  ->  [rbp-44H]   do-not-enreg[] must-init
;  V10 OutArgs      [V10    ] (  1,  1   )  struct (32) [rsp+00H]   do-not-enreg[XS] addr-exposed "OutgoingArgSpace"
;  V11 tmp1         [V11    ] (  1,  1   )  struct (16) [rbp-58H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V12 tmp2         [V12    ] (  1,  1   )  struct (16) [rbp-68H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "NewObj constructor temp" <System.ReadOnlySpan`1[ubyte]>
;  V13 tmp3         [V13    ] (  1,  1   )     int  ->  [rbp-6CH]   do-not-enreg[] "impSpillStackEnsure"
;  V14 tmp4         [V14    ] (  1,  1   )     ref  ->  [rbp-78H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <ushort[]>
;  V15 tmp5         [V15    ] (  1,  1   )  struct ( 8) [rbp-80H]   do-not-enreg[S] must-init "spilled call-like call argument" <System.RuntimeFieldHandle>
;  V16 tmp6         [V16    ] (  1,  1   )     ref  ->  [rbp-88H]   do-not-enreg[] must-init class-hnd exact "impSpillStackEnsure" <System.String[]>
;  V17 tmp7         [V17    ] (  1,  1   )  struct (16) [rbp-98H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;  V18 tmp8         [V18    ] (  1,  1   )  struct (16) [rbp-A8H]   do-not-enreg[XS] must-init addr-exposed "by-value struct argument" <System.ReadOnlySpan`1[ubyte]>
;
; Lcl frame size = 208
*************** Before prolog / epilog generation
G_M4045_IG01:        ; func=00, offs=000000H, size=0000H, bbWeight=1, gcrefRegs=0000 {} <-- Prolog IG
G_M4045_IG02:        ; offs=000000H, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0009], byref
G_M4045_IG03:        ; offs=00000DH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0010], byref
G_M4045_IG04:        ; offs=000012H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
G_M4045_IG05:        ; offs=00002DH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M4045_IG06:        ; offs=000041H, size=001AH, bbWeight=1, BB05 [0001], extend
G_M4045_IG07:        ; offs=00005BH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M4045_IG08:        ; offs=00006FH, size=0012H, bbWeight=1, BB05 [0001], extend
G_M4045_IG09:        ; offs=000081H, size=000CH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB06 [0002], byref
G_M4045_IG10:        ; offs=00008DH, size=0010H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB07 [0003], byref
G_M4045_IG11:        ; offs=00009DH, size=0021H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB08 [0004], BB09 [0005], byref
G_M4045_IG12:        ; offs=0000BEH, size=0023H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB10 [0006], BB11 [0007], byref
G_M4045_IG13:        ; offs=0000E1H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
G_M4045_IG14:        ; offs=0000F5H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
G_M4045_IG15:        ; offs=000109H, size=009DH, bbWeight=1, BB11 [0007], extend
G_M4045_IG16:        ; epilog placeholder, next placeholder=<END>, BB11 [0007], epilog, extend <-- First placeholder <-- Last placeholder
                     ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=0000 {}, PrevByrefRegs=0000 {}
                     ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=0000 {}, InitByrefRegs=0000 {}
*************** In genFnProlog()
Added IP mapping to front: PROLOG (G_M4045_IG01,ins#0,ofs#0) label

__prolog:
New debug range: first
Found 44 lvMustInit int-sized stack slots, frame offsets 168 through 0
IN005b:        push     rbp
IN005c:        sub      rsp, 208
IN005d:        vzeroupper 
IN005e:        lea      rbp, [rsp+D0H]
IN005f:        xor      rax, rax
IN0060:        mov      qword ptr [rbp-A8H], rax
IN0061:        vxorps   xmm4, xmm4, xmm4
IN0062:        vmovdqa32 xmmword ptr [rbp-A0H], xmm4
IN0063:        mov      rax, -144
IN0064:        vmovdqa32 xmmword ptr [rax+rbp], xmm4
IN0065:        vmovdqa32 xmmword ptr [rbp+rax+10H], xmm4
IN0066:        vmovdqa32 xmmword ptr [rbp+rax+20H], xmm4
IN0067:        add      rax, 48
IN0068:        jne      SHORT  -5 instr
*************** In genFnPrologCalleeRegArgs() for int regs
IN0069:        mov      gword ptr [V00 rbp+10H], rcx
*************** In genEnregisterIncomingStackArgs()
Closing debug range.

Saved:
      G_M4045_IG01:        ; offs=000000H, size=0054H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc
*************** In genFnEpilog()

__epilog:
gcVarPtrSetCur=0000000000000000 {}, gcRegGCrefSetCur=0000 {}, gcRegByrefSetCur=0000 {}
IN006a:        add      rsp, 208
IN006b:        pop      rbp
IN006c:        ret      
Saved:
      G_M4045_IG16:        ; offs=0001A6H, size=0009H, bbWeight=1, epilog, nogc, extend
0 prologs, 1 epilogs, 0 funclet prologs, 0 funclet epilogs
*************** After prolog / epilog generation
G_M4045_IG01:        ; func=00, offs=000000H, size=0054H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG
G_M4045_IG02:        ; offs=000054H, size=000DH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0009], byref
G_M4045_IG03:        ; offs=000061H, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0010], byref
G_M4045_IG04:        ; offs=000066H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
G_M4045_IG05:        ; offs=000081H, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M4045_IG06:        ; offs=000095H, size=001AH, bbWeight=1, BB05 [0001], extend
G_M4045_IG07:        ; offs=0000AFH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
G_M4045_IG08:        ; offs=0000C3H, size=0012H, bbWeight=1, BB05 [0001], extend
G_M4045_IG09:        ; offs=0000D5H, size=000CH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB06 [0002], byref
G_M4045_IG10:        ; offs=0000E1H, size=0010H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB07 [0003], byref
G_M4045_IG11:        ; offs=0000F1H, size=0021H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB08 [0004], BB09 [0005], byref
G_M4045_IG12:        ; offs=000112H, size=0023H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB10 [0006], BB11 [0007], byref
G_M4045_IG13:        ; offs=000135H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
G_M4045_IG14:        ; offs=000149H, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
G_M4045_IG15:        ; offs=00015DH, size=009DH, bbWeight=1, BB11 [0007], extend
G_M4045_IG16:        ; offs=0001FAH, size=0009H, bbWeight=1, epilog, nogc, extend
*************** In emitRemoveJumpToNextInst()
Emitter Jump List:
IG01 IN0068 jne[2]
IG02 IN0002  je[6] -> IG04
IG08 IN0016 jmp[5] -> IG12 ; removal candidate
IG09 IN001b jmp[5] -> IG11 ; removal candidate
IG11 IN0028 jne[2] -> IG10
IG12 IN0034 jne[2] -> IG09
  total jump count: 6
IG08 IN0016 does not jump to the next instruction group, keeping.
IG09 IN001b does not jump to the next instruction group, keeping.
emitRemoveJumpToNextInst removed no unconditional jumps
*************** In emitJumpDistBind()
Emitter Jump List:
IG01 IN0068 jne[2]
IG02 IN0002  je[6] -> IG04
IG08 IN0016 jmp[5] -> IG12 ; removal candidate
IG09 IN001b jmp[5] -> IG11 ; removal candidate
IG11 IN0028 jne[2] -> IG10
IG12 IN0034 jne[2] -> IG09
  total jump count: 6
Adjusted offset of BB02 from 0054 to 0054
Binding: IN0002: 000000 je       L_M4045_BB04
Binding L_M4045_BB04 to G_M4045_IG04
Estimate of fwd jump [A4D4B054/002]: 005B -> 0066 = 0009
Shrinking jump [A4D4B054/002]
Adjusted offset of BB03 from 0061 to 005D
Adjusted offset of BB04 from 0066 to 0062
Adjusted offset of BB05 from 0081 to 007D
Adjusted offset of BB06 from 0095 to 0091
Adjusted offset of BB07 from 00AF to 00AB
Adjusted offset of BB08 from 00C3 to 00BF
Binding: IN0016: 000000 jmp      L_M4045_BB10
Binding L_M4045_BB10 to G_M4045_IG12
Estimate of fwd jump [A4D4C2E0/022]: 00CC -> 010E = 0040
Shrinking jump [A4D4C2E0/022]
Adjusted offset of BB09 from 00D5 to 00CE
Binding: IN001b: 000000 jmp      L_M4045_BB08
Binding L_M4045_BB08 to G_M4045_IG11
Estimate of fwd jump [A4D4C6EC/027]: 00D5 -> 00EA = 0013
Shrinking jump [A4D4C6EC/027]
Adjusted offset of BB10 from 00E1 to 00D7
Adjusted offset of BB11 from 00F1 to 00E7
Binding: IN0028: 000000 jne      SHORT L_M4045_BB07
Binding L_M4045_BB07 to G_M4045_IG10
Estimate of bwd jump [A4D4D2B4/040]: 00F7 -> 00D7 = 0022
Shrinking jump [A4D4D2B4/040]
Adjusted offset of BB12 from 0112 to 0108
Binding: IN0034: 000000 jne      SHORT L_M4045_BB06
Binding L_M4045_BB06 to G_M4045_IG09
Estimate of bwd jump [A4D4D95C/052]: 0118 -> 00CE = 004C
Shrinking jump [A4D4D95C/052]
Adjusted offset of BB13 from 0135 to 012B
Adjusted offset of BB14 from 0149 to 013F
Adjusted offset of BB15 from 015D to 0153
Adjusted offset of BB16 from 01FA to 01F0
Total shrinkage =  10, min extra jump size = 4294967295

*************** Finishing PHASE Generate code

*************** Starting PHASE Emit code

Hot  code size = 0x1F9 bytes
Cold code size = 0x0 bytes
reserveUnwindInfo(isFunclet=false, isColdCode=false, unwindSize=0xa)
*************** In emitEndCodeGen()
Converting emitMaxStackDepth from bytes (0) to elements (0)

***************************************************************************
Instructions as they come out of the scheduler


G_M4045_IG01:        ; offs=000000H, size=0054H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG
IN005b: 000000 push     rbp
IN005c: 000001 sub      rsp, 208
IN005d: 000008 vzeroupper 
IN005e: 00000B lea      rbp, [rsp+D0H]
IN005f: 000013 xor      eax, eax
IN0060: 000015 mov      qword ptr [rbp-A8H], rax
IN0061: 00001C vxorps   xmm4, xmm4, xmm4
IN0062: 000022 vmovdqa32 xmmword ptr [rbp-A0H], xmm4
IN0063: 000029 mov      rax, -144
IN0064: 000033 vmovdqa32 xmmword ptr [rax+rbp], xmm4
IN0065: 00003A vmovdqa32 xmmword ptr [rbp+rax+10H], xmm4
IN0066: 000042 vmovdqa32 xmmword ptr [rbp+rax+20H], xmm4
IN0067: 00004A add      rax, 48
IN0068: 00004E jne      SHORT  -5 instr
IN0069: 000050 mov      gword ptr [rbp+10H], rcx
						;; size=84 bbWeight=1 PerfScore 14.83
G_M4045_IG02:        ; offs=000054H, size=0009H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0009], byref, isz
recordRelocation: 00007FF7C6835C66 (rw: 000001FAA28EBCAE) => 00007FF7C6A33128, type 16 (IMAGE_REL_BASED_DISP32), delta -1
IN0001: 000054 cmp      dword ptr [(reloc 0x7ff7c6a33128)], 0
IN0002: 00005B je       SHORT G_M4045_IG04
						;; size=9 bbWeight=1 PerfScore 4.00
G_M4045_IG03:        ; offs=00005DH, size=0005H, bbWeight=0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0010], byref
recordRelocation: 00007FF7C6835C6E (rw: 000001FAA28EBCB6) => 00007FF82519B5E0, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0003: 00005D call     CORINFO_HELP_DBG_IS_JUST_MY_CODE
                            ; gcr arg pop 0
						;; size=5 bbWeight=0.50 PerfScore 0.50
G_M4045_IG04:        ; offs=000062H, size=001BH, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref
IN0004: 000062 nop      
IN0005: 000063 lea      rcx, [rbp-58H]
IN0006: 000067 mov      rdx, 0x1FAA0E02AC0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN0007: 000071 mov      r8d, 0xF00
recordRelocation: 00007FF7C6835C89 (rw: 000001FAA28EBCD1) => 00007FF7C6A46418, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0008: 000077 call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
                            ; gcr arg pop 0
						;; size=27 bbWeight=1 PerfScore 4.25
G_M4045_IG05:        ; offs=00007DH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
IN0009: 00007D vmovdqu32 xmm0, xmmword ptr [rbp-58H]
IN000a: 000087 vmovdqu32 xmmword ptr [rbp-10H], xmm0 (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 0 by 3 => 3
						;; size=17 bbWeight=1 PerfScore 4.00
G_M4045_IG06:        ; offs=000091H, size=001AH, bbWeight=1, BB05 [0001], extend
Block predicted offs = 00000091, actual = 0000008E -> size adj = 3
IN000b: 00008E lea      rcx, [rbp-68H]
IN000c: 000092 mov      rdx, 0x1FAA0E02AC0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN000d: 00009C mov      r8d, 0xF00
recordRelocation: 00007FF7C6835CB4 (rw: 000001FAA28EBCFC) => 00007FF7C6A46418, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN000e: 0000A2 call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]
                            ; gcr arg pop 0
						;; size=26 bbWeight=1 PerfScore 4.00
G_M4045_IG07:        ; offs=0000ABH, size=0014H, bbWeight=1, BB05 [0001], nogc, extend
Block predicted offs = 000000AB, actual = 000000A8 -> size adj = 3
IN000f: 0000A8 vmovdqu32 xmm0, xmmword ptr [rbp-68H]
IN0010: 0000B2 vmovdqu32 xmmword ptr [rbp-20H], xmm0 (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 3 by 3 => 6
						;; size=17 bbWeight=1 PerfScore 4.00
G_M4045_IG08:        ; offs=0000BFH, size=000FH, bbWeight=1, BB05 [0001], isz, extend
Block predicted offs = 000000BF, actual = 000000B9 -> size adj = 6
recordRelocation: 00007FF7C6835CCB (rw: 000001FAA28EBD13) => 00007FF7C6BAFBA0, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0011: 0000B9 call     [System.Console:WriteLine()]
                            ; gcr arg pop 0
IN0012: 0000BF nop      
IN0013: 0000C0 xor      ecx, ecx
IN0014: 0000C2 mov      dword ptr [rbp-34H], ecx
IN0015: 0000C5 nop      
IN0016: 0000C6 jmp      SHORT G_M4045_IG12
						;; size=15 bbWeight=1 PerfScore 6.75
G_M4045_IG09:        ; offs=0000CEH, size=0009H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB06 [0002], byref, isz
Block predicted offs = 000000CE, actual = 000000C8 -> size adj = 6
IN0017: 0000C8 nop      
IN0018: 0000C9 xor      ecx, ecx
IN0019: 0000CB mov      dword ptr [rbp-38H], ecx
IN001a: 0000CE nop      
IN001b: 0000CF jmp      SHORT G_M4045_IG11
						;; size=9 bbWeight=1 PerfScore 3.75
G_M4045_IG10:        ; offs=0000D7H, size=0010H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB07 [0003], byref
Block predicted offs = 000000D7, actual = 000000D1 -> size adj = 6
IN001c: 0000D1 nop      
IN001d: 0000D2 nop      
IN001e: 0000D3 mov      ecx, dword ptr [rbp-38H]
IN001f: 0000D6 mov      dword ptr [rbp-3CH], ecx
IN0020: 0000D9 mov      ecx, dword ptr [rbp-3CH]
IN0021: 0000DC inc      ecx
IN0022: 0000DE mov      dword ptr [rbp-38H], ecx
						;; size=16 bbWeight=1 PerfScore 4.75
G_M4045_IG11:        ; offs=0000E7H, size=0021H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB08 [0004], BB09 [0005], byref, isz
Block predicted offs = 000000E7, actual = 000000E1 -> size adj = 6
IN0023: 0000E1 xor      ecx, ecx
IN0024: 0000E3 cmp      dword ptr [rbp-38H], 0
IN0025: 0000E7 setle    cl
IN0026: 0000EA mov      dword ptr [rbp-40H], ecx
IN0027: 0000ED cmp      dword ptr [rbp-40H], 0
IN0028: 0000F1 jne      SHORT G_M4045_IG10
IN0029: 0000F3 nop      
IN002a: 0000F4 mov      ecx, dword ptr [rbp-34H]
IN002b: 0000F7 mov      dword ptr [rbp-3CH], ecx
IN002c: 0000FA mov      ecx, dword ptr [rbp-3CH]
IN002d: 0000FD inc      ecx
IN002e: 0000FF mov      dword ptr [rbp-34H], ecx
						;; size=33 bbWeight=1 PerfScore 11.75
G_M4045_IG12:        ; offs=000108H, size=0023H, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB10 [0006], BB11 [0007], byref, isz
Block predicted offs = 00000108, actual = 00000102 -> size adj = 6
IN002f: 000102 xor      ecx, ecx
IN0030: 000104 cmp      dword ptr [rbp-34H], 0
IN0031: 000108 setle    cl
IN0032: 00010B mov      dword ptr [rbp-44H], ecx
IN0033: 00010E cmp      dword ptr [rbp-44H], 0
IN0034: 000112 jne      SHORT G_M4045_IG09
IN0035: 000114 mov      rcx, 0x27BA4E31760      ; 'Ascii'

                            ; gcrRegs +[rcx]
recordRelocation: 00007FF7C6835D30 (rw: 000001FAA28EBD78) => 00007FF7C6BAFCD8, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0036: 00011E call     [System.Console:WriteLine(System.String)]
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0037: 000124 nop      
						;; size=35 bbWeight=1 PerfScore 10.75
G_M4045_IG13:        ; offs=00012BH, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
Block predicted offs = 0000012B, actual = 00000125 -> size adj = 6
IN0038: 000125 vmovdqu32 xmm0, xmmword ptr [rbp-10H] (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 6 by 3 => 9
IN0039: 00012C vmovdqu32 xmmword ptr [rbp-98H], xmm0
						;; size=17 bbWeight=1 PerfScore 4.00
G_M4045_IG14:        ; offs=00013FH, size=0014H, bbWeight=1, BB11 [0007], nogc, extend
Block predicted offs = 0000013F, actual = 00000136 -> size adj = 9
IN003a: 000136 vmovdqu32 xmm0, xmmword ptr [rbp-20H] (ECS:10, ACS:7)
Instruction predicted size = 10, actual = 7
Increasing size adj 9 by 3 => 12
IN003b: 00013D vmovdqu32 xmmword ptr [rbp-A8H], xmm0
						;; size=17 bbWeight=1 PerfScore 4.00
G_M4045_IG15:        ; offs=000153H, size=009DH, bbWeight=1, BB11 [0007], extend
Block predicted offs = 00000153, actual = 00000147 -> size adj = 12
IN003c: 000147 lea      rcx, [rbp-98H]
IN003d: 00014E lea      rdx, [rbp-A8H]
recordRelocation: 00007FF7C6835D67 (rw: 000001FAA28EBDAF) => 00007FF7C6AD6880, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN003e: 000155 call     [System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool]
                            ; gcr arg pop 0
IN003f: 00015B mov      dword ptr [rbp-6CH], eax
IN0040: 00015E mov      ecx, dword ptr [rbp-6CH]
recordRelocation: 00007FF7C6835D73 (rw: 000001FAA28EBDBB) => 00007FF7C6BAFBB8, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0041: 000161 call     [System.Console:WriteLine(bool)]
                            ; gcr arg pop 0
IN0042: 000167 nop      
IN0043: 000168 mov      rcx, 0x27BA4E31780      ; 'String'

                            ; gcrRegs +[rcx]
recordRelocation: 00007FF7C6835D84 (rw: 000001FAA28EBDCC) => 00007FF7C6BAFCD8, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0044: 000172 call     [System.Console:WriteLine(System.String)]
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0045: 000178 nop      
IN0046: 000179 mov      rcx, 0x27BA4E317A8      ; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

                            ; gcrRegs +[rcx]
IN0047: 000183 mov      gword ptr [rbp-28H], rcx
IN0048: 000187 mov      rcx, 0x7FF7C6BF3378      ; ushort[]
                            ; gcrRegs -[rcx]
IN0049: 000191 mov      edx, 3
recordRelocation: 00007FF7C6835DA7 (rw: 000001FAA28EBDEF) => 00007FF825605AF0, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN004a: 000196 call     CORINFO_HELP_NEWARR_1_VC
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN004b: 00019B mov      gword ptr [rbp-78H], rax
IN004c: 00019F mov      rcx, 0x7FF7C6BF36F8      ; <PrivateImplementationDetails>:8EF6341A03FE4690DA03E4B9770B67F1FB07C68BBE1CE709341225060715D4A5
recordRelocation: 00007FF7C6835DBA (rw: 000001FAA28EBE02) => 00007FF8251A88E0, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN004d: 0001A9 call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
                            ; gcr arg pop 0
IN004e: 0001AE mov      gword ptr [rbp-80H], rax
IN004f: 0001B2 mov      rcx, gword ptr [rbp-78H]
                            ; gcrRegs +[rcx]
IN0050: 0001B6 mov      rdx, gword ptr [rbp-80H]
                            ; gcrRegs +[rdx]
recordRelocation: 00007FF7C6835DCB (rw: 000001FAA28EBE13) => 00007FF825812880, type 16 (IMAGE_REL_BASED_REL32), delta 0
IN0051: 0001BA call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN0052: 0001BF mov      rcx, gword ptr [rbp-78H]
                            ; gcrRegs +[rcx]
IN0053: 0001C3 mov      gword ptr [rbp-30H], rcx
IN0054: 0001C7 mov      rcx, gword ptr [rbp-28H]
IN0055: 0001CB mov      rdx, gword ptr [rbp-30H]
                            ; gcrRegs +[rdx]
IN0056: 0001CF mov      r8d, 1
recordRelocation: 00007FF7C6835DE7 (rw: 000001FAA28EBE2F) => 00007FF7C6A44678, type 16 (IMAGE_REL_BASED_DISP32), delta 0
IN0057: 0001D5 call     [System.Program:Split(System.String,ushort[],int):System.String[]]
                            ; gcrRegs -[rcx rdx] +[rax]
                            ; gcr arg pop 0
IN0058: 0001DB mov      gword ptr [rbp-88H], rax
IN0059: 0001E2 nop      
IN005a: 0001E3 nop      
						;; size=157 bbWeight=1 PerfScore 30.50
G_M4045_IG16:        ; offs=0001F0H, size=0009H, bbWeight=1, epilog, nogc, extend
Block predicted offs = 000001F0, actual = 000001E4 -> size adj = 12
IN006a: 0001E4 add      rsp, 208
IN006b: 0001EB pop      rbp
IN006c: 0001EC ret      
						;; size=9 bbWeight=1 PerfScore 1.75Allocated method code size =  505 , actual size =  493, unused size =   12

; Total bytes of code 493, prolog size 84, PerfScore 164.08, instruction count 108, allocated bytes for code 505 (MethodHash=7cc6f032) for method System.Program:Main(System.String[]) (MinOpts)
; ============================================================

*************** After end code gen, before unwindEmit()
G_M4045_IG01:        ; func=00, offs=000000H, size=0054H, bbWeight=1, PerfScore 14.83, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG

IN005b: 000000 push     rbp
IN005c: 000001 sub      rsp, 208
IN005d: 000008 vzeroupper 
IN005e: 00000B lea      rbp, [rsp+D0H]
IN005f: 000013 xor      eax, eax
IN0060: 000015 mov      qword ptr [rbp-A8H], rax
IN0061: 00001C vxorps   xmm4, xmm4, xmm4
IN0062: 000022 vmovdqa32 xmmword ptr [rbp-A0H], xmm4
IN0063: 000029 mov      rax, -144
IN0064: 000033 vmovdqa32 xmmword ptr [rax+rbp], xmm4
IN0065: 00003A vmovdqa32 xmmword ptr [rbp+rax+10H], xmm4
IN0066: 000042 vmovdqa32 xmmword ptr [rbp+rax+20H], xmm4
IN0067: 00004A add      rax, 48
IN0068: 00004E jne      SHORT  -5 instr
IN0069: 000050 mov      gword ptr [V00 rbp+10H], rcx

G_M4045_IG02:        ; offs=000054H, size=0009H, bbWeight=1, PerfScore 4.00, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB02 [0009], byref, isz

IN0001: 000054 cmp      dword ptr [(reloc 0x7ff7c6a33128)], 0
IN0002: 00005B je       SHORT G_M4045_IG04

G_M4045_IG03:        ; offs=00005DH, size=0005H, bbWeight=0.50, PerfScore 0.50, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB03 [0010], byref

IN0003: 00005D call     CORINFO_HELP_DBG_IS_JUST_MY_CODE

G_M4045_IG04:        ; offs=000062H, size=001BH, bbWeight=1, PerfScore 4.25, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB05 [0001], byref

IN0004: 000062 nop      
IN0005: 000063 lea      rcx, [V11 rbp-58H]
IN0006: 000067 mov      rdx, 0x1FAA0E02AC0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN0007: 000071 mov      r8d, 0xF00
IN0008: 000077 call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]

G_M4045_IG05:        ; offs=00007DH, size=0011H, bbWeight=1, PerfScore 4.00, BB05 [0001], nogc, isz, extend

IN0009: 00007D vmovdqu32 xmm0, xmmword ptr [V11 rbp-58H]
IN000a: 000087 vmovdqu32 xmmword ptr [V01 rbp-10H], xmm0

G_M4045_IG06:        ; offs=00008EH, size=001AH, bbWeight=1, PerfScore 4.00, BB05 [0001], extend

IN000b: 00008E lea      rcx, [V12 rbp-68H]
IN000c: 000092 mov      rdx, 0x1FAA0E02AC0      ; data for <PrivateImplementationDetails>:7F2AFA9ABFCAA63BE29E2ACFC82D1708152764BAB0300D2AAE6D31383DDB0DDE
IN000d: 00009C mov      r8d, 0xF00
IN000e: 0000A2 call     [System.ReadOnlySpan`1[ubyte]:.ctor(ulong,int):this]

G_M4045_IG07:        ; offs=0000A8H, size=0011H, bbWeight=1, PerfScore 4.00, BB05 [0001], nogc, isz, extend

IN000f: 0000A8 vmovdqu32 xmm0, xmmword ptr [V12 rbp-68H]
IN0010: 0000B2 vmovdqu32 xmmword ptr [V02 rbp-20H], xmm0

G_M4045_IG08:        ; offs=0000B9H, size=000FH, bbWeight=1, PerfScore 6.75, BB05 [0001], isz, extend

IN0011: 0000B9 call     [System.Console:WriteLine()]
IN0012: 0000BF nop      
IN0013: 0000C0 xor      ecx, ecx
IN0014: 0000C2 mov      dword ptr [V05 rbp-34H], ecx
IN0015: 0000C5 nop      
IN0016: 0000C6 jmp      SHORT G_M4045_IG12

G_M4045_IG09:        ; offs=0000C8H, size=0009H, bbWeight=1, PerfScore 3.75, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB06 [0002], byref, isz

IN0017: 0000C8 nop      
IN0018: 0000C9 xor      ecx, ecx
IN0019: 0000CB mov      dword ptr [V06 rbp-38H], ecx
IN001a: 0000CE nop      
IN001b: 0000CF jmp      SHORT G_M4045_IG11

G_M4045_IG10:        ; offs=0000D1H, size=0010H, bbWeight=1, PerfScore 4.75, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB07 [0003], byref

IN001c: 0000D1 nop      
IN001d: 0000D2 nop      
IN001e: 0000D3 mov      ecx, dword ptr [V06 rbp-38H]
IN001f: 0000D6 mov      dword ptr [V07 rbp-3CH], ecx
IN0020: 0000D9 mov      ecx, dword ptr [V07 rbp-3CH]
IN0021: 0000DC inc      ecx
IN0022: 0000DE mov      dword ptr [V06 rbp-38H], ecx

G_M4045_IG11:        ; offs=0000E1H, size=0021H, bbWeight=1, PerfScore 11.75, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB08 [0004], BB09 [0005], byref, isz

IN0023: 0000E1 xor      ecx, ecx
IN0024: 0000E3 cmp      dword ptr [V06 rbp-38H], 0
IN0025: 0000E7 setle    cl
IN0026: 0000EA mov      dword ptr [V08 rbp-40H], ecx
IN0027: 0000ED cmp      dword ptr [V08 rbp-40H], 0
IN0028: 0000F1 jne      SHORT G_M4045_IG10
IN0029: 0000F3 nop      
IN002a: 0000F4 mov      ecx, dword ptr [V05 rbp-34H]
IN002b: 0000F7 mov      dword ptr [V07 rbp-3CH], ecx
IN002c: 0000FA mov      ecx, dword ptr [V07 rbp-3CH]
IN002d: 0000FD inc      ecx
IN002e: 0000FF mov      dword ptr [V05 rbp-34H], ecx

G_M4045_IG12:        ; offs=000102H, size=0023H, bbWeight=1, PerfScore 10.75, gcrefRegs=0000 {}, byrefRegs=0000 {}, BB10 [0006], BB11 [0007], byref, isz

IN002f: 000102 xor      ecx, ecx
IN0030: 000104 cmp      dword ptr [V05 rbp-34H], 0
IN0031: 000108 setle    cl
IN0032: 00010B mov      dword ptr [V09 rbp-44H], ecx
IN0033: 00010E cmp      dword ptr [V09 rbp-44H], 0
IN0034: 000112 jne      SHORT G_M4045_IG09
IN0035: 000114 mov      rcx, 0x27BA4E31760      ; 'Ascii'

IN0036: 00011E call     [System.Console:WriteLine(System.String)]
IN0037: 000124 nop      

G_M4045_IG13:        ; offs=000125H, size=0011H, bbWeight=1, PerfScore 4.00, BB11 [0007], nogc, isz, extend

IN0038: 000125 vmovdqu32 xmm0, xmmword ptr [V01 rbp-10H]
IN0039: 00012C vmovdqu32 xmmword ptr [V17 rbp-98H], xmm0

G_M4045_IG14:        ; offs=000136H, size=0011H, bbWeight=1, PerfScore 4.00, BB11 [0007], nogc, isz, extend

IN003a: 000136 vmovdqu32 xmm0, xmmword ptr [V02 rbp-20H]
IN003b: 00013D vmovdqu32 xmmword ptr [V18 rbp-A8H], xmm0

G_M4045_IG15:        ; offs=000147H, size=009DH, bbWeight=1, PerfScore 30.50, BB11 [0007], extend

IN003c: 000147 lea      rcx, [V17 rbp-98H]
IN003d: 00014E lea      rdx, [V18 rbp-A8H]
IN003e: 000155 call     [System.Text.Ascii:Equals(System.ReadOnlySpan`1[ubyte],System.ReadOnlySpan`1[ubyte]):bool]
IN003f: 00015B mov      dword ptr [V13 rbp-6CH], eax
IN0040: 00015E mov      ecx, dword ptr [V13 rbp-6CH]
IN0041: 000161 call     [System.Console:WriteLine(bool)]
IN0042: 000167 nop      
IN0043: 000168 mov      rcx, 0x27BA4E31780      ; 'String'

IN0044: 000172 call     [System.Console:WriteLine(System.String)]
IN0045: 000178 nop      
IN0046: 000179 mov      rcx, 0x27BA4E317A8      ; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ A B C D E F G H I J K L M N O P Q R '

IN0047: 000183 mov      gword ptr [V03 rbp-28H], rcx
IN0048: 000187 mov      rcx, 0x7FF7C6BF3378      ; ushort[]
IN0049: 000191 mov      edx, 3
IN004a: 000196 call     CORINFO_HELP_NEWARR_1_VC
IN004b: 00019B mov      gword ptr [V14 rbp-78H], rax
IN004c: 00019F mov      rcx, 0x7FF7C6BF36F8      ; <PrivateImplementationDetails>:8EF6341A03FE4690DA03E4B9770B67F1FB07C68BBE1CE709341225060715D4A5
IN004d: 0001A9 call     CORINFO_HELP_FIELDDESC_TO_STUBRUNTIMEFIELD
IN004e: 0001AE mov      gword ptr [V15 rbp-80H], rax
IN004f: 0001B2 mov      rcx, gword ptr [V14 rbp-78H]
IN0050: 0001B6 mov      rdx, gword ptr [V15 rbp-80H]
IN0051: 0001BA call     System.Runtime.CompilerServices.RuntimeHelpers:InitializeArray(System.Array,System.RuntimeFieldHandle)
IN0052: 0001BF mov      rcx, gword ptr [V14 rbp-78H]
IN0053: 0001C3 mov      gword ptr [V04 rbp-30H], rcx
IN0054: 0001C7 mov      rcx, gword ptr [V03 rbp-28H]
IN0055: 0001CB mov      rdx, gword ptr [V04 rbp-30H]
IN0056: 0001CF mov      r8d, 1
IN0057: 0001D5 call     [System.Program:Split(System.String,ushort[],int):System.String[]]
IN0058: 0001DB mov      gword ptr [V16 rbp-88H], rax
IN0059: 0001E2 nop      
IN005a: 0001E3 nop      

G_M4045_IG16:        ; offs=0001E4H, size=0009H, bbWeight=1, PerfScore 1.75, epilog, nogc, extend

IN006a: 0001E4 add      rsp, 208
IN006b: 0001EB pop      rbp
IN006c: 0001EC ret      


*************** Finishing PHASE Emit code

*************** Starting PHASE Emit GC+EH tables
Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0x0001ed (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 3
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_LARGE (1)     OpInfo: 0 - Scaled small  
      Size: 26 * 8 = 208 = 0x000D0
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FF7C6835C10, pColdCode=0x0000000000000000, startOffset=0x0, endOffset=0x1ed, unwindSize=0xa, pUnwindBlock=0x0000027BA4D47C3E, funKind=0 (main function))
*************** In genIPmappingGen()
IP mapping count : 49
IL offs PROLOG : 0x00000000 ( STACK_EMPTY )
IL offs NO_MAP : 0x00000054 ( STACK_EMPTY )
IL offs 0x0000 : 0x00000062 ( STACK_EMPTY )
IL offs 0x0001 : 0x00000063 ( STACK_EMPTY )
IL offs 0x000B : 0x00000077 ( CALL_INSTRUCTION )
IL offs 0x0010 : 0x0000007D
IL offs 0x0011 : 0x0000008E ( STACK_EMPTY )
IL offs 0x001B : 0x000000A2 ( CALL_INSTRUCTION )
IL offs 0x0020 : 0x000000A8
IL offs 0x0021 : 0x000000B9 ( STACK_EMPTY )
IL offs 0x0021 : 0x000000B9 ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x0026 : 0x000000BF ( STACK_EMPTY )
IL offs 0x0027 : 0x000000C0 ( STACK_EMPTY )
IL offs 0x002A : 0x000000C5 ( STACK_EMPTY )
IL offs 0x002C : 0x000000C8 ( STACK_EMPTY )
IL offs 0x002D : 0x000000C9 ( STACK_EMPTY )
IL offs 0x0030 : 0x000000CE ( STACK_EMPTY )
IL offs 0x0032 : 0x000000D1 ( STACK_EMPTY )
IL offs 0x0033 : 0x000000D2 ( STACK_EMPTY )
IL offs 0x0034 : 0x000000D3 ( STACK_EMPTY )
IL offs 0x0038 : 0x000000D9 ( STACK_EMPTY )
IL offs 0x003E : 0x000000E1 ( STACK_EMPTY )
IL offs 0x0045 : 0x000000ED ( STACK_EMPTY )
IL offs 0x0049 : 0x000000F3 ( STACK_EMPTY )
IL offs 0x004A : 0x000000F4 ( STACK_EMPTY )
IL offs 0x004E : 0x000000FA ( STACK_EMPTY )
IL offs 0x0054 : 0x00000102 ( STACK_EMPTY )
IL offs 0x005B : 0x0000010E ( STACK_EMPTY )
IL offs 0x005F : 0x00000114 ( STACK_EMPTY )
IL offs 0x0064 : 0x0000011E ( CALL_INSTRUCTION )
IL offs 0x0069 : 0x00000124 ( STACK_EMPTY )
IL offs 0x006A : 0x00000125 ( STACK_EMPTY )
IL offs 0x006C : 0x00000155 ( CALL_INSTRUCTION )
IL offs 0x0071 : 0x0000015E
IL offs 0x0071 : 0x00000161 ( CALL_INSTRUCTION )
IL offs 0x0076 : 0x00000167 ( STACK_EMPTY )
IL offs 0x0077 : 0x00000168 ( STACK_EMPTY )
IL offs 0x007C : 0x00000172 ( CALL_INSTRUCTION )
IL offs 0x0081 : 0x00000178 ( STACK_EMPTY )
IL offs 0x0082 : 0x00000179 ( STACK_EMPTY )
IL offs 0x0088 : 0x00000187 ( STACK_EMPTY )
IL offs 0x008E : 0x0000019F
IL offs 0x0094 : 0x000001BA ( CALL_INSTRUCTION )
IL offs 0x0099 : 0x000001BF
IL offs 0x009A : 0x000001C7 ( STACK_EMPTY )
IL offs 0x009D : 0x000001D5 ( CALL_INSTRUCTION )
IL offs 0x00A2 : 0x000001E2
IL offs 0x00A3 : 0x000001E3 ( STACK_EMPTY )
IL offs EPILOG : 0x000001E4 ( STACK_EMPTY )

*************** In genSetScopeInfo()
VarLocInfo count is 11
; Variable debug info: 11 live ranges, 10 vars for method System.Program:Main(System.String[])
(V00 arg0) : From 00000000h to 00000054h, in rcx
(V00 arg0) : From 00000062h to 000001E4h, in rbp[16] (1 slot)
(V01 loc0) : From 00000062h to 000001E4h, in rbp[-16] (1 slot)
(V02 loc1) : From 00000062h to 000001E4h, in rbp[-32] (1 slot)
(V03 loc2) : From 00000062h to 000001E4h, in rbp[-40] (1 slot)
(V04 loc3) : From 00000062h to 000001E4h, in rbp[-48] (1 slot)
(V05 loc4) : From 00000062h to 000001E4h, in rbp[-52] (1 slot)
(V06 loc5) : From 00000062h to 000001E4h, in rbp[-56] (1 slot)
(V07 loc6) : From 00000062h to 000001E4h, in rbp[-60] (1 slot)
(V08 loc7) : From 00000062h to 000001E4h, in rbp[-64] (1 slot)
(V09 loc8) : From 00000062h to 000001E4h, in rbp[-68] (1 slot)
*************** In gcInfoBlockHdrSave()
Set code length to 493.
Set ReturnKind to Scalar.
Set stack base register to rbp.
Set Outgoing stack arg area size to 32.
Stack slot id for offset 16 (0x10) (frame) (untracked) = 0.
Stack slot id for offset -16 (-0x10) (frame) (byref, untracked) = 1.
Stack slot id for offset -32 (-0x20) (frame) (byref, untracked) = 2.
Stack slot id for offset -40 (-0x28) (frame) (untracked) = 3.
Stack slot id for offset -48 (-0x30) (frame) (untracked) = 4.
Stack slot id for offset -88 (-0x58) (frame) (byref, untracked) = 5.
Stack slot id for offset -104 (-0x68) (frame) (byref, untracked) = 6.
Stack slot id for offset -120 (-0x78) (frame) (untracked) = 7.
Stack slot id for offset -128 (-0x80) (frame) (untracked) = 8.
Stack slot id for offset -136 (-0x88) (frame) (untracked) = 9.
Stack slot id for offset -152 (-0x98) (frame) (byref, untracked) = 10.
Stack slot id for offset -168 (-0xa8) (frame) (byref, untracked) = 11.
Register slot id for reg rcx = 12.
Register slot id for reg rax = 13.
Register slot id for reg rdx = 14.
Set state of slot 12 at instr offset 0x11e to Live.
Set state of slot 12 at instr offset 0x124 to Dead.
Set state of slot 12 at instr offset 0x172 to Live.
Set state of slot 12 at instr offset 0x178 to Dead.
Set state of slot 12 at instr offset 0x183 to Live.
Set state of slot 12 at instr offset 0x191 to Dead.
Set state of slot 13 at instr offset 0x19b to Live.
Set state of slot 12 at instr offset 0x1b6 to Live.
Set state of slot 14 at instr offset 0x1ba to Live.
Set state of slot 13 at instr offset 0x1bf to Dead.
Set state of slot 12 at instr offset 0x1bf to Dead.
Set state of slot 14 at instr offset 0x1bf to Dead.
Set state of slot 12 at instr offset 0x1c3 to Live.
Set state of slot 14 at instr offset 0x1cf to Live.
Set state of slot 13 at instr offset 0x1db to Live.
Set state of slot 12 at instr offset 0x1db to Dead.
Set state of slot 14 at instr offset 0x1db to Dead.
Set state of slot 13 at instr offset 0x1ed to Dead.
Defining interruptible range: [0x54, 0x7d).
Defining interruptible range: [0x8e, 0xa8).
Defining interruptible range: [0xb9, 0x125).
Defining interruptible range: [0x147, 0x1e4).

*************** Finishing PHASE Emit GC+EH tables
Method code size: 493

Allocations for System.Program:Main(System.String[]) (MethodHash=7cc6f032)
count:       2463, size:     178480, max =       5504
allocateMemory:     196608, nraUsed:     181528

Alloc'd bytes by kind:
                  kind |       size |     pct
  ---------------------+------------+--------
         AssertionProp |          0 |   0.00%
               ASTNode |      25816 |  14.46%
              InstDesc |      11872 |   6.65%
              ImpStack |        384 |   0.22%
            BasicBlock |       3800 |   2.13%
              CallArgs |       1520 |   0.85%
              FlowEdge |        672 |   0.38%
     TreeStatementList |          0 |   0.00%
               SiScope |          0 |   0.00%
       DominatorMemory |          0 |   0.00%
                  LSRA |       8240 |   4.62%
         LSRA_Interval |       4640 |   2.60%
      LSRA_RefPosition |      21760 |  12.19%
          Reachability |        336 |   0.19%
                   SSA |          0 |   0.00%
           ValueNumber |          0 |   0.00%
              LvaTable |       1920 |   1.08%
            UnwindInfo |          0 |   0.00%
                hashBv |         88 |   0.05%
                bitset |        360 |   0.20%
          FixedBitVect |         56 |   0.03%
               Generic |       2864 |   1.60%
   LocalAddressVisitor |          0 |   0.00%
         FieldSeqStore |        144 |   0.08%
          MemorySsaMap |          0 |   0.00%
          MemoryPhiArg |          0 |   0.00%
                   CSE |          0 |   0.00%
                    GC |       4012 |   2.25%
       CorTailCallInfo |          0 |   0.00%
              Inlining |        248 |   0.14%
            ArrayStack |          0 |   0.00%
             DebugInfo |       2752 |   1.54%
             DebugOnly |      83138 |  46.58%
               Codegen |       1240 |   0.69%
               LoopOpt |          0 |   0.00%
             LoopClone |          0 |   0.00%
             LoopHoist |          0 |   0.00%
               Unknown |        122 |   0.07%
            RangeCheck |          0 |   0.00%
              CopyProp |          0 |   0.00%
             Promotion |          0 |   0.00%
           SideEffects |          0 |   0.00%
       ObjectAllocator |          0 |   0.00%
    VariableLiveRanges |       2272 |   1.27%
           ClassLayout |        224 |   0.13%
       TailMergeThrows |          0 |   0.00%
             EarlyProp |          0 |   0.00%
              ZeroInit |          0 |   0.00%
                   Pgo |          0 |   0.00%

****** DONE compiling System.Program:Main(System.String[])

Ascii
Vector512: True
True
String
Vector512: False
